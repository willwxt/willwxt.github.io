(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{466:function(t,a,s){"use strict";s.r(a);var e=s(45),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java异常架构面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常架构面试题"}},[t._v("#")]),t._v(" Java异常架构面试题")]),t._v(" "),s("h2",{attrs:{id:"java异常简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常简介"}},[t._v("#")]),t._v(" Java异常简介")]),t._v(" "),s("p",[t._v("Java异常是Java提供的一种识别及响应错误的一致性机制。")]),t._v(" "),s("p",[t._v("Java异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。在有效使用异常的情况下，异常能清晰的回答 what, where, why这3个问题：异常类型回答了“什么”被抛出，异常堆栈跟踪回答了“在哪”抛出，异常信息回答了“为什么”会抛出。")]),t._v(" "),s("h2",{attrs:{id:"java异常架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常架构"}},[t._v("#")]),t._v(" Java异常架构")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Throwable\n\tError\n\t\tVirtuMachineError\n\t\t\tStackOverFlowError\n\t\t\tOutOfMemoryError\n\t\tAWTError\n\tException\n\t\tIOExeption\n\t\t\tEOFException\n\t\t\tFileNotFoundException\n\t\tRuntimeException\n\t\t\tNullPointerException\n\t\t\tIndexOutOfBoundsException\n\t\t\tArithmeticException\n\t\tClassCastException\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("h3",{attrs:{id:"_1-throwable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-throwable"}},[t._v("#")]),t._v(" 1. Throwable")]),t._v(" "),s("p",[t._v("Throwable 是 Java 语言中所有错误与异常的超类。")]),t._v(" "),s("p",[t._v("Throwable 包含两个子类：Error（错误）和 Exception（异常），它们通常用于指示发生了异常情况。")]),t._v(" "),s("p",[t._v("Throwable 包含了其线程创建时线程执行堆栈的快照，它提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。")]),t._v(" "),s("h3",{attrs:{id:"_2-error-错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-error-错误"}},[t._v("#")]),t._v(" 2. Error（错误）")]),t._v(" "),s("p",[t._v("定义：Error 类及其子类。程序中无法处理的错误，表示运行应用程序中出现了严重的错误。")]),t._v(" "),s("p",[t._v("特点：此类错误一般表示代码运行时 JVM 出现问题。通常有 Virtual")]),t._v(" "),s("p",[t._v("MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）")]),t._v(" "),s("p",[t._v("等。比如 OutOfMemoryError：内存不足错误；StackOverflowError：栈溢出错误。此类错误发生时，JVM 将终止线程。这些错误是不受检异常，非代码性错误。因此，当此类错误发生时，应用程序不")]),t._v(" "),s("p",[t._v("应该去处理此类错误。按照Java惯例，我们是不应该实现任何新的Error子类的！")]),t._v(" "),s("h3",{attrs:{id:"_3-exception-异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-exception-异常"}},[t._v("#")]),t._v(" 3. Exception（异常）")]),t._v(" "),s("p",[t._v("程序本身可以捕获并且可以处理的异常。Exception 这种异常又分为两类：运行时异常和编译时异常。")]),t._v(" "),s("h4",{attrs:{id:"运行时异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时异常"}},[t._v("#")]),t._v(" 运行时异常")]),t._v(" "),s("p",[t._v("定义：RuntimeException 类及其子类，表示 JVM 在运行期间可能出现的异常。")]),t._v(" "),s("p",[t._v('特点：Java 编译器不会检查它。也就是说，当程序中可能出现这类异常时，倘若既"没有通过throws声明抛出它"，也"没有用try-catch语句捕获它"，还是会编译通过。比如NullPointerException空指针异常、')]),t._v(" "),s("p",[t._v("ArrayIndexOutBoundException数组下标越界异常、ClassCastException类型转换异常、ArithmeticExecption算术异常。此类异常属于不受检异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理，也可以不处理。虽然 Java 编译器不会检查运行时异常，但是我们也可以通过 throws 进行声明抛")]),t._v(" "),s("p",[t._v("出，也可以通过 try-catch 对它进行捕获处理。如果产生运行时异常，则需要通过修改代码来进行避免。例如，若会发生除数为零的情况，则需要通过代码避免该情况的发生！")]),t._v(" "),s("p",[t._v("RuntimeException 异常会由 Java 虚拟机自动抛出并自动捕获（就算我们没写异常捕获语句运行时也会抛出错误！！），此类异常的出现绝大数情况是代码本身有问题应该从逻辑上去解决并改进代码。")]),t._v(" "),s("h4",{attrs:{id:"编译时异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译时异常"}},[t._v("#")]),t._v(" 编译时异常")]),t._v(" "),s("p",[t._v("定义: Exception 中除 RuntimeException 及其子类之外的异常。")]),t._v(" "),s("p",[t._v("特点: Java 编译器会检查它。如果程序中出现此类异常，比如")]),t._v(" "),s("p",[t._v("ClassNotFoundException（没有找到指定的类异常），IOException（IO流异常），要么通过throws进行声明抛出，要么通过try-catch进行捕获处理，否则不能通过编译。在程序中，通常不会自定义该类异常，而是直接使用系统提供的异常类。该异常我们必须手动在代码里添加捕获语句来处理该异常。")]),t._v(" "),s("h3",{attrs:{id:"_4-受检异常与非受检异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-受检异常与非受检异常"}},[t._v("#")]),t._v(" 4. 受检异常与非受检异常")]),t._v(" "),s("p",[t._v("Java 的所有异常可以分为受检异常（checked exception）和非受检异常")]),t._v(" "),s("p",[t._v("（unchecked exception）。")]),t._v(" "),s("h4",{attrs:{id:"受检异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#受检异常"}},[t._v("#")]),t._v(" 受检异常")]),t._v(" "),s("p",[t._v("编译器要求必须处理的异常。正确的程序在运行过程中，经常容易出现的、符合")]),t._v(" "),s("p",[t._v("预期的异常情况。一旦发生此类异常，就必须采用某种方式进行处理。除")]),t._v(" "),s("p",[t._v("RuntimeException 及其子类外，其他的 Exception 异常都属于受检异常。编译器会检查此类异常，也就是说当编译器检查到应用中的某处可能会此类异常时，将会提示你处理本异常——要么使用try-catch捕获，要么使用方法签名中用 throws 关键字抛出，否则编译不通过。")]),t._v(" "),s("h4",{attrs:{id:"非受检异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非受检异常"}},[t._v("#")]),t._v(" 非受检异常")]),t._v(" "),s("p",[t._v("编译器不会进行检查并且不要求必须处理的异常，也就说当程序中出现此类异常时，即使我们没有try-catch捕获它，也没有使用throws抛出该异常，编译也会正常通过。该类异常包括运行时异常（RuntimeException极其子类）和错误(Error)")]),t._v(" "),s("h2",{attrs:{id:"java异常关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常关键字"}},[t._v("#")]),t._v(" Java异常关键字")]),t._v(" "),s("p",[t._v("• try – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常时，异常就被抛出。")]),t._v(" "),s("p",[t._v("• catch – 用于捕获异常。catch用来捕获try语句块中发生的异常。")]),t._v(" "),s("p",[t._v("• finally – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语句，如果finally中使用了 return或者throw等终止方法的语句，则就不会跳回执行，直接停止。")]),t._v(" "),s("p",[t._v("• throw – 用于抛出异常。")]),t._v(" "),s("p",[t._v("• throws – 用在方法签名中，用于声明该方法可能抛出的异常。")]),t._v(" "),s("h1",{attrs:{id:"java异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常处理"}},[t._v("#")]),t._v(" Java异常处理")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("异常处理 \n\t抛出异常 throw\n\t声明异常 throws\n\t捕获异常 try catch finally\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("Java 通过面向对象的方法进行异常处理，一旦方法抛出异常，系统自动根据该异常对象寻找合适异常处理器（Exception Handler）来处理该异常，把各种不同的异常进行分类，并提供了良好的接口。在 Java 中，每个异常都是一个对")]),t._v(" "),s("p",[t._v("象，它是 Throwable 类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。Java 的异常处理是通过 5 个关键词来实现的：try、 catch、throw、throws 和 finally。")]),t._v(" "),s("p",[t._v("在Java应用中，异常的处理机制分为声明异常，抛出异常和捕获异常。")]),t._v(" "),s("h2",{attrs:{id:"声明异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明异常"}},[t._v("#")]),t._v(" 声明异常")]),t._v(" "),s("p",[t._v("通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下")]),t._v(" "),s("p",[t._v("去。传递异常可以在方法签名处使用 throws 关键字声明可能会抛出的异常。注意")]),t._v(" "),s("p",[s("img",{attrs:{src:"03-Java%E5%BC%82%E5%B8%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%882020%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%89.assets/clip_image001-1604914706296.gif",alt:"img"}}),t._v(" 非检查异常（Error、RuntimeException 或它们的子类）不可使用 throws 关键字来声明要抛出的异常。")]),t._v(" "),s("p",[t._v("​         "),s("img",{attrs:{src:"03-Java%E5%BC%82%E5%B8%B8%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%882020%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%89.assets/clip_image002-1604914706296.gif",alt:"img"}}),t._v(" 一个方法出现编译时异常，就需要 try-catch/ throws 处理，否则会导致编译错误")]),t._v(" "),s("h2",{attrs:{id:"抛出异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抛出异常"}},[t._v("#")]),t._v(" 抛出异常")]),t._v(" "),s("p",[t._v("如果你觉得解决不了某些异常问题，且不需要调用者处理，那么你可以抛出异常。 throw关键字作用是在方法内部抛出一个Throwable类型的异常。任何Java代码都可以通过throw语句抛出异常。")]),t._v(" "),s("h2",{attrs:{id:"捕获异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#捕获异常"}},[t._v("#")]),t._v(" 捕获异常")]),t._v(" "),s("p",[t._v("程序通常在运行之前不报错，但是运行后可能会出现某些未知的错误，但是还不想直接抛出到上一级，那么就需要通过try…catch…的形式进行异常捕获，之后根据不同的异常情况来进行相应的处理。如何选择异常类型")]),t._v(" "),s("p",[t._v("可以根据下图来选择是捕获异常，声明异常还是抛出异常")]),t._v(" "),s("p",[s("svg",{attrs:{id:"SvgjsSvg1892",width:"367.0056610107422",height:"260.98863220214844",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[s("defs",{attrs:{id:"SvgjsDefs1893"}},[s("marker",{attrs:{id:"SvgjsMarker1905",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath1906",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker1921",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath1922",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker1935",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath1936",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker1949",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath1950",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})])]),s("rect",{attrs:{id:"SvgjsRect1894",width:"367.0056610107422",height:"260.98863220214844",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG1895",transform:"translate(25.008529663085938,25.000015258789062)"}},[s("path",{attrs:{id:"SvgjsPath1896",d:"M 0 4Q 0 0 4 0L 100 0Q 104 0 104 4L 104 46Q 104 50 100 50L 4 50Q 0 50 0 46Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#66cc00"}}),s("g",{attrs:{id:"SvgjsG1897"}},[s("text",{attrs:{id:"SvgjsText1898","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"84px",fill:"#ffffff","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"7.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1899",dy:"16",x:"52"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1900"}},[t._v("是否解决不了")])]),s("tspan",{attrs:{id:"SvgjsTspan1901",dy:"16",x:"52"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1902"}},[t._v("某些异常问题")])])])])]),s("g",{attrs:{id:"SvgjsG1903"}},[s("path",{attrs:{id:"SvgjsPath1904",d:"M77.00852966308594 75.00001525878906C 77.00852966308594 94.20001525878907 77.00852966308595 103.80001525878907 77.00852966308594 123.00001525878906",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1905)"}}),s("rect",{attrs:{id:"SvgjsRect1907",width:"52",height:"15",x:"51.00852966308594",y:"91.50001525878906",fill:"#ffffff"}}),s("text",{attrs:{id:"SvgjsText1908","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"52px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"89.55001525878906",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1909",dy:"16",x:"77.00852966308594"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1910"}},[t._v("解决不了")])])])]),s("g",{attrs:{id:"SvgjsG1911",transform:"translate(27.008529663085938,123.00001525878906)"}},[s("path",{attrs:{id:"SvgjsPath1912",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 42Q 100 46 96 46L 4 46Q 0 46 0 42Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffcc"}}),s("g",{attrs:{id:"SvgjsG1913"}},[s("text",{attrs:{id:"SvgjsText1914","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"5.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1915",dy:"16",x:"50"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1916"}},[t._v("调用者是否必")])]),s("tspan",{attrs:{id:"SvgjsTspan1917",dy:"16",x:"50"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1918"}},[t._v("须处理 ")])])])])]),s("g",{attrs:{id:"SvgjsG1919"}},[s("path",{attrs:{id:"SvgjsPath1920",d:"M129.00852966308594 50.00001525878906C 172.40852966308594 50.00001525878906 194.10852966308593 50.00001525878906 237.50852966308594 50.00001525878906",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1921)"}}),s("rect",{attrs:{id:"SvgjsRect1923",width:"52",height:"15",x:"157.25852966308594",y:"42.50001525878906",fill:"#ffffff"}}),s("text",{attrs:{id:"SvgjsText1924","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"52px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"40.55001525878906",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1925",dy:"16",x:"183.25852966308594"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1926"}},[t._v("可以解决")])])])]),s("g",{attrs:{id:"SvgjsG1927",transform:"translate(237.50852966308594,32.50001525878906)"}},[s("path",{attrs:{id:"SvgjsPath1928",d:"M 0 4Q 0 0 4 0L 92 0Q 96 0 96 4L 96 31Q 96 35 92 35L 4 35Q 0 35 0 31Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffe6cc"}}),s("g",{attrs:{id:"SvgjsG1929"}},[s("text",{attrs:{id:"SvgjsText1930","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"76px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"8.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1931",dy:"16",x:"48"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1932"}},[t._v("捕获异常 ")])])])])]),s("g",{attrs:{id:"SvgjsG1933"}},[s("path",{attrs:{id:"SvgjsPath1934",d:"M127.00852966308594 146.00001525878906C 167.81637204662786 146.00001525878906 188.200687279544 144.00001525878906 229.00852966308594 144.00001525878906",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1935)"}}),s("rect",{attrs:{id:"SvgjsRect1937",width:"52",height:"15",x:"152.00852966308594",y:"137.50001525878906",fill:"#ffffff"}}),s("text",{attrs:{id:"SvgjsText1938","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"52px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"135.55001525878907",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1939",dy:"16",x:"178.00852966308594"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1940"}},[t._v("必须处理")])])])]),s("g",{attrs:{id:"SvgjsG1941",transform:"translate(229.00852966308594,123.00001525878906)"}},[s("path",{attrs:{id:"SvgjsPath1942",d:"M 0 4Q 0 0 4 0L 109 0Q 113 0 113 4L 113 38Q 113 42 109 42L 4 42Q 0 42 0 38Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffe6cc"}}),s("g",{attrs:{id:"SvgjsG1943"}},[s("text",{attrs:{id:"SvgjsText1944","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"93px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"11.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1945",dy:"16",x:"56.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1946"}},[t._v("声明受检异常")])])])])]),s("g",{attrs:{id:"SvgjsG1947"}},[s("path",{attrs:{id:"SvgjsPath1948",d:"M77.00852966308594 169.00001525878906C 77.00852966308595 216.18696053056559 138.82158439130941 214.11430097307476 186.00852966308594 214.11430097307476",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1949)"}}),s("rect",{attrs:{id:"SvgjsRect1951",width:"78",height:"15",x:"74.81342518616975",y:"201.7522625928481",fill:"#ffffff"}}),s("text",{attrs:{id:"SvgjsText1952","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"78px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"199.8022625928481",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1953",dy:"16",x:"113.81342518616975"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1954"}},[t._v("不是必须处理")])])])]),s("g",{attrs:{id:"SvgjsG1955",transform:"translate(186.00852966308594,192.00001525878906)"}},[s("path",{attrs:{id:"SvgjsPath1956",d:"M 0 4Q 0 0 4 0L 109 0Q 113 0 113 4L 113 39Q 113 43 109 43L 4 43Q 0 43 0 39Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffe6cc"}}),s("g",{attrs:{id:"SvgjsG1957"}},[s("text",{attrs:{id:"SvgjsText1958","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"93px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"12.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan1959",dy:"16",x:"56.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1960"}},[t._v("抛出运行时异常")])])])])])])]),t._v(" "),s("h2",{attrs:{id:"常见异常处理方式直接抛出异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见异常处理方式直接抛出异常"}},[t._v("#")]),t._v(" 常见异常处理方式直接抛出异常")]),t._v(" "),s("p",[t._v("通常，应该捕获那些知道如何处理的异常，将不知道如何处理的异常继续传递下去。传递异常可以在方法签名处使用 throws 关键字声明可能会抛出的异常。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 private static void readFile(String filePath) throws IOException { \n2 File file = new File(filePath);\n3 String result; \n4 BufferedReader reader = new BufferedReader(new FileReader(file)); \n5 while((result = reader.readLine())!=null) { \n6 System.out.println(result);\n7\t}\n8\treader.close();\n9\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"封装异常再抛出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装异常再抛出"}},[t._v("#")]),t._v(" 封装异常再抛出")]),t._v(" "),s("p",[t._v("有时我们会从 catch 中抛出一个异常，目的是为了改变异常的类型。多用于在多系统集成时，当某个子系统故障，异常类型可能有多种，可以用统一的异常类型向外暴露，不需暴露太多内部异常细节。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 private static void readFile(String filePath) throws MyException {\n2\ttry {\n3\t// code\n4 } catch (IOException e) {\n5\tMyException ex = new MyException("read file failed.");\n6\tex.initCause(e);\n7\tthrow ex;\n8\t}\n9\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"捕获异常-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#捕获异常-2"}},[t._v("#")]),t._v(" 捕获异常")]),t._v(" "),s("p",[t._v("在一个 try-catch 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tprivate static void readFile(String filePath) {\n2\ttry {\n3\t// code\n4\t} catch (FileNotFoundException e) {\n5\t// handle FileNotFoundException\n6 } catch (IOException e){\n7\t// handle IOException\n8\t}\n9\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("同一个 catch 也可以捕获多种类型异常，用 | 隔开")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tprivate static void readFile(String filePath) {\n2\ttry {\n3\t// code\n4\t} catch (FileNotFoundException | UnknownHostException e) {\n5\t// handle FileNotFoundException or UnknownHostException\n6 } catch (IOException e){\n7\t// handle IOException\n8\t}\n9\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h3",{attrs:{id:"自定义异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常"}},[t._v("#")]),t._v(" 自定义异常")]),t._v(" "),s("p",[t._v("习惯上，定义一个异常类应包含两个构造函数，一个无参构造函数和一个带有详")]),t._v(" "),s("p",[t._v("细描述信息的构造函数（Throwable 的 toString 方法会打印这些详细信息，调试时很有用）")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tpublic class MyException extends Exception {\n2\tpublic MyException(){ }\n3\tpublic MyException(String msg){\n4\tsuper(msg);\n5\t}\n6\t// ...\n7\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"try-catch-finally"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally"}},[t._v("#")]),t._v(" try-catch-finally")]),t._v(" "),s("p",[t._v("当方法中发生异常，异常处之后的代码不会再执行，如果之前获取了一些本地资源需要释放，则需要在方法正常结束时和 catch 语句中都调用释放本地资源的代码，显得代码比较繁琐，finally 语句可以解决这个问题。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 private static void readFile(String filePath) throws MyException { \n2  File file = new File(filePath); \n3  String result;\n4  BufferedReader reader = null; \n5  try { \n6  reader = new BufferedReader(new FileReader(file)); \n7  while((result = reader.readLine())!=null) {\n8  System.out.println(result); \n9  } \n10  } catch (IOException e) {\n11  System.out.println("readFile method catch block."); \n12  MyException ex = new MyException("read file failed."); \n13  ex.initCause(e);\n14  throw ex; \n15  } finally { \n16  System.out.println("readFile method finally block.");\n17  if (null != reader) { \n18  try {\n19  reader.close(); \n20  } catch (IOException e) {\n21  e.printStackTrace(); \n22  } \n23  }\n24  } \n25 }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br")])]),s("p",[t._v("调用该方法时，读取文件时若发生异常，代码会进入 catch 代码块，之后进入  finally 代码块；若读取文件时未发生异常，则会跳过 catch 代码块直接进入  finally 代码块。所以无论代码中是否发生异常，fianlly 中的代码都会执行。 若 catch 代码块中包含 return 语句，finally 中的代码还会执行吗？将以上代码 中的 catch 子句修改如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 catch (IOException e) { \n2  System.out.println("readFile method catch block.");\n3  return; \n4 }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("调用 readFile 方法，观察当 catch 子句中调用 return 语句时，finally 子句是 否执行")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 readFile method catch block. \n2 readFile method finally block.\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("可见，即使 catch 中包含了 return 语句，finally 子句依然会执行。若 finally 中也包含 return 语句，finally 中的 return 会覆盖前面的 return.")]),t._v(" "),s("h3",{attrs:{id:"try-with-resource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-with-resource"}},[t._v("#")]),t._v(" try-with-resource")]),t._v(" "),s("p",[t._v("上面例子中，finally 中的 close 方法也可能抛出 IOException, 从而覆盖了原始异常。JAVA 7 提供了更优雅的方式来实现资源的自动释放，自动释放的资源需要是实现了 AutoCloseable 接口的类。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1\tprivate static void tryWithResourceTest(){\n2\ttry (Scanner scanner = new Scanner(new FileInputStream("c:/abc"),"UTF8")){\n3\t// code\n4 } catch (IOException e){\n5\t// handle exception\n6\t}\n7\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("try 代码块退出时，会自动调用 scanner.close 方法，和把 scanner.close 方法放在 finally 代码块中不同的是，若 scanner.close 抛出异常，则会被抑制，抛出的仍然为原始异常。被抑制的异常会由 addSusppressed 方法添加到原来的异常，如果想要获取被抑制的异常列表，可以调用 getSuppressed 方法来获取。")]),t._v(" "),s("h1",{attrs:{id:"java异常常见面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常常见面试题"}},[t._v("#")]),t._v(" Java异常常见面试题")]),t._v(" "),s("h2",{attrs:{id:"_1-error-和-exception-区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-error-和-exception-区别是什么"}},[t._v("#")]),t._v(" 1. Error 和 Exception 区别是什么？")]),t._v(" "),s("p",[t._v("Error 类型的错误通常为虚拟机相关错误，如系统崩溃，内存不足，堆栈溢出 等，编译器不会对这类错误进行检测，JAVA 应用程序也不应对这类错误进行捕 获，一旦这类错误发生，通常应用程序会被终止，仅靠应用程序本身无法恢复；")]),t._v(" "),s("p",[t._v("Exception 类的错误是可以在应用程序中进行捕获并处理的，通常遇到这种错 误，应对其进行处理，使应用程序可以继续正常运行。")]),t._v(" "),s("h2",{attrs:{id:"_2-运行时异常和一般异常-受检异常-区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-运行时异常和一般异常-受检异常-区别是什么"}},[t._v("#")]),t._v(" 2. 运行时异常和一般异常(受检异常)区别是什么？")]),t._v(" "),s("p",[t._v("运行时异常包括 RuntimeException 类及其子类，表示 JVM 在运行期间可能出 现的异常。 Java 编译器不会检查运行时异常。")]),t._v(" "),s("p",[t._v("受检异常是Exception 中除 RuntimeException 及其子类之外的异常。 Java 编 译器会检查受检异常。")]),t._v(" "),s("p",[t._v("**RuntimeException异常和受检异常之间的区别：**是否强制要求调用者必须处 理此异常，如果强制要求调用者必须进行处理，那么就使用受检异常，否则就选择非受检异常(RuntimeException)。一般来讲，如果没有特殊的要求，我们建 议使用RuntimeException异常。")]),t._v(" "),s("h2",{attrs:{id:"_3-jvm-是如何处理异常的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-jvm-是如何处理异常的"}},[t._v("#")]),t._v(" 3. JVM 是如何处理异常的？")]),t._v(" "),s("p",[t._v("在一个方法中如果发生异常，这个方法会创建一个异常对象，并转交给 JVM， 该异常对象包含异常名称，异常描述以及异常发生时应用程序的状态。创建异常 对象并转交给 JVM 的过程称为抛出异常。可能有一系列的方法调用，终才进 入抛出异常的方法，这一系列方法调用的有序列表叫做调用栈。")]),t._v(" "),s("p",[t._v("JVM 会顺着调用栈去查找看是否有可以处理异常的代码，如果有，则调用异常 处理代码。当 JVM 发现可以处理异常的代码时，会把发生的异常传递给它。如 果 JVM 没有找到可以处理该异常的代码块，JVM 就会将该异常转交给默认的异 常处理器（默认处理器为 JVM 的一部分），默认异常处理器打印出异常信息并 终止应用程序。")]),t._v(" "),s("h2",{attrs:{id:"_4-throw-和-throws-的区别是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-throw-和-throws-的区别是什么"}},[t._v("#")]),t._v(" 4. throw 和 throws 的区别是什么？")]),t._v(" "),s("p",[t._v("Java 中的异常处理除了包括捕获异常和处理异常之外，还包括声明异常和拋出 异常，可以通过 throws 关键字在方法上声明该方法要拋出的异常，或者在方法 内部通过 throw 拋出异常对象。")]),t._v(" "),s("p",[t._v("**throws 关键字和 throw 关键字在使用上的几点区别如下： **")]),t._v(" "),s("ul",[s("li",[t._v("throw 关键字用在方法内部，只能用于抛出一种异常，用来抛出方法或代码块中 的异常，受查异常和非受查异常都可以被抛出。")]),t._v(" "),s("li",[t._v("throws 关键字用在方法声明上，可以抛出多个异常，用来标识该方法可能抛出 的异常列表。一个方法用 throws 标识了可能抛出的异常列表，调用该方法的方法中 必须包含可处理异常的代码，否则也要在方法签名中用 throws 关键字声明相应的异 常。")])]),t._v(" "),s("h2",{attrs:{id:"_5-final、finally、finalize-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-final、finally、finalize-有什么区别"}},[t._v("#")]),t._v(" 5. final、finally、finalize 有什么区别？")]),t._v(" "),s("ul",[s("li",[t._v("final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方 法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。")]),t._v(" "),s("li",[t._v("finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执 行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用 来存放一些关闭资源的代码。")]),t._v(" "),s("li",[t._v("finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类， Java 中允许使用 finalize()方法在垃圾收集器将对象从内存中清除出去之前做必要的 清理工作。")])]),t._v(" "),s("h2",{attrs:{id:"_6-noclassdeffounderror-和-classnotfoundexception-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-noclassdeffounderror-和-classnotfoundexception-区别"}},[t._v("#")]),t._v(" 6. NoClassDefFoundError 和  ClassNotFoundException 区别？")]),t._v(" "),s("p",[t._v("NoClassDefFoundError 是一个 Error 类型的异常，是由 JVM 引起的，不应该 尝试捕获这个异常。")]),t._v(" "),s("p",[t._v("引起该异常的原因是 JVM 或 ClassLoader 尝试加载某类时在内存中找不到该类 的定义，该动作发生在运行期间，即编译时该类存在，但是在运行时却找不到 了，可能是变异后被删除了等原因导致；")]),t._v(" "),s("p",[t._v("ClassNotFoundException 是一个受查异常，需要显式地使用 try-catch 对其 进行捕获和处理，或在方法签名中用 throws 关键字进行声明。当使用  Class.forName, ClassLoader.loadClass 或 ClassLoader.findSystemClass 动 态加载类到内存的时候，通过传入的类路径参数没有找到该类，就会抛出该异常；另一种抛出该异常的可能原因是某个类已经由一个类加载器加载至内存中， 另一个加载器又尝试去加载它。")]),t._v(" "),s("h2",{attrs:{id:"_7-try-catch-finally-中哪个部分可以省略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-try-catch-finally-中哪个部分可以省略"}},[t._v("#")]),t._v(" 7. try-catch-finally 中哪个部分可以省略？")]),t._v(" "),s("p",[t._v("答：catch 可以省略")]),t._v(" "),s("p",[t._v("**原因 **")]),t._v(" "),s("p",[t._v("更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时 异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处 理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用 catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以 catch可以省略，你加上catch编译器也觉得无可厚非。")]),t._v(" "),s("p",[t._v("理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对 所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。 但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛 出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用 catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾 处理，或者加上catch捕获以便进一步处理。")]),t._v(" "),s("p",[t._v("至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。")]),t._v(" "),s("h2",{attrs:{id:"_8-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗"}},[t._v("#")]),t._v(" 8. try-catch-finally 中，如果 catch 中 return 了， finally 还会执行吗？")]),t._v(" "),s("p",[t._v("答：会执行，在 return 前执行。")]),t._v(" "),s("p",[t._v("**注意：**在 finally 中改变返回值的做法是不好的，因为如果存在 finally 代码块， try中的 return 语句不会立马返回调用者，而是记录下返回值待 finally 代码块 执行完毕之后再向调用者返回其值，然后如果在 finally 中修改了返回值，就会 返回修改后的值。显然，在 finally 中返回或者修改返回值会对程序造成很大的 困扰，C#中直接用编译错误的方式来阻止程序员干这种龌龊的事情，Java 中也 可以通过提升编译器的语法检查级别来产生警告或错误。")]),t._v(" "),s("p",[s("strong",[t._v("代码示例1：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 public static int getInt() { \n2  int a = 10; \n3  try {\n4  System.out.println(a / 0); \n5  a = 20; \n6  } catch (ArithmeticException e) { \n7  a = 30; \n8  return a; \n9  /* \n10  * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返 回路径就形成了 \n11  * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40 \n12  * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量 了，而是常量30 \n13  */ \n14  } finally { \n15  a = 40; \n16  } \n17  return a; \n18 } \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("**执行结果：**30")]),t._v(" "),s("p",[s("strong",[t._v("代码示例2：")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 public static int getInt() { \n2  int a = 10; \n3  try { \n4  System.out.println(a / 0); \n5  a = 20; \n6  } catch (ArithmeticException e) { \n7  a = 30; \n8  return a; \n9  } finally { \n10  a = 40; \n11  //如果这样，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直 接返回40 \n12  return a; \n13  }\n14 \n15 } \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("**执行结果：**40")]),t._v(" "),s("h2",{attrs:{id:"_9-类-examplea-继承-exception-类-exampleb-继承-examplea。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-类-examplea-继承-exception-类-exampleb-继承-examplea。"}},[t._v("#")]),t._v(" 9. 类 ExampleA 继承 Exception，类 ExampleB 继承 ExampleA。")]),t._v(" "),s("p",[t._v("有如下代码片断：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 try { \n2  throw new ExampleB("b") \n3 } catch（ExampleA e）{ \n4  System.out.println("ExampleA"); \n5 } catch（Exception e）{ \n6  System.out.println("Exception"); \n7 } \n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("请问执行此段代码的输出是什么？")]),t._v(" "),s("p",[s("strong",[t._v("答：")])]),t._v(" "),s("p",[t._v("输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类 型]，抓取 ExampleA 类型异常的 catch 块能够抓住 try 块中抛出的 ExampleB  类型的异常）")]),t._v(" "),s("p",[t._v("面试题 - 说出下面代码的运行结果。（此题的出处是《Java 编程思想》一书）")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 class Annoyance extends Exception { \n2 } \n3 class Sneeze extends Annoyance { \n4 } \n5 class Human { \n6  public static void main(String[] args) \n7  throws Exception { \n8  try { \n9  try { \n10  throw new Sneeze(); \n11  } catch ( Annoyance a ) { \n12  System.out.println("Caught Annoyance"); \n13  throw a; \n14  } \n15  } catch ( Sneeze s ) { \n16  System.out.println("Caught Sneeze"); \n17  return ; \n18  } finally { \n19  System.out.println("Hello World!"); \n20  } \n21  } \n22 }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[s("strong",[t._v("结果")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 Caught Annoyance \n2 Caught Sneeze \n3 Hello World! \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_10-常见的-runtimeexception-有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-常见的-runtimeexception-有哪些"}},[t._v("#")]),t._v(" 10. 常见的 RuntimeException 有哪些？")]),t._v(" "),s("ul",[s("li",[t._v("ClassCastException(类转换异常)")]),t._v(" "),s("li",[t._v("IndexOutOfBoundsException(数组越界)")]),t._v(" "),s("li",[t._v("NullPointerException(空指针)")]),t._v(" "),s("li",[t._v("ArrayStoreException(数据存储异常，操作数组时类型不一致)")]),t._v(" "),s("li",[t._v("还有IO操作的BufferOverflowException异常")])]),t._v(" "),s("h2",{attrs:{id:"_11-java常见异常有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-java常见异常有哪些"}},[t._v("#")]),t._v(" 11. Java常见异常有哪些")]),t._v(" "),s("p",[t._v("java.lang.IllegalAccessError：违法访问错误。当一个应用试图访问、修改某个类的域（Field）或者调用其方法，但是又违反域或方法的可见性声明，则抛出该异常。")]),t._v(" "),s("p",[t._v("java.lang.InstantiationError：实例化错误。当一个应用试图通过Java的new操作符构造一个抽象类或者接口时抛出该异常.")]),t._v(" "),s("p",[t._v("java.lang.OutOfMemoryError：内存不足错误。当可用内存不足以让Java虚拟机分配给一个对象时抛出该错误。")]),t._v(" "),s("p",[t._v("java.lang.StackOverflowError：堆栈溢出错误。当一个应用递归调用的层次太深而导致堆栈溢出或者陷入死循环时抛出该错误。")]),t._v(" "),s("p",[t._v("java.lang.ClassCastException：类造型异常。假设有类A和B（A不是B的父类或子类），O是A的实例，那么当强制将O构造为类B的实例时抛出该异常。该异常经常被称为强制类型转换异常。")]),t._v(" "),s("p",[t._v("java.lang.ClassNotFoundException：找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常。 java.lang.ArithmeticException：算术条件异常。譬如：整数除零等。")]),t._v(" "),s("p",[t._v("java.lang.ArrayIndexOutOfBoundsException：数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出。")]),t._v(" "),s("p",[t._v("java.lang.IndexOutOfBoundsException：索引越界异常。当访问某个序列的索引值小于0或大于等于序列大小时，抛出该异常。 java.lang.InstantiationException：实例化异常。当试图通过newInstance()方法创建某个类的实例，而该类是一个抽象类或接口时，抛出该异常。")]),t._v(" "),s("p",[t._v("java.lang.NoSuchFieldException：属性不存在异常。当访问某个类的不存在的属性时抛出该异常。")]),t._v(" "),s("p",[t._v("java.lang.NoSuchMethodException：方法不存在异常。当访问某个类的不存在的方法时抛出该异常。")]),t._v(" "),s("p",[t._v("java.lang.NullPointerException：空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等。")]),t._v(" "),s("p",[t._v("java.lang.NumberFormatException：数字格式异常。当试图将一个String转换为指定的数字类型，而该字符串确不满足数字类型要求的格式时，抛出该异常。")]),t._v(" "),s("p",[t._v("java.lang.StringIndexOutOfBoundsException：字符串索引越界异常。当使用索引值访问某个字符串中的字符，而该索引值小于0或大于等于序列大小时,抛出该异常")]),t._v(" "),s("h1",{attrs:{id:"java异常处理最佳实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java异常处理最佳实践"}},[t._v("#")]),t._v(" Java异常处理最佳实践")]),t._v(" "),s("p",[t._v("在 Java 中处理异常并不是一个简单的事情。不仅仅初学者很难理解，即使一些有经验的开发者也需要花费很多时间来思考如何处理异常，包括需要处理哪些异常，怎样处理等等。这也是绝大多数开发团队都会制定一些规则来规范进行异常处理的原因。而团队之间的这些规范往往是截然不同的。本文给出几个被很多团队使用的异常处理 佳实践。")]),t._v(" "),s("h2",{attrs:{id:"_1-在-finally-块中清理资源或者使用-try-with-resource-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-在-finally-块中清理资源或者使用-try-with-resource-语句"}},[t._v("#")]),t._v(" 1. 在 finally 块中清理资源或者使用 try-with-resource 语句")]),t._v(" "),s("p",[t._v("当使用类似InputStream这种需要使用后关闭的资源时，一个常见的错误就是在 try块的 后关闭资源。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1\tpublic void doNotCloseResourceInTry() {\n2\tFileInputStream inputStream = null;\n3\ttry {\n4\tFile file = new File("./tmp.txt");\n5\tinputStream = new FileInputStream(file);\n6\t// use the inputStream to read a file\n7\t// do NOT do this\n8\tinputStream.close();\n9\t} catch (FileNotFoundException e) {\n10\tlog.error(e);\n11\t} catch (IOException e) {\n12\tlog.error(e);\n13\t}\n14\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("问题就是，只有没有异常抛出的时候，这段代码才可以正常工作。try 代码块内代码会正常执行，并且资源可以正常关闭。但是，使用 try 代码块是有原因的，一般调用一个或多个可能抛出异常的方法，而且，你自己也可能会抛出一个异常，这意味着代码可能不会执行到 try 代码块的  后部分。结果就是，你并没有关闭资源。")]),t._v(" "),s("p",[t._v("所以，你应该把清理工作的代码放到 finally 里去，或者使用 try-with-resource 特性。")]),t._v(" "),s("h3",{attrs:{id:"_1-1-使用-finally-代码块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-使用-finally-代码块"}},[t._v("#")]),t._v(" 1.1 使用 finally 代码块")]),t._v(" "),s("p",[t._v("与前面几行 try 代码块不同，finally 代码块总是会被执行。不管 try 代码块成功")]),t._v(" "),s("p",[t._v("执行之后还是你在 catch 代码块中处理完异常后都会执行。因此，你可以确保你清理了所有打开的资源。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 public void closeResourceInFinally() { \n2  FileInputStream inputStream = null; \n3  try { \n4  File file = new File("./tmp.txt");\n5  inputStream = new FileInputStream(file); \n6  // use the inputStream to read a file\n7  } catch (FileNotFoundException e) {\n8  log.error(e);\n9  } finally {\n10  if (inputStream != null) { \n11  try { \n12  inputStream.close(); \n13  } catch (IOException e) { \n14  log.error(e); \n15  } \n16  } \n17  }\n18 }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("h3",{attrs:{id:"_1-2-java-7-的-try-with-resource-语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java-7-的-try-with-resource-语法"}},[t._v("#")]),t._v(" 1.2 Java 7 的 try-with-resource 语法")]),t._v(" "),s("p",[t._v("如果你的资源实现了 AutoCloseable 接口，你可以使用这个语法。大多数的 Java 标准资源都继承了这个接口。当你在 try 子句中打开资源，资源会在 try 代码块执行后或异常处理后自动关闭。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1\tpublic void automaticallyCloseResource() {\n2\tFile file = new File("./tmp.txt");\n3\ttry (FileInputStream inputStream = new FileInputStream(file);) {\n4\t// use the inputStream to read a file\n5\t} catch (FileNotFoundException e) {\n6\tlog.error(e);\n7 } catch (IOException e) {\n8\tlog.error(e);\n9\t}\n10\t}\n11\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"_2-优先明确的异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-优先明确的异常"}},[t._v("#")]),t._v(" 2. 优先明确的异常")]),t._v(" "),s("p",[t._v("你抛出的异常越明确越好，永远记住，你的同事或者几个月之后的你，将会调用你的方法并且处理异常。")]),t._v(" "),s("p",[t._v("因此需要保证提供给他们尽可能多的信息。这样你的 API 更容易被理解。你的方法的调用者能够更好的处理异常并且避免额外的检查。因此，总是尝试寻找 适合你的异常事件的类，例如，抛出一个")]),t._v(" "),s("p",[t._v("NumberFormatException 来替换一个 IllegalArgumentException 。避免抛出一个不明确的异常。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 public void doNotDoThis() throws Exception {\n2 ...\n3\t}\n4\tpublic void doThis() throws NumberFormatException { \n5 ...\n6 }\n7\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"_3-对异常进行文档说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-对异常进行文档说明"}},[t._v("#")]),t._v(" 3. 对异常进行文档说明")]),t._v(" "),s("p",[t._v("当在方法上声明抛出异常时，也需要进行文档说明。目的是为了给调用者提供尽可能多的信息，从而可以更好地避免或处理异常。")]),t._v(" "),s("p",[t._v("在 Javadoc 添加 @throws 声明，并且描述抛出异常的场景。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1 public void doSomething(String input) throws MyBusinessException { \n2 ...\n3 }\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"_4-使用描述性消息抛出异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用描述性消息抛出异常"}},[t._v("#")]),t._v(" 4. 使用描述性消息抛出异常")]),t._v(" "),s("p",[t._v("在抛出异常时，需要尽可能精确地描述问题和相关信息，这样无论是打印到日志中还是在监控工具中，都能够更容易被人阅读，从而可以更好地定位具体错误信息、错误的严重程度等。")]),t._v(" "),s("p",[t._v("但这里并不是说要对错误信息长篇大论，因为本来 Exception 的类名就能够反映错误的原因，因此只需要用一到两句话描述即可。")]),t._v(" "),s("p",[t._v("如果抛出一个特定的异常，它的类名很可能已经描述了这种错误。所以，你不需要提供很多额外的信息。一个很好的例子是 NumberFormatException 。当你以错误的格式提供 String 时，它将被 java.lang.Long 类的构造函数抛出。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1\ttry {\n2\tnew Long("xyz");\n3 } catch (NumberFormatException e) {\n4\tlog.error(e);\n5\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"_5-优先捕获最具体的异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-优先捕获最具体的异常"}},[t._v("#")]),t._v(" 5. 优先捕获最具体的异常")]),t._v(" "),s("p",[t._v("大多数 IDE 都可以帮助你实现这个  佳实践。当你尝试首先捕获较不具体的异常时，它们会报告无法访问的代码块。")]),t._v(" "),s("p",[t._v("但问题在于，只有匹配异常的第一个 catch 块会被执行。 因此，如果首先捕获")]),t._v(" "),s("p",[t._v("IllegalArgumentException ，则永远不会到达应该处理更具体的 NumberFormatException 的 catch 块，因为它是 IllegalArgumentException 的子类。总是优先捕获  具体的异常类，并将不太具体的 catch 块添加到列表的末尾。你可以在下面的代码片断中看到这样一个 try-catch 语句的例子。 第一个 catch 块处理所有 NumberFormatException 异常，第二个处理所有非")]),t._v(" "),s("p",[t._v("NumberFormatException 异常的IllegalArgumentException 异常。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 public void catchMostSpecificExceptionFirst() { \n2  try {\n3  doSomething("A message");\n4\t} catch (NumberFormatException e) {\n5\tlog.error(e);\n6\t} catch (IllegalArgumentException e) {\n7\tlog.error(e)\n8\t}\n9\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"_6-不要捕获-throwable-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-不要捕获-throwable-类"}},[t._v("#")]),t._v(" 6. 不要捕获 Throwable 类")]),t._v(" "),s("p",[t._v("Throwable 是所有异常和错误的超类。你可以在 catch 子句中使用它，但是你")]),t._v(" "),s("p",[t._v("永远不应该这样做！")]),t._v(" "),s("p",[t._v("如果在 catch 子句中使用 Throwable ，它不仅会捕获所有异常，也将捕获所有的错误。JVM 抛出错误，指出不应该由应用程序处理的严重问题。 典型的例子是 OutOfMemoryError 或者 StackOverflowError 。两者都是由应用程序控制之外的情况引起的，无法处理。")]),t._v(" "),s("p",[t._v("所以， 好不要捕获 Throwable ，除非你确定自己处于一种特殊的情况下能够处理错误。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tpublic void doNotCatchThrowable() {\n2\ttry {\n3\t// do something\n4\t} catch (Throwable t) {\n5 // don't do this!\n6\t}\n7\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"_7-不要忽略异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-不要忽略异常"}},[t._v("#")]),t._v(" 7. 不要忽略异常")]),t._v(" "),s("p",[t._v("很多时候，开发者很有自信不会抛出异常，因此写了一个catch块，但是没有做任何处理或者记录日志。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tpublic void doNotIgnoreExceptions() {\n2\ttry {\n3\t// do something\n4 } catch (NumberFormatException e) {\n5\t// this will never happen\n6\t}\n7\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("但现实是经常会出现无法预料的异常，或者无法确定这里的代码未来是不是会改动(删除了阻止异常抛出的代码)，而此时由于异常被捕获，使得无法拿到足够的错误信息来定位问题。合理的做法是至少要记录异常的信息。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1\tpublic void logAnException() {\n2\ttry {\n3\t// do something\n4 } catch (NumberFormatException e) {\n5\tlog.error("This should never happen: " + e);\n6\t}\n7\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"_8-不要记录并抛出异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-不要记录并抛出异常"}},[t._v("#")]),t._v(" 8. 不要记录并抛出异常")]),t._v(" "),s("p",[t._v("这可能是本文中 常被忽略的  佳实践。可以发现很多代码甚至类库中都会有捕获异常、记录日志并再次抛出的逻辑。如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1\ttry {\n2\tnew Long("xyz");\n3 } catch (NumberFormatException e) {\n4\tlog.error(e);\n5\tthrow e;\n6\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("这个处理逻辑看着是合理的。但这经常会给同一个异常输出多条日志。如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 17:44:28,945 ERROR TestExceptionHandling:65 ‐ java.lang.NumberFormatExcep tion: For input string: "xyz" \n2 Exception in thread "main" java.lang.NumberFormatException: For input str ing: "xyz" \n3 at java.lang.NumberFormatException.forInputString(NumberFormatException.j ava:65)\n4 at java.lang.Long.parseLong(Long.java:589) \n5 at java.lang.Long.(Long.java:965) \n6 at com.stackify.example.TestExceptionHandling.logAndThrowException(TestEx ceptionHandling.java:63) \n7 at com.stackify.example.TestExceptionHandling.main(TestExceptionHandling.java:5\n8)\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("如上所示，后面的日志也没有附加更有用的信息。如果想要提供更加有用的信息，那么可以将异常包装为自定义异常。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(' public void wrapException(String input) throws MyBusinessException {\n3\t// do something\n4\t} catch (NumberFormatException e) {\n5\tthrow new MyBusinessException("A message that describes the error.", e);\n6\t}\n7\t}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("因此，仅仅当想要处理异常时才去捕获，否则只需要在方法签名中声明让调用者去处理。")]),t._v(" "),s("h2",{attrs:{id:"_9-包装异常时不要抛弃原始的异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-包装异常时不要抛弃原始的异常"}},[t._v("#")]),t._v(" 9. 包装异常时不要抛弃原始的异常")]),t._v(" "),s("p",[t._v("捕获标准异常并包装为自定义异常是一个很常见的做法。这样可以添加更为具体的异常信息并能够做针对的异常处理。")]),t._v(" "),s("p",[t._v("在你这样做时，请确保将原始异常设置为原因（注：参考下方代码")]),t._v(" "),s("p",[t._v("NumberFormatException e 中的原始异常 e ）。Exception 类提供了特殊的")]),t._v(" "),s("p",[t._v("构造函数方法，它接受一个 Throwable 作为参数。否则，你将会丢失堆栈跟踪和原始异常的消息，这将会使分析导致异常的异常事件变得困难。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 public void wrapException(String input) throws MyBusinessException {\n2\ttry {\n3\t// do something\n4 } catch (NumberFormatException e) {\n5\tthrow new MyBusinessException("A message that describes the error.", e);\n6\t}\n7\t}\n8\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h2",{attrs:{id:"_10-不要使用异常控制程序的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-不要使用异常控制程序的流程"}},[t._v("#")]),t._v(" 10. 不要使用异常控制程序的流程")]),t._v(" "),s("p",[t._v("不应该使用异常控制应用的执行流程，例如，本应该使用if语句进行条件判断的情况下，你却使用异常处理，这是非常不好的习惯，会严重影响应用的性能。")]),t._v(" "),s("h2",{attrs:{id:"_11-使用标准异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-使用标准异常"}},[t._v("#")]),t._v(" 11. 使用标准异常")]),t._v(" "),s("p",[t._v("如果使用内建的异常可以解决问题，就不要定义自己的异常。Java API 提供了上百种针对不同情况的异常类型，在开发中首先尽可能使用 Java API 提供的异常，如果标准的异常不能满足你的要求，这时候创建自己的定制异常。尽可能得使用标准异常有利于新加入的开发者看懂项目代码。")]),t._v(" "),s("h2",{attrs:{id:"_12-异常会影响性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-异常会影响性能"}},[t._v("#")]),t._v(" 12. 异常会影响性能")]),t._v(" "),s("p",[t._v("异常处理的性能成本非常高，每个 Java 程序员在开发时都应牢记这句话。创建一个异常非常慢，抛出一个异常又会消耗1~5ms，当一个异常在应用的多个层级之间传递时，会拖累整个应用的性能。")]),t._v(" "),s("ul",[s("li",[t._v("仅在异常情况下使用异常；")]),t._v(" "),s("li",[t._v("在可恢复的异常情况下使用异常；尽管使用异常有利于 Java 开发，但是在应用中  好不要捕获太多的调用栈，因为在很多情况下都不需要打印调用栈就知道哪里出错了。因此，异常消息应该提供恰到好处的信息。")])]),t._v(" "),s("h2",{attrs:{id:"_13-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-总结"}},[t._v("#")]),t._v(" 13. 总结")]),t._v(" "),s("p",[t._v("综上所述，当你抛出或捕获异常的时候，有很多不同的情况需要考虑，而且大部分事情都是为了改善代码的可读性或者 API 的可用性。")]),t._v(" "),s("p",[t._v("异常不仅仅是一个错误控制机制，也是一个通信媒介。因此，为了和同事更好的合作，一个团队必须要制定出一个 佳实践和规则，只有这样，团队成员才能理解这些通用概念，同时在工作中使用它。")]),t._v(" "),s("h2",{attrs:{id:"异常处理-阿里巴巴java开发手册"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理-阿里巴巴java开发手册"}},[t._v("#")]),t._v(" 异常处理-阿里巴巴Java开发手册")]),t._v(" "),s("ol",[s("li",[t._v("【强制】Java 类库中定义的可以通过预检查方式规避的")])]),t._v(" "),s("p",[t._v("RuntimeException异常不应该通过catch 的方式来处理，比如：")]),t._v(" "),s("p",[t._v("NullPointerException，IndexOutOfBoundsException等等。 说明：无法通过预检查的异常除外，比如，在解析字符串形式的数字时，可能存在数字格式错误，不得不通过catch NumberFormatException来实现。 正例：if (obj != null) {…} 反例：try { obj.method(); } catch")]),t._v(" "),s("p",[t._v("(NullPointerException e) {…}")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("【强制】异常不要用来做流程控制，条件控制。 说明：异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。")])]),t._v(" "),s("li",[s("p",[t._v("【强制】catch时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，")])])]),t._v(" "),s("p",[t._v("再做对应的异常处理。 说明：对大段代码进行try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利于定位问题，这是一种不负责任的表现。 正例：用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于简单，在程序上作出分门别类的判断，并提示给用户。")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[t._v("【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。 外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。")])]),t._v(" "),s("li",[s("p",[t._v("【强制】有try块放到了事务代码中，catch异常后，如果需要回滚事务，一定要注意手动回滚事务。")])]),t._v(" "),s("li",[s("p",[t._v("【强制】finally块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。 说明：如果JDK7及以上，可以使用try-with-resources方式。")])]),t._v(" "),s("li",[s("p",[t._v("【强制】不要在finally块中使用return。 说明：try块中的return语句执行成功后，并不马上返回，而是继续执行finally块中的语句，如果此处存在return语句，则在此直接返回，无情丢弃掉try块中的返回点。 反例：")])])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tprivate int x = 0;\n2\tpublic int checkReturn() {\n3\ttry {\n4\t// x等于1，此处不返回\n5\treturn ++x;\n6\t} finally {\n7\t// 返回的结果是2\n8\treturn ++x;\n9\t}\n10\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("ol",[s("li",[s("p",[t._v("【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。 说明：如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。")])]),t._v(" "),s("li",[s("p",[t._v("【强制】在调用RPC、二方包、或动态生成类的相关方法时，捕捉异常必须使用Throwable类来进行拦截。 说明：通过反射机制来调用方法，如果找不到方法，抛出NoSuchMethodException。什么情况会抛出")])])]),t._v(" "),s("p",[t._v("NoSuchMethodError呢？二方包在类冲突时，仲裁机制可能导致引入非预期的版本使类的方法签名不匹配，或者在字节码修改框架（比如：")]),t._v(" "),s("p",[t._v("ASM）动态创建或修改类时，修改了相应的方法签名。这些情况，即使代码编译期是正确的，但在代码运行期时，会抛出NoSuchMethodError。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("【推荐】方法的返回值可以为null，不强制返回空集合，或者空对象等，必须添加注释充分说明什么情况下会返回null值。 说明：本手册明确防止NPE是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回null的情况。")])]),t._v(" "),s("li",[s("p",[t._v("【推荐】防止NPE，是程序员的基本修养，注意NPE产生的场景： 1） 返回类型为基本数据类型，return包装数据类型的对象时，自动拆箱有可能产生NPE。 反例：public int f() { return Integer对象}， 如果为null，自动解箱抛NPE。 2） 数据库的查询结果可能为null。 3） 集合里的元素即使isNotEmpty，取出的数据元素也可能为null。 4） 远程调用返回对象时，一律要求进行空指针判断，防止NPE。 5） 对于Session中获取的数据，建议进行NPE检查，避免空指针。 6） 级联调用")])])]),t._v(" "),s("p",[t._v("obj.getA().getB().getC()；一连串调用，易产生NPE。")]),t._v(" "),s("p",[t._v("正例：使用JDK8的Optional类来防止NPE问题。")]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("【推荐】定义时区分unchecked / checked 异常，避免直接抛出new")])]),t._v(" "),s("p",[t._v("RuntimeException()，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：")]),t._v(" "),s("p",[t._v("DAOException / ServiceException等。")]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[s("p",[t._v("【参考】对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装 isSuccess()方法、“错误码”、“错误简短信息”。 说明：关于RPC方法返回方式使用Result方式的理由： 1）使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。 2）如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输的性能损耗也是问题。")])]),t._v(" "),s("li",[s("p",[t._v("【参考】避免出现重复的代码（Don’t Repeat Yourself），即DRY原则。 说明：随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。 正例：一个类中有多个public方法，都需要进行数行相同的参数校验操作，这个时候请抽取： private boolean checkParam(DTO dto) {…}")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);