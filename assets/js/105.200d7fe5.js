(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{462:function(e,r,v){"use strict";v.r(r);var _=v(45),l=Object(_.a)({},(function(){var e=this,r=e.$createElement,v=e._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"zookeeper"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[e._v("#")]),e._v(" zookeeper")]),e._v(" "),v("p",[v("strong",[e._v("概述")]),e._v(": 分布式协调服务, 提供的一些简单的操作(原语集), 但是通过组合这些操作可以实现复杂的功能")]),e._v(" "),v("p",[e._v("基于zk实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。")]),e._v(" "),v("p",[v("strong",[e._v("相关CAP理论, 保证了CP")]),e._v(": 分区容错性和一致性")]),e._v(" "),v("p",[v("strong",[e._v("几个特点")]),e._v(" :")]),e._v(" "),v("ol",[v("li",[e._v("zk是主从的, 拥有leader和follower两种角色, 每个实例都是全量拷贝")]),e._v(" "),v("li",[e._v("leader负责写, follower负责读, 客户端可以访问所有follower, 只不过读请求会被路由到leader执行")]),e._v(" "),v("li",[e._v("既然是主从, 肯定会有主机的单点故障, 导致集群不可用; zk的单点故障快速恢复机制保证集群在200ms内重新选举恢复可用状态")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://zookeeper.apache.org/doc/current/images/zkservice.jpg",alt:"zookeeper服务"}})]),e._v(" "),v("h4",{attrs:{id:"zookeeper数据结构-数据模型-分层命名空间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper数据结构-数据模型-分层命名空间"}},[e._v("#")]),e._v(" zookeeper数据结构/数据模型/分层命名空间")]),e._v(" "),v("ul",[v("li",[e._v("分成的命名空间: znodes")]),e._v(" "),v("li",[e._v("zookeeper 提供的名称空间非常类似于标准文件系统, key-value 的形式存储")]),e._v(" "),v("li",[e._v("key 是由斜线 / 分割的一系列路径元素")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2020/09/zknamespace.jpg",alt:"zookeeper结构"}})]),e._v(" "),v("h4",{attrs:{id:"保证"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#保证"}},[e._v("#")]),e._v(" 保证")]),e._v(" "),v("ul",[v("li",[e._v("顺序一致性 - 来自客户端的更新将按发送顺序应用(单机leader, Zxid实现)")]),e._v(" "),v("li",[e._v("原子性 - 更新要么成功要么失败")]),e._v(" "),v("li",[e._v("单一系统映像 - 无论连接到哪个服务器, 客户端都将看到相同的服务视图")]),e._v(" "),v("li",[e._v("可靠性 - 应用更新后, 它将从那时起一直存在, 直到客户端覆盖更新, 支持持久化")]),e._v(" "),v("li",[e._v("及时性 - 对follower可以使用sync从leader同步数据, 获得最新数据, 保证数据一致性")])]),e._v(" "),v("h4",{attrs:{id:"简单使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简单使用"}},[e._v("#")]),e._v(" 简单使用")]),e._v(" "),v("ul",[v("li",[e._v("只有启动3台, 才能过半投票选举成功")]),e._v(" "),v("li",[e._v("启动时都需要从leader拉取快照")]),e._v(" "),v("li",[e._v("Zxid: zk事务id : 例如0x200000002 : 前面0x2是纪元, 后面是事务序列\n"),v("ul",[v("li",[e._v("cZxid: create创建事务id")]),e._v(" "),v("li",[e._v("mZxid: modify修改事务id")]),e._v(" "),v("li",[e._v("pZxid: 该节点及其子节点最新创建的事务id")]),e._v(" "),v("li",[e._v("事务id的消耗: session建立销毁, zk节点up都会占用Zxid")])])]),e._v(" "),v("li",[e._v("会话级别的临时节点, 并且可以共享视图, 可以应用实现同步功能/锁功能")]),e._v(" "),v("li",[e._v("sessionid以及视图: sessionid可以共享+漂移")]),e._v(" "),v("li",[e._v("sequential统一命名 create -s")]),e._v(" "),v("li",[e._v("通过以上概念可以组合实现锁, 队列事务锁, HA, leader选举")])]),e._v(" "),v("h4",{attrs:{id:"集群知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集群知识"}},[e._v("#")]),e._v(" 集群知识")]),e._v(" "),v("ul",[v("li",[e._v("3个才能开启集群")]),e._v(" "),v("li",[e._v("2888: leader开启服务, 让follower来连接, 并接受follower的write事件")]),e._v(" "),v("li",[e._v("3888: follower开启服务, 其他所有节点都回连接上, 主要用于选主投票")])]),e._v(" "),v("h4",{attrs:{id:"observer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#observer"}},[e._v("#")]),e._v(" Observer")]),e._v(" "),v("p",[e._v("其实一共有三个角色: Observer: 没有选举权限, 只能查询")]),e._v(" "),v("p",[e._v("比如30台机器可以奇数如15台follower, 其他全是Observer")])])}),[],!1,null,null,null);r.default=l.exports}}]);