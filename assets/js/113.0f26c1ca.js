(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{470:function(t,a,s){"use strict";s.r(a);var r=s(45),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring面试题-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring面试题-重点"}},[t._v("#")]),t._v(" Spring面试题(重点)")]),t._v(" "),s("h2",{attrs:{id:"_1-什么是spring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是spring"}},[t._v("#")]),t._v(" 1. 什么是spring?")]),t._v(" "),s("p",[t._v("Spring是"),s("strong",[t._v("一个轻量级Java开发框架")]),t._v("，最早由"),s("strong",[t._v("Rod Johnson")]),t._v("创建，目的是为了解 决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的 JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提 供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应 用程序的开发。 Spring最根本的使命是"),s("strong",[t._v("解决企业级应用开发的复杂性，即简化Java开发。")])]),t._v(" "),s("p",[t._v("Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能 的底层都依赖于它的两个核心特性，也就是"),s("strong",[t._v("依赖注入（dependency  injection，DI）和面向切面编程（aspect-oriented programming， AOP）")]),t._v("。")]),t._v(" "),s("p",[t._v("为了降低Java开发的复杂性，Spring采取了以下4种关键策略")]),t._v(" "),s("ul",[s("li",[t._v("基于POJO的轻量级和最小侵入性编程；")]),t._v(" "),s("li",[t._v("通过依赖注入和面向接口实现松耦合；")]),t._v(" "),s("li",[t._v("基于切面和惯例进行声明式编程；")]),t._v(" "),s("li",[t._v("通过切面和模板减少样板式代码。")])]),t._v(" "),s("h2",{attrs:{id:"_2-spring框架的设计目标-设计理念-和核心是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring框架的设计目标-设计理念-和核心是什么"}},[t._v("#")]),t._v(" 2. Spring框架的设计目标，设计理念，和核心是什么")]),t._v(" "),s("p",[t._v("**Spring设计目标：**Spring为开发者提供一个一站式轻量级应用开发平台；")]),t._v(" "),s("p",[t._v("**Spring设计理念：**在JavaEE开发中，支持POJO和JavaBean开发方式，使应用 面向接口开发，充分支持OO（面向对象）设计方法；Spring通过IoC容器实现 对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给IoC容器， 实现解耦；")]),t._v(" "),s("p",[t._v("**Spring框架的核心：**IoC容器和AOP模块。通过IoC容器管理POJO对象以及他 们之间的耦合关系；通过AOP以动态非侵入的方式增强服务。 IoC让相互协作的组件保持松散的耦合，而AOP编程允许你把遍布于应用各层的 功能分离出来形成可重用的功能组件。")]),t._v(" "),s("h2",{attrs:{id:"_3-spring的优缺点是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring的优缺点是什么"}},[t._v("#")]),t._v(" 3. Spring的优缺点是什么？")]),t._v(" "),s("p",[t._v("**优点 **")]),t._v(" "),s("ul",[s("li",[t._v("方便解耦，简化开发\nSpring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给 Spring管理。")]),t._v(" "),s("li",[t._v("AOP编程的支持\nSpring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等 功能。")]),t._v(" "),s("li",[t._v("声明式事务的支持\n只需要通过配置就可以完成对事务的管理，而无需手动编程。")]),t._v(" "),s("li",[t._v("方便程序的测试\nSpring对Junit4支持，可以通过注解方便的测试Spring程序。")]),t._v(" "),s("li",[t._v("方便集成各种优秀框架\nSpring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持 （如：Struts、Hibernate、MyBatis等）。")]),t._v(" "),s("li",[t._v("降低JavaEE API的使用难度\nSpring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用 等），都提供了封装，使这些API应用难度大大降低。")])]),t._v(" "),s("p",[t._v("**缺点 **")]),t._v(" "),s("ul",[s("li",[t._v("Spring明明一个很轻量级的框架，却给人感觉大而全")]),t._v(" "),s("li",[t._v("Spring依赖反射，反射影响性能")]),t._v(" "),s("li",[t._v("使用门槛升高，入门Spring需要较长时间")])]),t._v(" "),s("h2",{attrs:{id:"_4-spring有哪些应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring有哪些应用场景"}},[t._v("#")]),t._v(" 4. Spring有哪些应用场景")]),t._v(" "),s("p",[t._v("**应用场景：**JavaEE企业应用开发，包括SSH、SSM等")]),t._v(" "),s("p",[s("strong",[t._v("Spring价值：")])]),t._v(" "),s("ul",[s("li",[t._v("Spring是非侵入式的框架，目标是使应用程序代码对框架依赖最小化；")]),t._v(" "),s("li",[t._v("Spring提供一个一致的编程模型，使应用直接使用POJO开发，与运行环境隔离 开来；")]),t._v(" "),s("li",[t._v("Spring推动应用设计风格向面向对象和面向接口开发转变，提高了代码的重用性 和可测试性；")])]),t._v(" "),s("h2",{attrs:{id:"_5-spring由哪些模块组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-spring由哪些模块组成"}},[t._v("#")]),t._v(" 5. Spring由哪些模块组成？")]),t._v(" "),s("p",[t._v("Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被 分别整合在"),s("strong",[t._v("核心容器（Core Container） 、 AOP（Aspect Oriented Programming） 和设备支持（Instrmentation） 、数据访问与集成（Data Access/Integeration） 、  Web、 消息（Messaging） 、 Test")]),t._v("等 6 个模块中。 以下是 Spring 5 的模块结构图：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://spring.io/why-spring",target:"_blank",rel:"noopener noreferrer"}},[t._v("结构图? 自己去官网看"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[t._v("spring core：提供了框架的基本组成部分，包括控制反转（Inversion of  Control，IOC）和依赖注入（Dependency Injection，DI）功能。")]),t._v(" "),s("li",[t._v("spring beans：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管 理对象称为Bean。")]),t._v(" "),s("li",[t._v("spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框 架式的对象访问方法。")]),t._v(" "),s("li",[t._v("spring jdbc：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂 商特有的错误代码解析， 用于简化JDBC。")]),t._v(" "),s("li",[t._v("spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。")]),t._v(" "),s("li",[t._v("spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet  listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。")]),t._v(" "),s("li",[t._v("spring test：主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进 行单元测试和集成测试。")])]),t._v(" "),s("h2",{attrs:{id:"_6-spring-框架中都用到了哪些设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-spring-框架中都用到了哪些设计模式"}},[t._v("#")]),t._v(" 6. Spring 框架中都用到了哪些设计模式？")]),t._v(" "),s("ol",[s("li",[t._v("工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实 例；")]),t._v(" "),s("li",[t._v("单例模式：Bean默认为单例模式。")]),t._v(" "),s("li",[t._v("代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生 成技术；")]),t._v(" "),s("li",[t._v("模板方法：用来解决代码重复的问题。比如. RestTemplate,  JmsTemplate, JpaTemplate。")]),t._v(" "),s("li",[t._v("观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发 生改变时，所有依赖于它的对象都会得到通知被制动更新，如Spring中 listener的实现–ApplicationListener。")])]),t._v(" "),s("h2",{attrs:{id:"_7-详细讲解一下核心容器-spring-context应用上下文-模-块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-详细讲解一下核心容器-spring-context应用上下文-模-块"}},[t._v("#")]),t._v(" 7. 详细讲解一下核心容器（spring context应用上下文) 模 块")]),t._v(" "),s("p",[t._v("这是基本的Spring模块，提供spring 框架的基础功能，BeanFactory 是 任何以 spring为基础的应用的核心。Spring 框架建立在此模块之上，它使Spring成为 一个容器。")]),t._v(" "),s("p",[t._v("Bean 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和 依赖从真正的应用代码中分离。最常用的就是 org.springframework.beans.factory.xml.XmlBeanFactory ，它根据XML文件 中的定义加载beans。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。")]),t._v(" "),s("h2",{attrs:{id:"_8-spring框架中有哪些不同类型的事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-spring框架中有哪些不同类型的事件"}},[t._v("#")]),t._v(" 8. Spring框架中有哪些不同类型的事件")]),t._v(" "),s("p",[t._v("Spring 提供了以下5种标准的事件：")]),t._v(" "),s("ol",[s("li",[t._v("上下文更新事件（ContextRefreshedEvent）：在调用 ConfigurableApplicationContext 接口中的refresh()方法时被触发。")]),t._v(" "),s("li",[t._v("上下文开始事件（ContextStartedEvent）：当容器调用 ConfigurableApplicationContext的Start()方法开始/重新开始容器时触 发该事件。")]),t._v(" "),s("li",[t._v("上下文停止事件（ContextStoppedEvent）：当容器调用 ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。")]),t._v(" "),s("li",[t._v("上下文关闭事件（ContextClosedEvent）：当ApplicationContext被 关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。")]),t._v(" "),s("li",[t._v("请求处理事件（RequestHandledEvent）：在Web应用中，当一个 http请求（request）结束触发该事件。如果一个bean实现了 ApplicationListener接口，当一个ApplicationEvent 被发布以后，bean 会自动被通知。")])]),t._v(" "),s("h2",{attrs:{id:"_9-spring-应用程序有哪些不同组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-spring-应用程序有哪些不同组件"}},[t._v("#")]),t._v(" 9. Spring 应用程序有哪些不同组件？")]),t._v(" "),s("p",[t._v("Spring 应用一般有以下组件：")]),t._v(" "),s("ul",[s("li",[t._v("接口 - 定义功能。")]),t._v(" "),s("li",[t._v("Bean 类 - 它包含属性，setter 和 getter 方法，函数等。")]),t._v(" "),s("li",[t._v("Bean 配置文件 - 包含类的信息以及如何配置它们。")]),t._v(" "),s("li",[t._v("Spring 面向切面编程（AOP） - 提供面向切面编程的功能。")]),t._v(" "),s("li",[t._v("用户程序 - 它使用接口。")])]),t._v(" "),s("h2",{attrs:{id:"_10-使用-spring-有哪些方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-使用-spring-有哪些方式"}},[t._v("#")]),t._v(" 10. 使用 Spring 有哪些方式？")]),t._v(" "),s("p",[t._v("使用 Spring 有以下方式：")]),t._v(" "),s("ul",[s("li",[t._v("作为一个成熟的 Spring Web 应用程序。")]),t._v(" "),s("li",[t._v("作为第三方 Web 框架，使用 Spring Frameworks 中间层。")]),t._v(" "),s("li",[t._v("作为企业级 Java Bean，它可以包装现有的 POJO（Plain Old Java  Objects）。")]),t._v(" "),s("li",[t._v("用于远程使用。")])]),t._v(" "),s("h1",{attrs:{id:"spring控制反转-ioc-13"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring控制反转-ioc-13"}},[t._v("#")]),t._v(" Spring控制反转(IOC)（13）")]),t._v(" "),s("h2",{attrs:{id:"什么是spring-ioc-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring-ioc-容器"}},[t._v("#")]),t._v(" 什么是Spring IOC 容器？")]),t._v(" "),s("p",[t._v("控制反转即IoC (Inversion of Control)，它把传统上由程序代码直接操控的对")]),t._v(" "),s("p",[t._v("象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反")]),t._v(" "),s("p",[t._v("转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。")]),t._v(" "),s("p",[t._v("Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。")]),t._v(" "),s("h2",{attrs:{id:"控制反转-ioc-有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#控制反转-ioc-有什么作用"}},[t._v("#")]),t._v(" 控制反转(IoC)有什么作用")]),t._v(" "),s("ul",[s("li",[t._v("管理对象的创建和依赖关系的维护。对象的创建并不是一件简单的事，在对象关系比较复杂时，如果依赖关系需要程序猿来维护的话，那是相当头疼的")]),t._v(" "),s("li",[t._v("解耦，由容器去维护具体的对象")]),t._v(" "),s("li",[t._v("托管了类的产生过程，比如我们需要在类的产生过程中做一些处理，最直接的例子就是代理，如果有容器程序可以把这部分处理交给容器，应用程序则无需去关心类是如何完成代理的")])]),t._v(" "),s("h2",{attrs:{id:"ioc的优点是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc的优点是什么"}},[t._v("#")]),t._v(" IOC的优点是什么？")]),t._v(" "),s("ul",[s("li",[t._v("IOC 或 依赖注入把应用的代码量降到最低。")]),t._v(" "),s("li",[t._v("它使应用容易测试，单元测试不再需要单例和JNDI查找机制。")]),t._v(" "),s("li",[t._v("最小的代价和最小的侵入性使松散耦合得以实现。")]),t._v(" "),s("li",[t._v("IOC容器支持加载服务时的饿汉式初始化和懒加载。")])]),t._v(" "),s("h2",{attrs:{id:"spring-ioc-的实现机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-的实现机制"}},[t._v("#")]),t._v(" Spring IoC 的实现机制")]),t._v(" "),s("p",[t._v("Spring 中的 IoC 的实现原理就是工厂模式加反射机制。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('1 interface Fruit {\n2 public abstract void eat();\n3 }\n4\n5 class Apple implements Fruit {\n6 public void eat(){\n7 System.out.println("Apple");\n8 }\n9 }\n10\n11 class Orange implements Fruit {\n12 public void eat(){\n13 System.out.println("Orange");\n14 }\n15 }\n16\n17 class Factory {\n18 public static Fruit getInstance(String ClassName) {\n19 Fruit f=null;\n20 try {\n21 f=(Fruit)Class.forName(ClassName).newInstance();\n22 } catch (Exception e) {\n23 e.printStackTrace();\n24 }\n25 return f;\n26 }\n27 }\n28\n29 class Client {\n30 public static void main(String[] a) {\n31 Fruit f=Factory.getInstance("io.github.dunwu.spring.Apple");\n32 if(f!=null){\n33 f.eat();\n34 }\n35 }\n36 }\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br")])]),s("h2",{attrs:{id:"spring-的-ioc支持哪些功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-的-ioc支持哪些功能"}},[t._v("#")]),t._v(" Spring 的 IoC支持哪些功能")]),t._v(" "),s("p",[t._v("Spring 的 IoC 设计支持以下功能：依赖注入依赖检查自动装配支持集合指定初始化方法和销毁方法")]),t._v(" "),s("p",[t._v("支持回调某些方法（但是需要实现 Spring 接口，略有侵入）")]),t._v(" "),s("p",[t._v("其中，最重要的就是依赖注入，从 XML 的配置上说，即 ref 标签。对应 Spring")]),t._v(" "),s("p",[t._v("RuntimeBeanReference 对象。")]),t._v(" "),s("p",[t._v("对于 IoC 来说，最重要的就是容器。容器管理着 Bean 的生命周期，控制着 Bean 的依赖注入。")]),t._v(" "),s("h2",{attrs:{id:"beanfactory-和-applicationcontext有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#beanfactory-和-applicationcontext有什么区别"}},[t._v("#")]),t._v(" BeanFactory 和 ApplicationContext有什么区别？")]),t._v(" "),s("p",[t._v("BeanFactory和ApplicationContext是Spring的两大核心接口，都可以当做 Spring的容器。其中ApplicationContext是BeanFactory的子接口。")]),t._v(" "),s("p",[t._v("依赖关系")]),t._v(" "),s("p",[t._v("BeanFactory：是Spring里面最底层的接口，包含了各种Bean的定义，读取 bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean 之间的依赖关系。")]),t._v(" "),s("p",[t._v("ApplicationContext接口作为BeanFactory的派生，除了提供BeanFactory所具")]),t._v(" "),s("p",[t._v("有的功能外，还提供了更完整的框架功能：")]),t._v(" "),s("ul",[s("li",[t._v("继承MessageSource，因此支持国际化。统一的资源文件访问方式。")]),t._v(" "),s("li",[t._v("提供在监听器中注册bean的事件。")]),t._v(" "),s("li",[t._v("同时加载多个配置文件。")]),t._v(" "),s("li",[t._v("载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。")])]),t._v(" "),s("p",[t._v("加载方式")]),t._v(" "),s("p",[t._v("BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean 时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常。")]),t._v(" "),s("p",[t._v("ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所")]),t._v(" "),s("p",[t._v("依赖属性是否注入。 ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。")]),t._v(" "),s("p",[t._v("相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。")]),t._v(" "),s("p",[t._v("创建方式")]),t._v(" "),s("p",[t._v("BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。")]),t._v(" "),s("p",[t._v("注册方式")]),t._v(" "),s("p",[t._v("BeanFactory和ApplicationContext都支持BeanPostProcessor、")]),t._v(" "),s("p",[t._v("BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。")]),t._v(" "),s("h2",{attrs:{id:"spring-如何设计容器的-beanfactory和-applicationcontext的关系详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-如何设计容器的-beanfactory和-applicationcontext的关系详解"}},[t._v("#")]),t._v(" Spring 如何设计容器的，BeanFactory和 ApplicationContext的关系详解")]),t._v(" "),s("p",[t._v("Spring 作者 Rod Johnson 设计了两个接口用以表示容器。")]),t._v(" "),s("ul",[s("li",[t._v("BeanFactory")]),t._v(" "),s("li",[t._v("ApplicationContext")])]),t._v(" "),s("p",[t._v("BeanFactory 简单粗暴，可以理解为就是个 HashMap，Key 是 BeanName，")]),t._v(" "),s("p",[t._v("Value 是 Bean 实例。通常只提供注册（put），获取（get）这两个功能。我们可以称之为 “低级容器”。")]),t._v(" "),s("p",[t._v("ApplicationContext 可以称之为 “高级容器”。因为他比 BeanFactory 多了更多的功能。他继承了多个接口。因此具备了更多的功能。例如资源的获取，支持多种消息（例如 JSP tag 的支持），对 BeanFactory 多了工具级别的支持等待。所以你看他的名字，已经不是 BeanFactory 之类的工厂了，而是 “应用上下文”， 代表着整个大容器的所有功能。该接口定义了一个 refresh 方法，此方法是所有阅读 Spring 源码的人的最熟悉的方法，用于刷新整个容器，即重新加载/刷新所有的 bean。")]),t._v(" "),s("p",[t._v("当然，除了这两个大接口，还有其他的辅助接口，这里就不介绍他们了。")]),t._v(" "),s("p",[t._v("BeanFactory和ApplicationContext的关系")]),t._v(" "),s("p",[t._v("为了更直观的展示 “低级容器” 和 “高级容器” 的关系，这里通过常用的")]),t._v(" "),s("p",[t._v("ClassPathXmlApplicationContext 类来展示整个容器的层级 UML 关系。")]),t._v(" "),s("p",[s("svg",{attrs:{id:"SvgjsSvg2882",width:"835.7300720214844",height:"521",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[s("defs",{attrs:{id:"SvgjsDefs2883"}},[s("marker",{attrs:{id:"SvgjsMarker2971",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2972",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2975",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2976",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2979",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2980",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2983",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2984",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2987",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2988",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2991",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2992",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2995",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2996",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2999",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3000",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3003",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3004",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3007",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3008",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3017",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3018",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3025",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3026",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3041",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3042",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3055",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3056",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})])]),s("rect",{attrs:{id:"SvgjsRect2884",width:"835.7300720214844",height:"521",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2885",transform:"translate(298.4659118652344,110.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2886",d:"M 0 4Q 0 0 4 0L 252 0Q 256 0 256 4L 256 382Q 256 386 252 386L 4 386Q 0 386 0 382Z","stroke-dasharray":"3,4",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2887"}},[s("text",{attrs:{id:"SvgjsText2888","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"236px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"183.55",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG2889",transform:"translate(25.005645751953125,62.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2890",d:"M 0 4Q 0 0 4 0L 221.46026611328125 0Q 225.46026611328125 0 225.46026611328125 4L 225.46026611328125 368Q 225.46026611328125 372 221.46026611328125 372L 4 372Q 0 372 0 368Z","stroke-dasharray":"3,4",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2891"}},[s("text",{attrs:{id:"SvgjsText2892","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"206px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"-1.95",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2893",dy:"16",x:"113"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2894"}},[t._v("低级容器")])])])])]),s("g",{attrs:{id:"SvgjsG2895",transform:"translate(367.73577880859375,25.011367797851562)"}},[s("path",{attrs:{id:"SvgjsPath2896",d:"M 0 0L 106 0L 106 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2897"}},[s("text",{attrs:{id:"SvgjsText2898","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"86px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2899",dy:"16",x:"53"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2900"}},[t._v("BeanFactory")])])])])]),s("g",{attrs:{id:"SvgjsG2901",transform:"translate(34.37071228027344,121.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2902",d:"M 0 0L 206.73013305664062 0L 206.73013305664062 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2903"}},[s("text",{attrs:{id:"SvgjsText2904","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"187px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"2.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2905",dy:"16",x:"103.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2906"}},[t._v("HierarchicalBeanFactory")])]),s("tspan",{attrs:{id:"SvgjsTspan2907",dy:"16",x:"103.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2908"}},[t._v("隔离容器")])])])])]),s("g",{attrs:{id:"SvgjsG2909",transform:"translate(342.73577880859375,121.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2910",d:"M 0 0L 157 0L 157 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2911"}},[s("text",{attrs:{id:"SvgjsText2912","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"137px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2913",dy:"16",x:"78.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2914"}},[t._v("ListableBeanFactory")])])])])]),s("g",{attrs:{id:"SvgjsG2915",transform:"translate(524.4659118652344,25.011367797851562)"}},[s("path",{attrs:{id:"SvgjsPath2916",d:"M 0 0L 131 0L 131 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2917"}},[s("text",{attrs:{id:"SvgjsText2918","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"111px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"2.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2919",dy:"16",x:"65.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2920"}},[t._v("MessageSource")])]),s("tspan",{attrs:{id:"SvgjsTspan2921",dy:"16",x:"65.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2922"}},[t._v("工具接口")])])])])]),s("g",{attrs:{id:"SvgjsG2923",transform:"translate(342.73577880859375,200.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2924",d:"M 0 0L 157 0L 157 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2925"}},[s("text",{attrs:{id:"SvgjsText2926","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"137px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2927",dy:"16",x:"78.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2928"}},[t._v("ApplicationContext")])])])])]),s("g",{attrs:{id:"SvgjsG2929",transform:"translate(321.73577880859375,279.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2930",d:"M 0 0L 198 0L 198 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2931"}},[s("text",{attrs:{id:"SvgjsText2932","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"178px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"2.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2933",dy:"16",x:"99"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2934"}},[t._v("AbstractApplicationContext")])]),s("tspan",{attrs:{id:"SvgjsTspan2935",dy:"16",x:"99"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2936"}},[t._v("抽象基类")])])])])]),s("g",{attrs:{id:"SvgjsG2937",transform:"translate(311.73577880859375,358.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2938",d:"M 0 0L 218 0L 218 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2939"}},[s("text",{attrs:{id:"SvgjsText2940","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"198px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2941",dy:"16",x:"109"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2942"}},[t._v("AbstractXmlApplicationContext")])])])])]),s("g",{attrs:{id:"SvgjsG2943",transform:"translate(307.73577880859375,434.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2944",d:"M 0 0L 226 0L 226 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2945"}},[s("text",{attrs:{id:"SvgjsText2946","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"206px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2947",dy:"16",x:"113"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2948"}},[t._v("ClassPathXmlApplicationContext")])])])])]),s("g",{attrs:{id:"SvgjsG2949",transform:"translate(50.73577880859375,213.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2950",d:"M 0 0L 174 0L 174 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2951"}},[s("text",{attrs:{id:"SvgjsText2952","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"154px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2953",dy:"16",x:"87"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2954"}},[t._v("AbstractBeanFactory")])])])])]),s("g",{attrs:{id:"SvgjsG2955",transform:"translate(50.73577880859375,287.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2956",d:"M 0 0L 174 0L 174 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2957"}},[s("text",{attrs:{id:"SvgjsText2958","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"154px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"2.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2959",dy:"16",x:"87"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2960"}},[t._v("DefaultListableBeanFact")])]),s("tspan",{attrs:{id:"SvgjsTspan2961",dy:"16",x:"87"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2962"}},[t._v("ory")])])])])]),s("g",{attrs:{id:"SvgjsG2963",transform:"translate(50.73577880859375,361.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath2964",d:"M 0 0L 174 0L 174 40L 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2965"}},[s("text",{attrs:{id:"SvgjsText2966","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"154px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2967",dy:"16",x:"87"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2968"}},[t._v("XmlBeanFactory")])])])])]),s("g",{attrs:{id:"SvgjsG2969"}},[s("path",{attrs:{id:"SvgjsPath2970",d:"M468.4659118652344 121.01136779785156L468.4659118652344 93.01136779785156L589.9659118652344 93.01136779785156L589.9659118652344 65.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2971)"}})]),s("g",{attrs:{id:"SvgjsG2973"}},[s("path",{attrs:{id:"SvgjsPath2974",d:"M421.23577880859375 121.01136779785156L421.23577880859375 93.01136779785156L420.73577880859375 93.01136779785156L420.73577880859375 65.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2975)"}})]),s("g",{attrs:{id:"SvgjsG2977"}},[s("path",{attrs:{id:"SvgjsPath2978",d:"M137.73577880859375 121.01136779785156L137.73577880859375 93.01136779785156L420.73577880859375 93.01136779785156L420.73577880859375 65.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2979)"}})]),s("g",{attrs:{id:"SvgjsG2981"}},[s("path",{attrs:{id:"SvgjsPath2982",d:"M137.73577880859375 213.01136779785156L137.73577880859375 187.01136779785156L137.73577880859375 187.01136779785156L137.73577880859375 161.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2983)"}})]),s("g",{attrs:{id:"SvgjsG2985"}},[s("path",{attrs:{id:"SvgjsPath2986",d:"M137.73577880859375 287.01136779785156L137.73577880859375 270.01136779785156L137.73577880859375 270.01136779785156L137.73577880859375 253.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2987)"}})]),s("g",{attrs:{id:"SvgjsG2989"}},[s("path",{attrs:{id:"SvgjsPath2990",d:"M137.73577880859375 361.01136779785156L137.73577880859375 344.01136779785156L137.73577880859375 344.01136779785156L137.73577880859375 327.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2991)"}})]),s("g",{attrs:{id:"SvgjsG2993"}},[s("path",{attrs:{id:"SvgjsPath2994",d:"M421.23577880859375 200.01136779785156L421.23577880859375 180.51136779785156L421.23577880859375 180.51136779785156L421.23577880859375 161.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2995)"}})]),s("g",{attrs:{id:"SvgjsG2997"}},[s("path",{attrs:{id:"SvgjsPath2998",d:"M420.73577880859375 279.01136779785156L420.73577880859375 259.51136779785156L421.23577880859375 259.51136779785156L421.23577880859375 240.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2999)"}})]),s("g",{attrs:{id:"SvgjsG3001"}},[s("path",{attrs:{id:"SvgjsPath3002",d:"M420.73577880859375 358.01136779785156L420.73577880859375 338.51136779785156L420.73577880859375 338.51136779785156L420.73577880859375 319.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3003)"}})]),s("g",{attrs:{id:"SvgjsG3005"}},[s("path",{attrs:{id:"SvgjsPath3006",d:"M420.73577880859375 434.01136779785156L420.73577880859375 416.01136779785156L420.73577880859375 416.01136779785156L420.73577880859375 398.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3007)"}})]),s("g",{attrs:{id:"SvgjsG3009",transform:"translate(459.73577880859375,161.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath3010",d:"M 0 0L 120 0L 120 40L 0 40Z",stroke:"none",fill:"none"}}),s("g",{attrs:{id:"SvgjsG3011"}},[s("text",{attrs:{id:"SvgjsText3012","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"120px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3013",dy:"16",x:"60"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3014"}},[t._v("高级容器")])])])])]),s("g",{attrs:{id:"SvgjsG3015"}},[s("path",{attrs:{id:"SvgjsPath3016",d:"M321.73577880859375 299.01136779785156C 292.82506475857866 299.01136779785156 278.37662591524946 298.01136779785156 249.46591186523438 298.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3017)"}}),s("rect",{attrs:{id:"SvgjsRect3019",width:"26",height:"15",x:"272.60084533691406",y:"291.01136779785156",fill:"#ffffff"}}),s("text",{attrs:{id:"SvgjsText3020","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"26px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"289.0613677978516",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3021",dy:"16",x:"285.60084533691406"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3022"}},[t._v("依赖")])])])]),s("g",{attrs:{id:"SvgjsG3023"}},[s("path",{attrs:{id:"SvgjsPath3024",d:"M519.7357788085938 299.01136779785156C 543.7357788085938 299.01136779785156 555.7357788085938 299.01136779785156 579.7357788085938 299.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3025)"}})]),s("g",{attrs:{id:"SvgjsG3027",transform:"translate(579.7357788085938,264.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath3028",d:"M 0 4Q 0 0 4 0L 190.73013305664062 0Q 194.73013305664062 0 194.73013305664062 4L 194.73013305664062 66Q 194.73013305664062 70 190.73013305664062 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG3029"}},[s("text",{attrs:{id:"SvgjsText3030","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"175px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"2.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3031",dy:"16",x:"97.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3032"}},[t._v("重要方法")])]),s("tspan",{attrs:{id:"SvgjsTspan3033",dy:"16",x:"97.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3034"}},[t._v("getBean")])]),s("tspan",{attrs:{id:"SvgjsTspan3035",dy:"16",x:"97.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3036"}},[t._v("final refresh")])]),s("tspan",{attrs:{id:"SvgjsTspan3037",dy:"16",x:"97.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3038"}},[t._v("abstract refreshBeanFactory")])])])])]),s("g",{attrs:{id:"SvgjsG3039"}},[s("path",{attrs:{id:"SvgjsPath3040",d:"M529.7357788085938 378.01136779785156C 549.7357788085938 378.01136779785156 559.7357788085938 378.01136779785156 579.7357788085938 378.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3041)"}})]),s("g",{attrs:{id:"SvgjsG3043",transform:"translate(579.7357788085938,349.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath3044",d:"M 0 4Q 0 0 4 0L 227.73013305664062 0Q 231.73013305664062 0 231.73013305664062 4L 231.73013305664062 54Q 231.73013305664062 58 227.73013305664062 58L 4 58Q 0 58 0 54Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG3045"}},[s("text",{attrs:{id:"SvgjsText3046","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"212px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"4.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3047",dy:"16",x:"116"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3048"}},[t._v("重要属性")])]),s("tspan",{attrs:{id:"SvgjsTspan3049",dy:"16",x:"116"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3050"}},[t._v("XmlBeanFactory xmlBeanFactory")])]),s("tspan",{attrs:{id:"SvgjsTspan3051",dy:"16",x:"116"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3052"}},[t._v("服务于 getBeanFactory()")])])])])]),s("g",{attrs:{id:"SvgjsG3053"}},[s("path",{attrs:{id:"SvgjsPath3054",d:"M533.7357788085938 454.01136779785156C 552.1357788085937 454.01136779785156 561.4057963637056 455.6150334644085 579.7357788085938 454.01136779785156",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3055)"}})]),s("g",{attrs:{id:"SvgjsG3057",transform:"translate(579.7357788085938,419.01136779785156)"}},[s("path",{attrs:{id:"SvgjsPath3058",d:"M 0 35C 0 -11.666666666666666 70 -11.666666666666666 70 35C 70 81.66666666666667 0 81.66666666666667 0 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG3059"}},[s("text",{attrs:{id:"SvgjsText3060","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"50px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3061",dy:"16",x:"35"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3062"}},[t._v("调用")])])])])])])]),t._v(" "),s("p",[t._v("有点复杂？ 先不要慌，我来解释一下。")]),t._v(" "),s("p",[t._v("最上面的是 BeanFactory，下面的 3 个绿色的，都是功能扩展接口，这里就不展开讲。")]),t._v(" "),s("p",[t._v("看下面的隶属 ApplicationContext 粉红色的 “高级容器”，依赖着 “低级容器”，这里说的是依赖，不是继承哦。他依赖着 “低级容器” 的 getBean 功")]),t._v(" "),s("p",[t._v("能。而高级容器有更多的功能：支持不同的信息源头，可以访问文件资源，支持应用事件（Observer 模式）。")]),t._v(" "),s("p",[t._v("通常用户看到的就是 “高级容器”。 但 BeanFactory 也非常够用啦！左边灰色区域的是 “低级容器”， 只负载加载 Bean，获取 Bean。容器其他的高级功能是没有的。例如上图画的 refresh 刷新 Bean 工厂所有配置，生命周期事件回调等。")]),t._v(" "),s("p",[t._v("小结")]),t._v(" "),s("p",[t._v("说了这么多，不知道你有没有理解Spring IoC？ 这里小结一下：IoC 在 Spring 里，只需要低级容器就可以实现，2 个步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("加载配置文件，解析成 BeanDefinition 放在 Map 里。")])]),t._v(" "),s("li",[s("p",[t._v("调用 getBean 的时候，从 BeanDefinition 所属的 Map 里，拿出")])])]),t._v(" "),s("p",[t._v("Class 对象进行实例化，同时，如果有依赖关系，将递归调用 getBean 方法 —— 完成依赖注入。")]),t._v(" "),s("p",[t._v("上面就是 Spring 低级容器（BeanFactory）的 IoC。")]),t._v(" "),s("p",[t._v("至于高级容器 ApplicationContext，他包含了低级容器的功能，当他执行 refresh 模板方法的时候，将刷新整个容器的 Bean。同时其作为高级容器，包含了太多的功能。一句话，他不仅仅是 IoC。他支持不同信息源头，支持")]),t._v(" "),s("p",[t._v("BeanFactory 工具类，支持层级容器，支持访问文件资源，支持事件发布通知，支持接口回调等等。")]),t._v(" "),s("h2",{attrs:{id:"applicationcontext通常的实现是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#applicationcontext通常的实现是什么"}},[t._v("#")]),t._v(" ApplicationContext通常的实现是什么？")]),t._v(" "),s("p",[t._v("FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans 的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。")]),t._v(" "),s("p",[t._v("ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans 的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找 bean配置。")]),t._v(" "),s("p",[t._v("WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。")]),t._v(" "),s("h3",{attrs:{id:"什么是spring的依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring的依赖注入"}},[t._v("#")]),t._v(" 什么是Spring的依赖注入？")]),t._v(" "),s("p",[t._v("控制反转IoC是一个很大的概念，可以用不同的方式来实现。其主要实现方式有两种：依赖注入和依赖查找依赖注入：相对于IoC而言，依赖注入(DI)更加准确地描述了IoC的设计理念。所谓依赖注入（Dependency Injection），即组件之间的依赖关系由容器在应用系统运行期来决定，也就是由容器动态地将某种依赖关系的目标对象实例注入到应用系统中的各个关联的组件之中。组件不做定位查询，只提供普通的Java方法让容器去决定依赖关系。")]),t._v(" "),s("h2",{attrs:{id:"依赖注入的基本原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入的基本原则"}},[t._v("#")]),t._v(" 依赖注入的基本原则")]),t._v(" "),s("p",[t._v("依赖注入的基本原则是：应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由IoC容器负责，“查找资源”的逻辑应该从应用组件的代码中抽取出来，交给IoC容器负责。容器全权负责组件的装配，它会把符合依赖关系的对象通过属性（JavaBean中的setter）或者是构造器传递给需要的对象。")]),t._v(" "),s("h2",{attrs:{id:"依赖注入有什么优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入有什么优势"}},[t._v("#")]),t._v(" 依赖注入有什么优势")]),t._v(" "),s("p",[t._v("依赖注入之所以更流行是因为它是一种更可取的方式：让容器全权负责依赖查询，受管组件只需要暴露JavaBean的setter方法或者带参数的构造器或者接")]),t._v(" "),s("p",[t._v("口，使容器可以在初始化时组装对象的依赖关系。其与依赖查找方式相比，主要优势为：")]),t._v(" "),s("ul",[s("li",[t._v("查找定位操作与应用代码完全无关。")]),t._v(" "),s("li",[t._v("不依赖于容器的API，可以很容易地在任何容器以外使用应用对象。")]),t._v(" "),s("li",[t._v("不需要特殊的接口，绝大多数对象可以做到完全不必依赖容器。")])]),t._v(" "),s("h2",{attrs:{id:"有哪些不同类型的依赖注入实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有哪些不同类型的依赖注入实现方式"}},[t._v("#")]),t._v(" 有哪些不同类型的依赖注入实现方式？")]),t._v(" "),s("p",[t._v("依赖注入是时下最流行的IoC实现方式，依赖注入分为接口注入（Interface Injection），Setter方法注入（Setter Injection）和构造器注入（Constructor")]),t._v(" "),s("p",[t._v("Injection）三种方式。其中接口注入由于在灵活性和易用性比较差，现在从Spring4开始已被废弃。")]),t._v(" "),s("p",[t._v("构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。")]),t._v(" "),s("p",[t._v("Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。")]),t._v(" "),s("h2",{attrs:{id:"构造器依赖注入和-setter方法注入的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造器依赖注入和-setter方法注入的区别"}},[t._v("#")]),t._v(" 构造器依赖注入和 Setter方法注入的区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("构造函数注入")]),t._v(" "),s("th",[t._v("setter注 入")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("没有部分注入")]),t._v(" "),s("td",[t._v("有部分注入")])]),t._v(" "),s("tr",[s("td",[t._v("不会覆盖 setter 属 性")]),t._v(" "),s("td",[t._v("会覆盖 setter 属 性")])]),t._v(" "),s("tr",[s("td",[t._v("任意修改都会创建一个新实例")]),t._v(" "),s("td",[t._v("任意修改不会创建一个新实例")])]),t._v(" "),s("tr",[s("td",[t._v("适用于设置很多属性")]),t._v(" "),s("td",[t._v("适用于设置少量属性")])])])]),t._v(" "),s("p",[t._v("两种依赖方式都可以使用，构造器注入和Setter方法注入。最好的解决方案是用构造器参数实现强制依赖，setter方法实现可选依赖。")]),t._v(" "),s("h2",{attrs:{id:"spring-beans-19-什么是spring-beans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-beans-19-什么是spring-beans"}},[t._v("#")]),t._v(" Spring Beans（19）什么是Spring beans？")]),t._v(" "),s("p",[t._v("Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中 的形式定义。")]),t._v(" "),s("h2",{attrs:{id:"一个-spring-bean-定义-包含什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个-spring-bean-定义-包含什么"}},[t._v("#")]),t._v(" 一个 Spring Bean 定义 包含什么？")]),t._v(" "),s("p",[t._v("一个Spring Bean 的定义包含容器必知的所有配置元数据，包括bean，它的生命周期详情及它的依赖。")]),t._v(" "),s("h3",{attrs:{id:"如何创建一个如何给spring-容器提供配置元数据-spring有几种配置方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何创建一个如何给spring-容器提供配置元数据-spring有几种配置方式"}},[t._v("#")]),t._v(" 如何创建一个如何给Spring 容器提供配置元数据？Spring有几种配置方式")]),t._v(" "),s("p",[t._v("这里有三种重要的方法给Spring 容器提供配置元数据。")]),t._v(" "),s("ul",[s("li",[t._v("XML配置文件。")]),t._v(" "),s("li",[t._v("基于注解的配置。")]),t._v(" "),s("li",[t._v("基于java的配置。")])]),t._v(" "),s("h3",{attrs:{id:"spring配置文件包含了哪些信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring配置文件包含了哪些信息"}},[t._v("#")]),t._v(" Spring配置文件包含了哪些信息")]),t._v(" "),s("p",[t._v("Spring配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。")]),t._v(" "),s("h2",{attrs:{id:"spring基于xml注入bean的几种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring基于xml注入bean的几种方式"}},[t._v("#")]),t._v(" Spring基于xml注入bean的几种方式")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Set方法注入；")])]),t._v(" "),s("li",[s("p",[t._v("构造器注入：①通过index设置参数的位置；②通过type设置参数类型；")])]),t._v(" "),s("li",[s("p",[t._v("静态工厂注入；")])]),t._v(" "),s("li",[s("p",[t._v("实例工厂；")])])]),t._v(" "),s("h2",{attrs:{id:"你怎样定义类的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你怎样定义类的作用域"}},[t._v("#")]),t._v(" 你怎样定义类的作用域？")]),t._v(" "),s("p",[t._v("当定义一个 在Spring里，我们还能给这个bean声明一个作用域。它可以通过 bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean 每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。")]),t._v(" "),s("h2",{attrs:{id:"解释spring支持的几种bean的作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释spring支持的几种bean的作用域"}},[t._v("#")]),t._v(" 解释Spring支持的几种bean的作用域")]),t._v(" "),s("p",[t._v("Spring框架支持以下五种bean的作用域：")]),t._v(" "),s("ul",[s("li",[t._v("singleton : bean在每个Spring ioc 容器中只有一个实例。")]),t._v(" "),s("li",[t._v("prototype：一个bean的定义可以有多个实例。")]),t._v(" "),s("li",[t._v("request：每次http请求都会创建一个bean，该作用域仅在基于web的SpringApplicationContext情形下有效。")]),t._v(" "),s("li",[t._v("session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。")]),t._v(" "),s("li",[t._v("global-session：在一个全局的HTTP Session中，一个bean定义对应一个")])]),t._v(" "),s("p",[t._v("实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。")]),t._v(" "),s("p",[t._v("注意： 缺省的Spring bean 的作用域是Singleton。使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean 会带来很大的性能开销。")]),t._v(" "),s("h3",{attrs:{id:"spring框架中的单例bean是线程安全的吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring框架中的单例bean是线程安全的吗"}},[t._v("#")]),t._v(" Spring框架中的单例bean是线程安全的吗？")]),t._v(" "),s("p",[t._v("不是，Spring框架中的单例bean不是线程安全的。")]),t._v(" "),s("p",[t._v("spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。")]),t._v(" "),s("p",[t._v("实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，")]),t._v(" "),s("p",[t._v("把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean() 了，所以就可以保证线程安全了。")]),t._v(" "),s("ul",[s("li",[t._v("有状态就是有数据存储功能。")]),t._v(" "),s("li",[t._v("无状态就是不会保存数据。")])]),t._v(" "),s("h2",{attrs:{id:"spring如何处理线程并发问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring如何处理线程并发问题"}},[t._v("#")]),t._v(" Spring如何处理线程并发问题？")]),t._v(" "),s("p",[t._v("在一般情况下，只有无状态的Bean才可以在多线程环境下共享，在Spring中，绝大部分Bean都可以声明为singleton作用域，因为Spring对一些Bean中非线程安全状态采用ThreadLocal进行处理，解决线程安全问题。")]),t._v(" "),s("p",[t._v("ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。同步机制采用了“时间换空间”的方式，仅提供一份变量，不同的线程在访问前")]),t._v(" "),s("p",[t._v("需要获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了“空间换时间”的方式。")]),t._v(" "),s("p",[t._v("ThreadLocal会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。解释Spring框架中bean的生命周期")]),t._v(" "),s("p",[t._v("在传统的Java应用中，bean的生命周期很简单。使用Java关键字new进行bean 实例化，然后该bean就可以使用了。一旦该bean不再被使用，则由Java自动进行垃圾回收。相比之下，Spring容器中的bean的生命周期就显得相对复杂多了。正确理解Spring bean的生命周期非常重要，因为你或许要利用Spring提供的扩展点来自定义bean的创建过程。下图展示了bean装载到Spring应用上下文中的一个典型的生命周期过程。")]),t._v(" "),s("p",[s("svg",{attrs:{id:"SvgjsSvg2729",width:"980.2102355957031",height:"419.0056610107422",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[s("defs",{attrs:{id:"SvgjsDefs2730"}},[s("marker",{attrs:{id:"SvgjsMarker2845",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2846",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2856",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2857",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker2880",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath2881",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})])]),s("rect",{attrs:{id:"SvgjsRect2731",width:"980.2102355957031",height:"419.0056610107422",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2732",transform:"translate(25.002853393554688,25.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2733",d:"M 0 0L 125 0L 150 35L 125 70L 0 70L 0 0Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2734"}},[s("text",{attrs:{id:"SvgjsText2735","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"130px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2736",dy:"16",x:"75"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2737"}},[t._v("实例化")])])])])]),s("g",{attrs:{id:"SvgjsG2738",transform:"translate(176.4346742630005,25.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2739",d:"M 25 35L 0 0L 125 0L 150 35L 125 70L 0 70L 25 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2740"}},[s("text",{attrs:{id:"SvgjsText2741","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"100px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2742",dy:"16",x:"75"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2743"}},[t._v("填充属性")])])])])]),s("g",{attrs:{id:"SvgjsG2744",transform:"translate(327.8664951324463,25.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2745",d:"M 28.5 35L 0 0L 142.5 0L 171 35L 142.5 70L 0 70L 28.5 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2746"}},[s("text",{attrs:{id:"SvgjsText2747","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"114px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2748",dy:"16",x:"85.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2749"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2750",dy:"16",x:"85.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2751"}},[t._v("BeanNameAware")])]),s("tspan",{attrs:{id:"SvgjsTspan2752",dy:"16",x:"85.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2753"}},[t._v("setBeanName()")])])])])]),s("g",{attrs:{id:"SvgjsG2754",transform:"translate(500.2983160018921,25.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2755",d:"M 29.712119420369465 35L 0 0L 148.56059710184732 0L 178.2727165222168 35L 148.56059710184732 70L 0 70L 29.712119420369465 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2756"}},[s("text",{attrs:{id:"SvgjsText2757","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"119px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2758",dy:"16",x:"89.21211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2759"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2760",dy:"16",x:"89.21211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2761"}},[t._v("BeanFactoryAware")])]),s("tspan",{attrs:{id:"SvgjsTspan2762",dy:"16",x:"89.21211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2763"}},[t._v("setBeanFactory()")])])])])]),s("g",{attrs:{id:"SvgjsG2764",transform:"translate(680.0028533935547,25.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2765",d:"M 35 35L 0 0L 210.81816864013672 0L 245.81816864013672 35L 210.81816864013672 70L 0 70L 35 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2766"}},[s("text",{attrs:{id:"SvgjsText2767","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"176px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2768",dy:"16",x:"123"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2769"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2770",dy:"16",x:"123"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2771"}},[t._v("ApplicationContextAware")])]),s("tspan",{attrs:{id:"SvgjsTspan2772",dy:"16",x:"123"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2773"}},[t._v("setApplicationContext()")])])])])]),s("g",{attrs:{id:"SvgjsG2774",transform:"translate(138.0028533935547,137.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2775",d:"M 30.212119420369465 35L 0 0L 151.06059710184732 0L 181.2727165222168 35L 151.06059710184732 70L 0 70L 30.212119420369465 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2776"}},[s("text",{attrs:{id:"SvgjsText2777","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"121px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2778",dy:"16",x:"90.71211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2779"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2780",dy:"16",x:"90.71211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2781"}},[t._v("BeanPostProcessor")])]),s("tspan",{attrs:{id:"SvgjsTspan2782",dy:"16",x:"90.71211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2783"}},[t._v("的预初始化方法")])])])])]),s("g",{attrs:{id:"SvgjsG2784",transform:"translate(328.9422365824381,137.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2785",d:"M 30.287880579630535 35L 0 0L 151.43940289815268 0L 181.7272834777832 35L 151.43940289815268 70L 0 70L 30.287880579630535 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2786"}},[s("text",{attrs:{id:"SvgjsText2787","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"122px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2788",dy:"16",x:"91.28788057963054"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2789"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2790",dy:"16",x:"91.28788057963054"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2791"}},[t._v("InitializingBean")])]),s("tspan",{attrs:{id:"SvgjsTspan2792",dy:"16",x:"91.28788057963054"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2793"}},[t._v("afterPropertiesSet()")])])])])]),s("g",{attrs:{id:"SvgjsG2794",transform:"translate(520.336186726888,137.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2795",d:"M 25 35L 0 0L 125 0L 150 35L 125 70L 0 70L 25 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2796"}},[s("text",{attrs:{id:"SvgjsText2797","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"100px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2798",dy:"16",x:"75"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2799"}},[t._v("调用自定义的初")])]),s("tspan",{attrs:{id:"SvgjsTspan2800",dy:"16",x:"75"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2801"}},[t._v("始化方法")])])])])]),s("g",{attrs:{id:"SvgjsG2802",transform:"translate(680.0028533935546,137.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2803",d:"M 29.712119420369465 35L 0 0L 148.56059710184732 0L 178.2727165222168 35L 148.56059710184732 70L 0 70L 29.712119420369465 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2804"}},[s("text",{attrs:{id:"SvgjsText2805","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"119px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2806",dy:"16",x:"89.21211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2807"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2808",dy:"16",x:"89.21211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2809"}},[t._v("BeanPostProcessor")])]),s("tspan",{attrs:{id:"SvgjsTspan2810",dy:"16",x:"89.21211942036946"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2811"}},[t._v("的初始化后方法")])])])])]),s("g",{attrs:{id:"SvgjsG2812",transform:"translate(647.0028533935547,324.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2813",d:"M 25 35L 0 0L 125 0L 150 35L 125 70L 0 70L 25 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2814"}},[s("text",{attrs:{id:"SvgjsText2815","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"100px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2816",dy:"16",x:"75"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2817"}},[t._v("调用自定义的销")])]),s("tspan",{attrs:{id:"SvgjsTspan2818",dy:"16",x:"75"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2819"}},[t._v("毁方法")])])])])]),s("g",{attrs:{id:"SvgjsG2820",transform:"translate(467.0028533935547,324.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2821",d:"M 29.136361440022785 35L 0 0L 145.68180720011392 0L 174.81816864013672 35L 145.68180720011392 70L 0 70L 29.136361440022785 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2822"}},[s("text",{attrs:{id:"SvgjsText2823","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"117px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"10.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2824",dy:"16",x:"87.63636144002278"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2825"}},[t._v("调用")])]),s("tspan",{attrs:{id:"SvgjsTspan2826",dy:"16",x:"87.63636144002278"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2827"}},[t._v("DisposableBean")])]),s("tspan",{attrs:{id:"SvgjsTspan2828",dy:"16",x:"87.63636144002278"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2829"}},[t._v("destroy()")])])])])]),s("g",{attrs:{id:"SvgjsG2830",transform:"translate(827.0028533935547,324.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2831",d:"M 0 35C 0 -11.666666666666666 70 -11.666666666666666 70 35C 70 81.66666666666667 0 81.66666666666667 0 35Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG2832"}},[s("text",{attrs:{id:"SvgjsText2833","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"50px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2834",dy:"16",x:"35"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2835"}},[t._v("die")])])])])]),s("g",{attrs:{id:"SvgjsG2836",transform:"translate(246.389235496521,248.82954025268555)"}},[s("path",{attrs:{id:"SvgjsPath2837",d:"M 0 0L 122.9090805053711 0L 0 0M 0 34L 122.9090805053711 34L 0 34Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("path",{attrs:{id:"SvgjsPath2838",d:"M 0 0L 122.9090805053711 0L 122.9090805053711 34L 0 34L 0 0Z",stroke:"none",fill:"none"}}),s("g",{attrs:{id:"SvgjsG2839"}},[s("text",{attrs:{id:"SvgjsText2840","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"103px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"7.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2841",dy:"16",x:"61.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2842"}},[t._v("bean可以使用了")])])])])]),s("g",{attrs:{id:"SvgjsG2843"}},[s("path",{attrs:{id:"SvgjsPath2844",d:"M858.2755699157714 172.01136016845703L888.2755699157714 172.01136016845703L888.2755699157714 227.9204502105713L307.84377574920654 227.9204502105713L307.84377574920654 248.82954025268555",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2845)"}})]),s("g",{attrs:{id:"SvgjsG2847",transform:"translate(246.389235496521,307.01136016845703)"}},[s("path",{attrs:{id:"SvgjsPath2848",d:"M 0 0L 122.9090805053711 0L 0 0M 0 34L 122.9090805053711 34L 0 34Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),s("path",{attrs:{id:"SvgjsPath2849",d:"M 0 0L 122.9090805053711 0L 122.9090805053711 34L 0 34L 0 0Z",stroke:"none",fill:"none"}}),s("g",{attrs:{id:"SvgjsG2850"}},[s("text",{attrs:{id:"SvgjsText2851","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"103px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"7.55",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan2852",dy:"16",x:"61.5"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan2853"}},[t._v("容器关闭")])])])])]),s("g",{attrs:{id:"SvgjsG2854"}},[s("path",{attrs:{id:"SvgjsPath2855",d:"M307.84377574920654 341.01136016845703L307.84377574920654 359.01136016845703L496.1392148335775 359.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2856)"}})]),s("g",{attrs:{id:"SvgjsG2858"}},[s("path",{attrs:{id:"SvgjsPath2859",d:"M307.84377574920654 282.82954025268555L307.84377574920654 294.9204502105713L307.84377574920654 294.9204502105713L307.84377574920654 307.01136016845703","stroke-dasharray":"3,3",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2860"}},[s("path",{attrs:{id:"SvgjsPath2861",d:"M175.0028533935547 60.01136016845703L188.2187638282776 60.01136016845703L188.2187638282776 60.01136016845703L201.4346742630005 60.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2862"}},[s("path",{attrs:{id:"SvgjsPath2863",d:"M326.4346742630005 60.01136016845703L341.4005846977234 60.01136016845703L341.4005846977234 60.01136016845703L356.3664951324463 60.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2864"}},[s("path",{attrs:{id:"SvgjsPath2865",d:"M498.8664951324463 60.01136016845703L514.438465277354 60.01136016845703L514.438465277354 60.01136016845703L530.0104354222616 60.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2866"}},[s("path",{attrs:{id:"SvgjsPath2867",d:"M678.5710325241089 60.01136016845703L696.7869429588318 60.01136016845703L696.7869429588318 60.01136016845703L715.0028533935547 60.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2868"}},[s("path",{attrs:{id:"SvgjsPath2869",d:"M925.8210220336914 60.01136016845703L955.8210220336914 60.01136016845703L955.8210220336914 116.01136016845703L98.21497281392416 116.01136016845703L98.21497281392416 172.01136016845703L168.21497281392416 172.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2870"}},[s("path",{attrs:{id:"SvgjsPath2871",d:"M319.2755699157715 172.01136016845703L339.25284353892005 172.01136016845703L339.25284353892005 172.01136016845703L359.23011716206867 172.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2872"}},[s("path",{attrs:{id:"SvgjsPath2873",d:"M510.6695200602213 172.01136016845703L528.0028533935547 172.01136016845703L528.0028533935547 172.01136016845703L545.336186726888 172.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2874"}},[s("path",{attrs:{id:"SvgjsPath2875",d:"M670.336186726888 172.01136016845703L690.025579770406 172.01136016845703L690.025579770406 172.01136016845703L709.7149728139241 172.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2876"}},[s("path",{attrs:{id:"SvgjsPath2877",d:"M641.8210220336914 359.01136016845703L656.911937713623 359.01136016845703L656.911937713623 359.01136016845703L672.0028533935547 359.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none"}})]),s("g",{attrs:{id:"SvgjsG2878"}},[s("path",{attrs:{id:"SvgjsPath2879",d:"M797.0028533935547 359.01136016845703L812.0028533935547 359.01136016845703L812.0028533935547 359.01136016845703L827.0028533935547 359.01136016845703",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker2880)"}})])])]),t._v(" "),s("p",[t._v("bean在Spring容器中从创建到销毁经历了若干阶段，每一阶段都可以针对 Spring如何管理bean进行个性化定制。")]),t._v(" "),s("p",[t._v("正如你所见，在bean准备就绪之前，bean工厂执行了若干启动步骤。")]),t._v(" "),s("p",[t._v("我们对上图进行详细描述：")]),t._v(" "),s("p",[t._v("Spring对bean进行实例化；")]),t._v(" "),s("p",[t._v("Spring将值和bean的引用注入到bean对应的属性中；")]),t._v(" "),s("p",[t._v("如果bean实现了BeanNameAware接口，Spring将bean的ID传递给setBeanName()方法；")]),t._v(" "),s("p",[t._v("如果bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()方")]),t._v(" "),s("p",[t._v("法，将BeanFactory容器实例传入；")]),t._v(" "),s("p",[t._v("如果bean实现了ApplicationContextAware接口，Spring将调用 setApplicationContext()方法，将bean所在的应用上下文的引用传入进来；")]),t._v(" "),s("p",[t._v("如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-")]),t._v(" "),s("p",[t._v("ProcessBeforeInitialization()方法；")]),t._v(" "),s("p",[t._v("如果bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()方法。类似地，如果bean使用initmethod声明了初始化方法，")]),t._v(" "),s("p",[t._v("该方法也会被调用；")]),t._v(" "),s("p",[t._v("如果bean实现了BeanPostProcessor接口，Spring将调用它们的post-")]),t._v(" "),s("p",[t._v("ProcessAfterInitialization()方法；此时，bean已经准备就绪，可以被应用程序使用了，它们将一直驻留在应用上下文中，直到该应用上下文被销毁；")]),t._v(" "),s("p",[t._v("如果bean实现了DisposableBean接口，Spring将调用它的destroy()接口方")]),t._v(" "),s("p",[t._v("法。同样，如果bean使用destroy-method声明了销毁方法，该方法也会被调用。")]),t._v(" "),s("p",[t._v("现在你已经了解了如何创建和加载一个Spring容器。但是一个空的容器并没有太大的价值，在你把东西放进去之前，它里面什么都没有。为了从Spring的")]),t._v(" "),s("p",[t._v("DI(依赖注入)中受益，我们必须将应用对象装配进Spring容器中。")]),t._v(" "),s("h2",{attrs:{id:"哪些是重要的bean生命周期方法-你能重载它们吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哪些是重要的bean生命周期方法-你能重载它们吗"}},[t._v("#")]),t._v(" 哪些是重要的bean生命周期方法？ 你能重载它们吗？")]),t._v(" "),s("p",[t._v("有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的")]),t._v(" "),s("p",[t._v("时候被调用。第二个方法是 teardown 它是在容器卸载类的时候被调用。")]),t._v(" "),s("p",[t._v("bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。")]),t._v(" "),s("h2",{attrs:{id:"什么是spring的内部bean-什么是spring-inner-beans"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是spring的内部bean-什么是spring-inner-beans"}},[t._v("#")]),t._v(" 什么是Spring的内部bean？什么是Spring inner beans？")]),t._v(" "),s("p",[t._v("在Spring框架中，当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean。内部bean可以用setter注入“属性”和构造方法注入“构造参数”的方式来实现，内部bean通常是匿名的，它们的Scope一般是prototype。")]),t._v(" "),s("h2",{attrs:{id:"在-spring中如何注入一个java集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-spring中如何注入一个java集合"}},[t._v("#")]),t._v(" 在 Spring中如何注入一个java集合？")]),t._v(" "),s("p",[t._v("Spring提供以下几种集合的配置元素：类型用于注入一列值，允许有相同的值。")]),t._v(" "),s("p",[t._v("类型用于注入一组值，不允许有相同的值。")]),t._v(" "),s("p",[t._v("类型用于注入一组键值对，键和值都只能为String类型。")]),t._v(" "),s("h2",{attrs:{id:"什么是bean装配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是bean装配"}},[t._v("#")]),t._v(" 什么是bean装配？")]),t._v(" "),s("p",[t._v("装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。")]),t._v(" "),s("h2",{attrs:{id:"什么是bean的自动装配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是bean的自动装配"}},[t._v("#")]),t._v(" 什么是bean的自动装配？")]),t._v(" "),s("p",[t._v("在Spring框架中，在配置文件中设定bean的依赖关系是一个很好的机制，")]),t._v(" "),s("p",[t._v("Spring 容器能够自动装配相互合作的bean，这意味着容器不需要和配置，能通")]),t._v(" "),s("p",[t._v("过Bean工厂自动处理bean之间的协作。这意味着 Spring可以通过向Bean")]),t._v(" "),s("p",[t._v("Factory中注入的方式自动搞定bean之间的依赖关系。自动装配可以设置在每个bean上，也可以设定在特定的bean上。")]),t._v(" "),s("h3",{attrs:{id:"解释不同方式的自动装配-spring-自动装配-bean-有哪些方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释不同方式的自动装配-spring-自动装配-bean-有哪些方式"}},[t._v("#")]),t._v(" 解释不同方式的自动装配，spring 自动装配 bean 有哪些方式？")]),t._v(" "),s("p",[t._v("在spring中，对象无需自己查找或创建与其关联的其他对象，由容器负责把需要相互协作的对象引用赋予各个对象，使用autowire来配置自动装载模式。")]),t._v(" "),s("p",[t._v("在Spring框架xml配置中共有5种自动装配：")]),t._v(" "),s("ul",[s("li",[t._v("no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。")]),t._v(" "),s("li",[t._v("byName：通过bean的名称进行自动装配，如果一个bean的 property 与另一bean 的name 相同，就进行自动装配。")]),t._v(" "),s("li",[t._v("byType：通过参数的数据类型进行自动装配。")]),t._v(" "),s("li",[t._v("constructor：利用构造函数进行装配，并且构造函数的参数通过 byType进行装配。")]),t._v(" "),s("li",[t._v("autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用 byType的方式自动装配。")])]),t._v(" "),s("h2",{attrs:{id:"使用-autowired注解自动装配的过程是怎样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-autowired注解自动装配的过程是怎样的"}},[t._v("#")]),t._v(" 使用@Autowired注解自动装配的过程是怎样的？")]),t._v(" "),s("p",[t._v("使用@Autowired注解来自动装配指定的bean。在使用@Autowired注解之前需要在Spring配置文件进行配置，。")]),t._v(" "),s("p",[t._v("在启动spring IoC时，容器自动装载了一个")]),t._v(" "),s("p",[t._v("AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的 bean，并装配给该对象的属性。在使用@Autowired时，首先在容器中查询对应类型的bean：")]),t._v(" "),s("ul",[s("li",[t._v("如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据；")]),t._v(" "),s("li",[t._v("如果查询的结果不止一个，那么@Autowired会根据名称来查找；")]),t._v(" "),s("li",[t._v("如果上述查找的结果为空，那么会抛出异常。解决方法时，使用required=false。")])]),t._v(" "),s("h2",{attrs:{id:"自动装配有哪些局限性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动装配有哪些局限性"}},[t._v("#")]),t._v(" 自动装配有哪些局限性？")]),t._v(" "),s("p",[t._v("自动装配的局限性是：重写：你仍需用 和 配置来定义依赖，意味着总要重写自动装配。")]),t._v(" "),s("p",[t._v("基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。")]),t._v(" "),s("p",[t._v("模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。")]),t._v(" "),s("h3",{attrs:{id:"你可以在spring中注入一个null-和一个空字符串吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你可以在spring中注入一个null-和一个空字符串吗"}},[t._v("#")]),t._v(" 你可以在Spring中注入一个null 和一个空字符串吗？")]),t._v(" "),s("p",[t._v("可以")]),t._v(" "),s("h1",{attrs:{id:"spring注解-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring注解-8"}},[t._v("#")]),t._v(" Spring注解（8）")]),t._v(" "),s("h2",{attrs:{id:"什么是基于java的spring注解配置-给一些注解的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是基于java的spring注解配置-给一些注解的例子"}},[t._v("#")]),t._v(" 什么是基于Java的Spring注解配置? 给一些注解的例子")]),t._v(" "),s("p",[t._v("基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring 配置而非通过XML文件。")]),t._v(" "),s("p",[t._v("以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被")]),t._v(" "),s("p",[t._v("Spring IOC容器使用。")]),t._v(" "),s("p",[t._v("另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\t@Configuration\n2\tpublic class StudentConfig {\n3\t@Bean\n4\tpublic StudentBean myStudent() {\n5\treturn new StudentBean();\n6\t}\n7\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"怎样开启注解装配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎样开启注解装配"}},[t._v("#")]),t._v(" 怎样开启注解装配？")]),t._v(" "),s("p",[t._v("注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在Spring配置文件中配置 元素。")]),t._v(" "),s("h2",{attrs:{id:"component-controller-repository-service-有何区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component-controller-repository-service-有何区别"}},[t._v("#")]),t._v(" @Component, @Controller, @Repository, @Service 有何区别？")]),t._v(" "),s("p",[t._v("@Component：这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。")]),t._v(" "),s("p",[t._v("@Controller：这将一个类标记为 Spring Web MVC 控制器。标有它的 Bean 会自动导入到 IoC 容器中。")]),t._v(" "),s("p",[t._v("@Service：此注解是组件注解的特化。它不会对 @Component 注解提供任何其他行为。您可以在服务层类中使用 @Service 而不是 @Component，因为它以更好的方式指定了意图。")]),t._v(" "),s("p",[t._v("@Repository：这个注解是具有类似用途和功能的 @Component 注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。")]),t._v(" "),s("h2",{attrs:{id:"required-注解有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#required-注解有什么作用"}},[t._v("#")]),t._v(" @Required 注解有什么作用")]),t._v(" "),s("p",[t._v("这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出")]),t._v(" "),s("p",[t._v("BeanInitializationException。示例：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tpublic class Employee {\n2\tprivate String name;\n3\t@Required\n4\tpublic void setName(String name){\n5\tthis.name=name;\n6\t}\n7\tpublic string getName(){\n8\treturn name;\n9\t}\n10\t}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("h2",{attrs:{id:"autowired-注解有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autowired-注解有什么作用"}},[t._v("#")]),t._v(" @Autowired 注解有什么作用")]),t._v(" "),s("p",[t._v("@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰 setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1\tpublic class Employee {\n2\tprivate String name;\n3\t@Autowired\n4\tpublic void setName(String name) {\n5\tthis.name=name;\n6\t}\n7\tpublic string getName(){\n8\treturn name;\n9\t}\n10\t}\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("h2",{attrs:{id:"autowired和-resource之间的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#autowired和-resource之间的区别"}},[t._v("#")]),t._v(" @Autowired和@Resource之间的区别")]),t._v(" "),s("p",[t._v("@Autowired可用于：构造函数、成员变量、Setter方法")]),t._v(" "),s("p",[t._v("@Autowired和@Resource之间的区别")]),t._v(" "),s("p",[t._v("@Autowired默认是按照类型装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。")]),t._v(" "),s("p",[t._v("@Resource默认是按照名称来装配注入的，只有当找不到与名称匹配的bean才会按照类型来装配注入。")]),t._v(" "),s("h3",{attrs:{id:"qualifier-注解有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qualifier-注解有什么作用"}},[t._v("#")]),t._v(" @Qualifier 注解有什么作用")]),t._v(" "),s("p",[t._v("当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用@Qualifier 注解和 @Autowired 通过指定应该装配哪个确切的 bean 来消除歧义。")]),t._v(" "),s("h2",{attrs:{id:"requestmapping-注解有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-注解有什么用"}},[t._v("#")]),t._v(" @RequestMapping 注解有什么用？")]),t._v(" "),s("p",[t._v("@RequestMapping 注解用于将特定 HTTP 请求方法映射到将处理相应请求的控制器中的特定类/方法。此注释可应用于两个级别：")]),t._v(" "),s("ul",[s("li",[t._v("类级别：映射请求的 URL")]),t._v(" "),s("li",[t._v("方法级别：映射 URL 以及 HTTP 请求方法")])]),t._v(" "),s("h1",{attrs:{id:"spring数据访问-14"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring数据访问-14"}},[t._v("#")]),t._v(" Spring数据访问（14）")]),t._v(" "),s("h2",{attrs:{id:"解释对象-关系映射集成模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释对象-关系映射集成模块"}},[t._v("#")]),t._v(" 解释对象/关系映射集成模块")]),t._v(" "),s("p",[t._v("Spring 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象/关系映射映射(ORM)工具，Spring 支持集成主流的ORM框架，如Hiberate，JDO和 iBATIS，JPA，TopLink，JDO，OJB 。Spring的事务管理同样支持以上所有ORM框架及JDBC。")]),t._v(" "),s("h2",{attrs:{id:"在spring框架中如何更有效地使用jdbc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在spring框架中如何更有效地使用jdbc"}},[t._v("#")]),t._v(" 在Spring框架中如何更有效地使用JDBC？")]),t._v(" "),s("p",[t._v("使用Spring JDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者")]),t._v(" "),s("p",[t._v("只需写statements 和 queries从数据存取数据，JDBC也可以在Spring框架提供的模板类的帮助下更有效地被使用，这个模板叫JdbcTemplate")]),t._v(" "),s("h3",{attrs:{id:"解释jdbc抽象和dao模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释jdbc抽象和dao模块"}},[t._v("#")]),t._v(" 解释JDBC抽象和DAO模块")]),t._v(" "),s("p",[t._v("通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用Spring的AOP 模块给Spring应用中的对象提供事务管理服务。")]),t._v(" "),s("h2",{attrs:{id:"spring-dao-有什么用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-dao-有什么用"}},[t._v("#")]),t._v(" spring DAO 有什么用？")]),t._v(" "),s("p",[t._v("Spring DAO（数据访问对象） 使得 JDBC，Hibernate 或 JDO 这样的数据访")]),t._v(" "),s("p",[t._v("问技术更容易以一种统一的方式工作。这使得用户容易在持久性技术之间切换。")]),t._v(" "),s("p",[t._v("它还允许您在编写代码时，无需考虑捕获每种技术不同的异常。")]),t._v(" "),s("h2",{attrs:{id:"spring-jdbc-api-中存在哪些类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdbc-api-中存在哪些类"}},[t._v("#")]),t._v(" spring JDBC API 中存在哪些类？")]),t._v(" "),s("p",[t._v("JdbcTemplate")]),t._v(" "),s("p",[t._v("SimpleJdbcTemplate")]),t._v(" "),s("p",[t._v("NamedParameterJdbcTemplate")]),t._v(" "),s("p",[t._v("SimpleJdbcInsert")]),t._v(" "),s("p",[t._v("SimpleJdbcCall")]),t._v(" "),s("h2",{attrs:{id:"jdbctemplate是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdbctemplate是什么"}},[t._v("#")]),t._v(" JdbcTemplate是什么")]),t._v(" "),s("p",[t._v("JdbcTemplate 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。")]),t._v(" "),s("h2",{attrs:{id:"使用spring通过什么方式访问hibernate-使用-spring-访问-hibernate-的方法有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用spring通过什么方式访问hibernate-使用-spring-访问-hibernate-的方法有哪些"}},[t._v("#")]),t._v(" 使用Spring通过什么方式访问Hibernate？使用 Spring 访问 Hibernate 的方法有哪些？")]),t._v(" "),s("p",[t._v("在Spring中有两种方式访问Hibernate：")]),t._v(" "),s("ul",[s("li",[t._v("使用 Hibernate 模板和回调进行控制反转")]),t._v(" "),s("li",[t._v("ernateDAOSupport 并应用 AOP 拦截器节点")])]),t._v(" "),s("h2",{attrs:{id:"如何通扩展-hib过hibernatedaosupport将spring和hibernate-结合起来"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何通扩展-hib过hibernatedaosupport将spring和hibernate-结合起来"}},[t._v("#")]),t._v(" 如何通扩展 Hib过HibernateDaoSupport将Spring和Hibernate 结合起来？")]),t._v(" "),s("p",[t._v("用Spring的 SessionFactory 调用 LocalSessionFactory。集成过程分三步：")]),t._v(" "),s("ul",[s("li",[t._v("配置the Hibernate SessionFactory")]),t._v(" "),s("li",[t._v("继承HibernateDaoSupport实现一个DAO")]),t._v(" "),s("li",[t._v("在AOP支持的事务中装配")])]),t._v(" "),s("h2",{attrs:{id:"spring支持的事务管理类型-spring-事务实现方式有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring支持的事务管理类型-spring-事务实现方式有哪些"}},[t._v("#")]),t._v(" Spring支持的事务管理类型， spring 事务实现方式有哪些？")]),t._v(" "),s("p",[t._v("Spring支持两种类型的事务管理：编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。")]),t._v(" "),s("p",[t._v("声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。")]),t._v(" "),s("h2",{attrs:{id:"spring事务的实现方式和实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring事务的实现方式和实现原理"}},[t._v("#")]),t._v(" Spring事务的实现方式和实现原理")]),t._v(" "),s("p",[t._v("Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，")]),t._v(" "),s("p",[t._v("spring是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过 binlog或者redo log实现的。")]),t._v(" "),s("h2",{attrs:{id:"说一下spring的事务传播行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下spring的事务传播行为"}},[t._v("#")]),t._v(" 说一下Spring的事务传播行为")]),t._v(" "),s("p",[t._v("spring事务的传播行为说的是，当多个事务同时存在的时候，spring如何处理这些事务的行为。")]),t._v(" "),s("p",[t._v("① PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。")]),t._v(" "),s("p",[t._v("② PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。")]),t._v(" "),s("p",[t._v("③ PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。")]),t._v(" "),s("p",[t._v("④ PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。")]),t._v(" "),s("p",[t._v("⑤ PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。")]),t._v(" "),s("p",[t._v("⑥ PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。")]),t._v(" "),s("p",[t._v("⑦ PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按REQUIRED属性执行。")]),t._v(" "),s("h2",{attrs:{id:"说一下-spring-的事务隔离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下-spring-的事务隔离"}},[t._v("#")]),t._v(" 说一下 spring 的事务隔离？")]),t._v(" "),s("p",[t._v("spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致：")]),t._v(" "),s("p",[t._v("\\1.    ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；")]),t._v(" "),s("p",[t._v("\\2.    ISOLATION_READ_UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）； 3. ISOLATION_READ_COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别；")]),t._v(" "),s("p",[t._v("\\4.    ISOLATION_REPEATABLE_READ：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别；")]),t._v(" "),s("p",[t._v("\\5.    ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。")]),t._v(" "),s("p",[t._v("脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。")]),t._v(" "),s("p",[t._v("不可重复读 ：是指在一个事务内，多次读同一数据。")]),t._v(" "),s("p",[t._v("幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。")]),t._v(" "),s("h2",{attrs:{id:"spring框架的事务管理有哪些优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring框架的事务管理有哪些优点"}},[t._v("#")]),t._v(" Spring框架的事务管理有哪些优点？")]),t._v(" "),s("ul",[s("li",[t._v("为不同的事务API 如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。")]),t._v(" "),s("li",[t._v("为编程式事务管理提供了一套简单的API而不是一些复杂的事务API 支持声明式事务管理。")]),t._v(" "),s("li",[t._v("和Spring各种数据访问抽象层很好得集成。")])]),t._v(" "),s("h2",{attrs:{id:"你更倾向用那种事务管理类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你更倾向用那种事务管理类型"}},[t._v("#")]),t._v(" 你更倾向用那种事务管理类型？")]),t._v(" "),s("p",[t._v("大多数Spring框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。唯一不足地方是，最细粒度只能作用到方法级别，无法做到像编程式事务那样可以作用到代码块级别。")]),t._v(" "),s("h1",{attrs:{id:"spring面向切面编程-aop-13-什么是aop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring面向切面编程-aop-13-什么是aop"}},[t._v("#")]),t._v(" Spring面向切面编程(AOP)（13）什么是AOP")]),t._v(" "),s("p",[t._v("OOP(Object-Oriented Programming)面向对象编程，允许开发者定义纵向的关系，但并适用于定义横向的关系，导致了大量代码的重复，而不利于各个模块的重用。")]),t._v(" "),s("p",[t._v("AOP(Aspect-Oriented Programming)，一般称为面向切面编程，作为面向对象的一种补充，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。可用于权限认证、日志、事务处理等。")]),t._v(" "),s("h2",{attrs:{id:"spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-and-aspectj-aop-有什么区别-aop-有哪些实现方式"}},[t._v("#")]),t._v(" Spring AOP and AspectJ AOP 有什么区别？AOP 有哪些实现方式？")]),t._v(" "),s("p",[t._v("AOP实现的关键在于 代理模式，AOP代理主要分为静态代理和动态代理。静态代理的代表为AspectJ；动态代理则以Spring AOP为代表。")]),t._v(" "),s("p",[t._v("（1）  AspectJ是静态代理的增强，所谓静态代理，就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强，他会在编译阶段将AspectJ(切面)织入到Java字节码中，运行的时候就是增强之后的AOP对象。")]),t._v(" "),s("p",[t._v("（2）  Spring AOP使用的动态代理，所谓的动态代理就是说AOP框架不会去修改字节码，而是每次运行时在内存中临时为方法生成一个AOP对象，这个AOP")]),t._v(" "),s("p",[t._v("对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并回调原对象的方法。")]),t._v(" "),s("h2",{attrs:{id:"jdk动态代理和cglib动态代理的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理和cglib动态代理的区别"}},[t._v("#")]),t._v(" JDK动态代理和CGLIB动态代理的区别")]),t._v(" "),s("p",[t._v("Spring AOP中的动态代理主要有两种方式，JDK动态代理和CGLIB动态代理：")]),t._v(" "),s("ul",[s("li",[t._v("JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例, 生成目标类的代理对象。")]),t._v(" "),s("li",[t._v("如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。")])]),t._v(" "),s("p",[t._v("静态代理与动态代理区别在于生成AOP代理对象的时机不同，相对来说AspectJ 的静态代理方式具有更好的性能，但是AspectJ需要特定的编译器进行处理，而")]),t._v(" "),s("p",[t._v("Spring AOP则无需特定的编译器处理。")]),t._v(" "),s("h3",{attrs:{id:"invocationhandler-的-invoke-object-proxy-method-method-object-args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invocationhandler-的-invoke-object-proxy-method-method-object-args"}},[t._v("#")]),t._v(" InvocationHandler 的 invoke(Object proxy,Method method,Object[] args)：")]),t._v(" "),s("p",[t._v("proxy是最终生成的代理实例; method 是被代理目标实例的某个具体方法; args 是被代理目标实例某个方法的具体入参, 在方法反射调用时使用。")]),t._v(" "),s("h2",{attrs:{id:"如何理解-spring-中的代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-spring-中的代理"}},[t._v("#")]),t._v(" 如何理解 Spring 中的代理？")]),t._v(" "),s("p",[t._v("将 Advice 应用于目标对象后创建的对象称为代理。在客户端对象的情况下，目标对象和代理对象是相同的。")]),t._v(" "),s("p",[t._v("Advice + Target Object = Proxy")]),t._v(" "),s("h2",{attrs:{id:"解释一下spring-aop里面的几个名词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释一下spring-aop里面的几个名词"}},[t._v("#")]),t._v(" 解释一下Spring AOP里面的几个名词")]),t._v(" "),s("p",[t._v("（1）  切面（Aspect）：切面是通知和切点的结合。通知和切点共同定义了切面的全部内容。 在Spring AOP中，切面可以使用通用类（基于模式的风格） 或者在普通类中以 @AspectJ 注解来实现。")]),t._v(" "),s("p",[t._v("（2）  连接点（Join point）：指方法，在Spring AOP中，一个连接点 总是 代表一个方法的执行。 应用可能有数以千计的时机应用通知。这些时机被称为连接点。连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。")]),t._v(" "),s("p",[t._v("（3）  通知（Advice）：在AOP术语中，切面的工作被称为通知。")]),t._v(" "),s("p",[t._v("（4）  切入点（Pointcut）：切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称，或是利用正则表达式定义所匹配的类和方法名称来指定这些切点。")]),t._v(" "),s("p",[t._v("（5）  引入（Introduction）：引入允许我们向现有类添加新方法或属性。")]),t._v(" "),s("p",[t._v("（6）  目标对象（Target Object）： 被一个或者多个切面（aspect）所通知")]),t._v(" "),s("p",[t._v("（advise）的对象。它通常是一个代理对象。也有人把它叫做 被通知")]),t._v(" "),s("p",[t._v("（adviced） 对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个 被代理（proxied） 对象。")]),t._v(" "),s("p",[t._v("（7）  织入（Weaving）：织入是把切面应用到目标对象并创建新的代理对象的过程。在目标对象的生命周期里有多少个点可以进行织入：")]),t._v(" "),s("ul",[s("li",[t._v("编译期：切面在目标类编译时被织入。AspectJ的织入编译器是以这种方式织入切面的。")]),t._v(" "),s("li",[t._v("类加载期：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类的字节码。AspectJ5的加载时织入就支持以这种方式织入切面。")]),t._v(" "),s("li",[t._v("运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP 容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切面。")])]),t._v(" "),s("h2",{attrs:{id:"spring在运行时通知对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring在运行时通知对象"}},[t._v("#")]),t._v(" Spring在运行时通知对象")]),t._v(" "),s("p",[t._v("通过在代理类中包裹切面，Spring在运行期把切面织入到Spring管理的bean")]),t._v(" "),s("p",[t._v("中。代理封装了目标类，并拦截被通知方法的调用，再把调用转发给真正的目标 bean。当代理拦截到方法调用时，在调用目标bean方法之前，会执行切面逻辑。")]),t._v(" "),s("p",[t._v("直到应用需要被代理的bean时，Spring才创建代理对象。如果使用的是")]),t._v(" "),s("p",[t._v("ApplicationContext的话，在ApplicationContext从BeanFactory中加载所有 bean的时候，Spring才会创建被代理的对象。因为Spring运行时才创建代理对象，所以我们不需要特殊的编译器来织入SpringAOP的切面。")]),t._v(" "),s("p",[t._v("Spring只支持方法级别的连接点")]),t._v(" "),s("p",[t._v("因为Spring基于动态代理，所以Spring只支持方法连接点。Spring缺少对字段可以利用Aspect来补充。")]),t._v(" "),s("h2",{attrs:{id:"连接点的支持-而且它不支持构造器连接点。方法之外的连接点拦截功能-我们在spring-aop-中-关注点和横切关注的区别是什么-在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接点的支持-而且它不支持构造器连接点。方法之外的连接点拦截功能-我们在spring-aop-中-关注点和横切关注的区别是什么-在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处"}},[t._v("#")]),t._v(" 连接点的支持，而且它不支持构造器连接点。方法之外的连接点拦截功能，我们在Spring AOP 中，关注点和横切关注的区别是什么？在 spring aop 中 concern 和 cross-cutting concern 的不同之处")]),t._v(" "),s("p",[t._v("关注点（concern）是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。")]),t._v(" "),s("p",[t._v("横切关注点（cross-cutting concern）是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。")]),t._v(" "),s("h2",{attrs:{id:"spring通知有哪些类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring通知有哪些类型"}},[t._v("#")]),t._v(" Spring通知有哪些类型？")]),t._v(" "),s("p",[t._v("在AOP术语中，切面的工作被称为通知，实际上是程序执行时要通过")]),t._v(" "),s("p",[t._v("SpringAOP框架触发的代码段。")]),t._v(" "),s("p",[t._v("Spring切面可以应用5种类型的通知：")]),t._v(" "),s("p",[t._v("\\1. 前置通知（Before）：在目标方法被调用之前调用通知功能；")]),t._v(" "),s("p",[t._v("\\2. 后置通知（After）：在目标方法完成之后调用通知，此时不会关心方法的输出是什么；")]),t._v(" "),s("p",[t._v("\\3. 返回通知（After-returning ）：在目标方法成功执行之后调用通知；")]),t._v(" "),s("p",[t._v("\\4. 异常通知（After-throwing）：在目标方法抛出异常后调用通知；")]),t._v(" "),s("p",[t._v("\\5. 环绕通知（Around）：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。")]),t._v(" "),s("p",[t._v("同一个aspect，不同advice的执行顺序：")]),t._v(" "),s("p",[t._v("①没有异常情况下的执行顺序：")]),t._v(" "),s("p",[t._v("around before advice before advice target method 执行 around after advice after advice")]),t._v(" "),s("p",[t._v("afterReturning")]),t._v(" "),s("p",[t._v("②有异常情况下的执行顺序： around before advice before advice target method 执行 around after advice after advice")]),t._v(" "),s("p",[t._v("afterThrowing:异常发生 java.lang.RuntimeException: 异常发生")]),t._v(" "),s("h2",{attrs:{id:"什么是切面-aspect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是切面-aspect"}},[t._v("#")]),t._v(" 什么是切面 Aspect？")]),t._v(" "),s("p",[t._v("aspect 由 pointcount 和 advice 组成，切面是通知和切点的结合。 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑编织到切面所指定的连接点中.")]),t._v(" "),s("p",[t._v("AOP 的工作重心在于如何将增强编织目标对象的连接点上, 这里包含两个工作:")]),t._v(" "),s("ul",[s("li",[t._v("如何通过 pointcut 和 advice 定位到特定的 joinpoint 上")]),t._v(" "),s("li",[t._v("如何在 advice 中编写切面代码.")])]),t._v(" "),s("p",[t._v("可以简单地认为, 使用 @Aspect 注解的类就是切面.")]),t._v(" "),s("p",[s("svg",{attrs:{id:"SvgjsSvg3244",width:"725",height:"362.0028533935547",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[s("defs",{attrs:{id:"SvgjsDefs3245"}},[s("linearGradient",{attrs:{id:"SvgjsLinearGradient3269",x1:"1",y1:"0",x2:"0",y2:"1"}},[s("stop",{attrs:{id:"SvgjsStop3270","stop-opacity":"1","stop-color":"#ffffff",offset:"0"}}),s("stop",{attrs:{id:"SvgjsStop3271","stop-opacity":"1","stop-color":"#c3c3c3",offset:"1"}})],1),s("marker",{attrs:{id:"SvgjsMarker3296",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3297",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3300",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3301",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3304",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3305",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),s("marker",{attrs:{id:"SvgjsMarker3308",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[s("path",{attrs:{id:"SvgjsPath3309",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})])],1),s("rect",{attrs:{id:"SvgjsRect3246",width:"725",height:"362.0028533935547",fill:"#ffffff"}}),s("g",{attrs:{id:"SvgjsG3247",transform:"translate(25,137.0028533935547)"}},[s("path",{attrs:{id:"SvgjsPath3248",d:"M 0 46.53L 603.5 46.53L 603.5 0L 674 70.5L 603.5 141L 603.5 94.47L 0 94.47L 0 46.53Z",stroke:"none","fill-opacity":"1",fill:"#b8b8b8"}}),s("g",{attrs:{id:"SvgjsG3249"}},[s("text",{attrs:{id:"SvgjsText3250","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"674px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"61.05",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG3251",transform:"matrix(0.7071067811865476,0.7071067811865475,-0.7071067811865475,0.7071067811865476,116.5,168.85462111541386)"}},[s("path",{attrs:{id:"SvgjsPath3252",d:"M 0 0L 49 0L 49 49L 0 49Z",stroke:"none","fill-opacity":"1",fill:"#66b2ff"}}),s("g",{attrs:{id:"SvgjsG3253"}},[s("text",{attrs:{id:"SvgjsText3254","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"29px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"15.05",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG3255",transform:"matrix(0.7071067811865476,0.7071067811865475,-0.7071067811865475,0.7071067811865476,222.5,168.85462111541386)"}},[s("path",{attrs:{id:"SvgjsPath3256",d:"M 0 0L 49 0L 49 49L 0 49Z",stroke:"none","fill-opacity":"1",fill:"#66b2ff"}}),s("g",{attrs:{id:"SvgjsG3257"}},[s("text",{attrs:{id:"SvgjsText3258","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"29px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"15.05",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG3259",transform:"matrix(0.7071067811865476,0.7071067811865475,-0.7071067811865475,0.7071067811865476,362,172.85462111541386)"}},[s("path",{attrs:{id:"SvgjsPath3260",d:"M 0 0L 49 0L 49 49L 0 49Z",stroke:"none","fill-opacity":"1",fill:"#66b2ff"}}),s("g",{attrs:{id:"SvgjsG3261"}},[s("text",{attrs:{id:"SvgjsText3262","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"29px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"15.05",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG3263",transform:"matrix(0.7071067811865476,0.7071067811865475,-0.7071067811865475,0.7071067811865476,520,172.85462111541386)"}},[s("path",{attrs:{id:"SvgjsPath3264",d:"M 0 0L 49 0L 49 49L 0 49Z",stroke:"none","fill-opacity":"1",fill:"#66b2ff"}}),s("g",{attrs:{id:"SvgjsG3265"}},[s("text",{attrs:{id:"SvgjsText3266","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"29px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"15.05",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG3267",transform:"translate(312,25.002853393554688)"}},[s("path",{attrs:{id:"SvgjsPath3268",d:"M 0 0L 100 0L 100 49L 0 49Z",stroke:"rgba(50,50,50,1)","stroke-width":"2",fill:"url(#SvgjsLinearGradient3269)"}}),s("g",{attrs:{id:"SvgjsG3272"}},[s("text",{attrs:{id:"SvgjsText3273","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"7.05",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3274",dy:"16",x:"50"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3275"}},[t._v("Aspect")])]),s("tspan",{attrs:{id:"SvgjsTspan3276",dy:"16",x:"50"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3277"}},[t._v("(Advice)")])])])])]),s("g",{attrs:{id:"SvgjsG3278",transform:"translate(332,77.00285339355469)"}},[s("path",{attrs:{id:"SvgjsPath3279",d:"M 19.8 0L 40.2 0L 40.2 60L 60 60L 30 90L 0 60L 19.8 60L 19.8 0Z",stroke:"rgba(255,255,255,1)","stroke-width":"2","fill-opacity":"1",fill:"#737373"}}),s("g",{attrs:{id:"SvgjsG3280"}},[s("text",{attrs:{id:"SvgjsText3281","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"84px",fill:"#b8b8b8","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"31.05",transform:"rotate(0)"}})])]),s("g",{attrs:{id:"SvgjsG3282",transform:"translate(449,245.0028533935547)"}},[s("path",{attrs:{id:"SvgjsPath3283",d:"M 0 0L 176 0L 176 52L 0 52Z",stroke:"none",fill:"none"}}),s("g",{attrs:{id:"SvgjsG3284"}},[s("text",{attrs:{id:"SvgjsText3285","font-family":"微软雅黑","text-anchor":"middle","font-size":"16px",width:"176px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"16px",weight:"700","font-style":"",opacity:"1",y:"13.6",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3286",dy:"20",x:"88"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3287"}},[t._v("Method Execution")])])])])]),s("g",{attrs:{id:"SvgjsG3288",transform:"translate(204,297.0028533935547)"}},[s("path",{attrs:{id:"SvgjsPath3289",d:"M 0 0L 120 0L 120 40L 0 40Z",stroke:"none",fill:"none"}}),s("g",{attrs:{id:"SvgjsG3290"}},[s("text",{attrs:{id:"SvgjsText3291","font-family":"微软雅黑","text-anchor":"middle","font-size":"16px",width:"120px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"16px",weight:"700","font-style":"",opacity:"1",y:"7.6",transform:"rotate(0)"}},[s("tspan",{attrs:{id:"SvgjsTspan3292",dy:"20",x:"60"}},[s("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan3293"}},[t._v("JointPoints")])])])])]),s("g",{attrs:{id:"SvgjsG3294"}},[s("path",{attrs:{id:"SvgjsPath3295",d:"M234 297.0028533935547L114.82568851450469 236.01046399737118",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3296)"}})]),s("g",{attrs:{id:"SvgjsG3298"}},[s("path",{attrs:{id:"SvgjsPath3299",d:"M264 297.0028533935547L221.8263518223331 237.01804564054248",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3300)"}})]),s("g",{attrs:{id:"SvgjsG3302"}},[s("path",{attrs:{id:"SvgjsPath3303",d:"M288 297.0028533935547L360 240.0028533935547",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3304)"}})]),s("g",{attrs:{id:"SvgjsG3306"}},[s("path",{attrs:{id:"SvgjsPath3307",d:"M314 297.0028533935547L519 245.0028533935547",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker3308)"}})])])]),t._v(" "),s("h2",{attrs:{id:"解释基于xml-schema方式的切面实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释基于xml-schema方式的切面实现"}},[t._v("#")]),t._v(" 解释基于XML Schema方式的切面实现")]),t._v(" "),s("p",[t._v("在这种情况下，切面由常规类以及基于XML的配置实现。解释基于注解的切面实现")]),t._v(" "),s("p",[t._v("在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。")]),t._v(" "),s("h2",{attrs:{id:"有几种不同类型的自动代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有几种不同类型的自动代理"}},[t._v("#")]),t._v(" 有几种不同类型的自动代理？")]),t._v(" "),s("p",[t._v("BeanNameAutoProxyCreator")]),t._v(" "),s("p",[t._v("DefaultAdvisorAutoProxyCreator")]),t._v(" "),s("p",[t._v("Metadata autoproxying")])])}),[],!1,null,null,null);a.default=e.exports}}]);