(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{382:function(a,t,s){"use strict";s.r(t);var e=s(45),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),s("h2",{attrs:{id:"第一节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一节"}},[a._v("#")]),a._v(" 第一节")]),a._v(" "),s("h3",{attrs:{id:"jvm入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm入门"}},[a._v("#")]),a._v(" JVM入门")]),a._v(" "),s("h4",{attrs:{id:"java从编码到执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java从编码到执行"}},[a._v("#")]),a._v(" java从编码到执行")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200622135255828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595758642000"}})]),a._v(" "),s("blockquote",[s("p",[a._v("x.java 执行 javac 生成 x.class 文件")]),a._v(" "),s("p",[a._v("调用java命令, x.class被ClassLoader装载到内存里, java相关类库也被加载到内存里")]),a._v(" "),s("p",[a._v("加载完成后调用字节码解释器或者JIT即时编译器进行 解释/翻译")]),a._v(" "),s("p",[a._v("执行引擎执行")])]),a._v(" "),s("h6",{attrs:{id:"面试-java是解释还是编译的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试-java是解释还是编译的"}},[a._v("#")]),a._v(" 面试: java是解释还是编译的?")]),a._v(" "),s("blockquote",[s("p",[a._v("解释和编译都有, 当有一些特定代码, 执行次数较多的时候, JVM会通过即时编译器生成二进制文件, 以后运行相同代码直接交给操作系统调用, 不需要再通过解释器, 效率高很多")])]),a._v(" "),s("h6",{attrs:{id:"用到jvm的许多语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用到jvm的许多语言"}},[a._v("#")]),a._v(" 用到JVM的许多语言")]),a._v(" "),s("blockquote",[s("p",[a._v("任何语言编译成class, 就可以在JVM上面运行, 任何语言-class-jvm")]),a._v(" "),s("p",[a._v("JVM只是一种标准/规范, 有多种实现")]),a._v(" "),s("p",[a._v("java SE 是拥有 java语言规范 和 jvm规范")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200622135505663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595759092263"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200622140344132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595759246211"}})]),a._v(" "),s("h6",{attrs:{id:"不会讲的编译过程-涉及编译原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不会讲的编译过程-涉及编译原理"}},[a._v("#")]),a._v(" 不会讲的编译过程, 涉及编译原理")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200622140406462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_16,color_FFFFFF,t_70",alt:"1595759522946"}})]),a._v(" "),s("h6",{attrs:{id:"常见的jvm实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的jvm实现"}},[a._v("#")]),a._v(" 常见的JVM实现")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200622140540644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_16,color_FFFFFF,t_70",alt:"1595759654832"}})]),a._v(" "),s("h6",{attrs:{id:"jdk-jre-jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk-jre-jvm"}},[a._v("#")]),a._v(" JDK JRE JVM")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200622141039876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_16,color_FFFFFF,t_70",alt:"1595765535767"}})]),a._v(" "),s("h3",{attrs:{id:"class文件结构-class-file-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class文件结构-class-file-format"}},[a._v("#")]),a._v(" class文件结构 Class File Format")]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("其实不用, 没人考, 用于建立知识体系")])]),a._v(" "),s("p",[a._v("打开编译后的class文件, 是二进制字节流, 可以使用16进制格式打开")])]),a._v(" "),s("h6",{attrs:{id:"magic-number"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#magic-number"}},[a._v("#")]),a._v(" magic number")]),a._v(" "),s("blockquote",[s("p",[a._v("CAFE BABE")])]),a._v(" "),s("h6",{attrs:{id:"minor-version-major-version-小版本号-大版本号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minor-version-major-version-小版本号-大版本号"}},[a._v("#")]),a._v(" minor version + major version 小版本号+大版本号")]),a._v(" "),s("blockquote",[s("p",[a._v("00 00 00 34 转换成十进制, 52.0")])]),a._v(" "),s("h6",{attrs:{id:"constant-pool-count-常量池数量-和-常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constant-pool-count-常量池数量-和-常量池"}},[a._v("#")]),a._v(" constant_pool_count 常量池数量 和 常量池")]),a._v(" "),s("blockquote",[s("p",[a._v("最复杂的 0位被预留")]),a._v(" "),s("p",[a._v("用来存类具体信息的常量池列表, 常量特别多")]),a._v(" "),s("p",[a._v("常量池列表参数会互相引用, 或者被后面的所有列表所引用")]),a._v(" "),s("p",[a._v("Ljava/lang/String ([IIJ)J")])]),a._v(" "),s("h6",{attrs:{id:"access-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#access-flags"}},[a._v("#")]),a._v(" access_flags")]),a._v(" "),s("blockquote",[s("p",[a._v("用进制位数来代表修饰符 public super..")])]),a._v(" "),s("h6",{attrs:{id:"this-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-class"}},[a._v("#")]),a._v(" this_class")]),a._v(" "),s("h6",{attrs:{id:"super-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#super-class"}},[a._v("#")]),a._v(" super_class")]),a._v(" "),s("h6",{attrs:{id:"interface-count"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface-count"}},[a._v("#")]),a._v(" interface_count")]),a._v(" "),s("h6",{attrs:{id:"fields-count"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fields-count"}},[a._v("#")]),a._v(" fields_count")]),a._v(" "),s("h6",{attrs:{id:"methods-count"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-count"}},[a._v("#")]),a._v(" methods_count")]),a._v(" "),s("blockquote",[s("p",[a._v("方法的实现 重要的是属性中的Code方法表 Java的汇编 JVM文档中有码表")])]),a._v(" "),s("h6",{attrs:{id:"attributes-count"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#attributes-count"}},[a._v("#")]),a._v(" attributes_count")]),a._v(" "),s("blockquote",[s("p",[a._v("里面最终要的是存着的代码Code")])]),a._v(" "),s("h5",{attrs:{id:"观察class工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察class工具"}},[a._v("#")]),a._v(" 观察class工具")]),a._v(" "),s("blockquote",[s("p",[s("code",[a._v("javap -v")])]),a._v(" "),s("p",[a._v("JBE")]),a._v(" "),s("p",[a._v("JClassLib IDEA插件")])]),a._v(" "),s("h2",{attrs:{id:"第二节-class-loading-linking-initializing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二节-class-loading-linking-initializing"}},[a._v("#")]),a._v(" 第二节 Class Loading Linking Initializing")]),a._v(" "),s("h4",{attrs:{id:"类加载-初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载-初始化"}},[a._v("#")]),a._v(" 类加载, 初始化")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623142346795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595811574102"}})]),a._v(" "),s("blockquote",[s("ol",[s("li",[s("p",[a._v("loading 读取")])]),a._v(" "),s("li",[s("p",[a._v("linking")]),a._v(" "),s("ol",[s("li",[a._v("verification 校验")]),a._v(" "),s("li",[a._v("preparation class静态变量先赋值成默认值")]),a._v(" "),s("li",[a._v("resolution 把class文件中的引用变为真正内存中的")])])]),a._v(" "),s("li",[s("p",[a._v("initializing 静态变量赋值为初始值")])])])]),a._v(" "),s("h4",{attrs:{id:"classloader-类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#classloader-类加载器"}},[a._v("#")]),a._v(" ClassLoader 类加载器")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623143826967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595822453377"}})]),a._v(" "),s("blockquote",[s("p",[a._v("JVM本身有类加载器层次, 分别加载不同的class")]),a._v(" "),s("p",[a._v("任何一个class都是被ClassLoader load到内存里的")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Bootstrap : 最顶层加载器, C++代码实现的, 加载rt.jar(runtime)等核心类, 如果打印是Null, 说明是他加载的, 所有ClassLoader都是他load的")])]),a._v(" "),s("li",[s("p",[a._v("Extension : 加载扩展jar包 ExtClassLoader")])]),a._v(" "),s("li",[s("p",[a._v("Application : classpath 我们写的 AppClassLoader")])]),a._v(" "),s("li",[s("p",[a._v("Custom ClassLoader : 自定义类加载器")])])]),a._v(" "),s("p",[a._v("按顺序上层是下层的父加载器, 和继承无关, 只是顺序关系, 源码表现为当前ClassLoader中的一个ClassLoader属性")])]),a._v(" "),s("h6",{attrs:{id:"class类对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#class类对象"}},[a._v("#")]),a._v(" class类对象")]),a._v(" "),s("blockquote",[s("p",[a._v("把class文件load到内存的过程, 是把二进制内容放进内存, 同时生成class类的对象, 这个对象指向二进制内容")]),a._v(" "),s("p",[a._v("存储在 metaspace")])]),a._v(" "),s("h6",{attrs:{id:"类加载过程-loading"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程-loading"}},[a._v("#")]),a._v(" 类加载过程 Loading")]),a._v(" "),s("blockquote",[s("p",[a._v("双亲委派..")]),a._v(" "),s("p",[a._v("首先, 每个加载器都有自己的缓存, 先查看自身的缓存, 是否已经加载过这个class, 是就返回, 否则就往上委派, 如果到顶后还是没有找到, 就查找jar包并向下委派, 最终返回或报classNotFound")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623150313364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595824013737"}})]),a._v(" "),s("h6",{attrs:{id:"面试题-为什么loading过程使用双亲委派"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题-为什么loading过程使用双亲委派"}},[a._v("#")]),a._v(" 面试题 为什么loading过程使用双亲委派")]),a._v(" "),s("blockquote",[s("p",[a._v("安全考虑")]),a._v(" "),s("ul",[s("li",[a._v("自己定义java.lang.Strng, 如果最底层自己实现的ClassLoader可以直接加载, 可以覆盖最顶层的String, 存在安全问题")])]),a._v(" "),s("p",[a._v("资源浪费")])]),a._v(" "),s("h6",{attrs:{id:"launcher类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#launcher类"}},[a._v("#")]),a._v(" Launcher类")]),a._v(" "),s("blockquote",[s("p",[a._v("这些类加载器加载位置是由Launcher类封装的")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623151841789.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595825224869"}})]),a._v(" "),s("h4",{attrs:{id:"自定义类加载器-classloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义类加载器-classloader"}},[a._v("#")]),a._v(" 自定义类加载器 ClassLoader")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623151852948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595849697029"}})]),a._v(" "),s("blockquote",[s("p",[a._v("稍微读一读"),s("code",[a._v("abstract class ClassLoader")]),a._v("源码, 需要一些设计模式概念")]),a._v(" "),s("p",[a._v("想要加载一个类, 调用"),s("code",[a._v("ClassLoader")]),a._v("的"),s("code",[a._v("loadClass")]),a._v("方法, 返回一个Class的对象")]),a._v(" "),s("p",[a._v("继承ClassLoader只要实现findClass()方法即可, 模板方法")]),a._v(" "),s("p",[a._v("loadClass源码: 先找已加载的类, 如果没有递归调用parent的loadClass方法, 如果都没找到, 调用findClass方法")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623151907988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595850793291"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623154019787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_16,color_FFFFFF,t_70",alt:"1595851021416"}})]),a._v(" "),s("blockquote",[s("p",[a._v("继承ClassLoader, 重写findClass, 方法中读取文件为二进制字节数组, 然后调用defineClass返回该对象")]),a._v(" "),s("p",[a._v("框架和类库一般有自己的ClassLoader")]),a._v(" "),s("p",[a._v("自定义加密ClassLoader")]),a._v(" "),s("p",[a._v("Compiler API 自行了解")])]),a._v(" "),s("h6",{attrs:{id:"懒加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[a._v("#")]),a._v(" 懒加载")]),a._v(" "),s("blockquote",[s("p",[a._v("这里初始化就是指 类的初始化")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623162403393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595852821299"}})]),a._v(" "),s("h6",{attrs:{id:"编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[a._v("#")]),a._v(" 编译")]),a._v(" "),s("blockquote",[s("p",[a._v("默认 mixed-mod 混合模式")]),a._v(" "),s("p",[a._v("Hotspot 热点 -XX:CompileThreshold = 10000")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200623172040219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595853494315"}})]),a._v(" "),s("h2",{attrs:{id:"第三节课-类加载-关于对象的一些问题-内存屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三节课-类加载-关于对象的一些问题-内存屏障"}},[a._v("#")]),a._v(" 第三节课 类加载 关于对象的一些问题 内存屏障")]),a._v(" "),s("blockquote",[s("p",[a._v("双亲委派机制是可以被打破的 - 重写loadClass方法")]),a._v(" "),s("p",[a._v("热部署 : 先加载路径下的class 再双亲委派")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624100352962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595857305927"}})]),a._v(" "),s("ol",[s("li",[a._v("Loading")]),a._v(" "),s("li",[a._v("Linking\n"),s("ol",[s("li",[a._v("Verification\n"),s("ol",[s("li",[a._v("验证文件是否符合JVM规定")])])]),a._v(" "),s("li",[a._v("Preparation\n"),s("ol",[s("li",[a._v("静态成员变量赋默认值")])])]),a._v(" "),s("li",[a._v("Resolution\n"),s("ol",[s("li",[a._v("将类、方法、属性等符号引用解析为直接引用\n常量池中的各种符号引用解析为指针、偏移量等内存地址的直接引用")])])])])]),a._v(" "),s("li",[a._v("Initializing\n"),s("ol",[s("li",[a._v("调用类初始化代码 "),s("code",[a._v("<clinit>")]),a._v("，给静态成员变量赋初始值")])])])]),a._v(" "),s("h6",{attrs:{id:"面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[a._v("#")]),a._v(" 面试题")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mashibing"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jvm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("c2_classloader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T001_ClassLoadingProcedure")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 执行到这一步时，下一行的count仍然是默认值0，调用构造方法后，count变为1,")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 执行到这一步时，上一行的count=1被这一行的count=2覆盖")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        count "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("h6",{attrs:{id:"new对象过程也分成两步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new对象过程也分成两步"}},[a._v("#")]),a._v(" new对象过程也分成两步")]),a._v(" "),s("ol",[s("li",[a._v("申请内存")]),a._v(" "),s("li",[a._v("将数据赋默认值")]),a._v(" "),s("li",[a._v("调用初始化代码, 将值赋给数据")])]),a._v(" "),s("h6",{attrs:{id:"dcl单例的指令重排序问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dcl单例的指令重排序问题"}},[a._v("#")]),a._v(" DCL单例的指令重排序问题")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624103504753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595859035484"}})]),a._v(" "),s("blockquote",[s("p",[a._v("new 申请内存完毕")]),a._v(" "),s("p",[a._v("invokespecial 调用构造方法")]),a._v(" "),s("p",[a._v("astore_1 将对象赋值给引用")])]),a._v(" "),s("h3",{attrs:{id:"jmm-java内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmm-java内存模型"}},[a._v("#")]),a._v(" JMM Java内存模型")]),a._v(" "),s("p",[a._v("硬件层的并发优化基础知识")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624104142661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595859803941"}})]),a._v(" "),s("h6",{attrs:{id:"解决l3缓存共享数据问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决l3缓存共享数据问题"}},[a._v("#")]),a._v(" 解决L3缓存共享数据问题")]),a._v(" "),s("ol",[s("li",[a._v("总线锁")]),a._v(" "),s("li",[a._v("缓存锁, MESI等的 Cache缓存一致性协议的实现")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624104651827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595860460845"}})]),a._v(" "),s("h6",{attrs:{id:"cache-line-伪共享问题-缓存行对齐解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-line-伪共享问题-缓存行对齐解决"}},[a._v("#")]),a._v(" cache line 伪共享问题 缓存行对齐解决")]),a._v(" "),s("blockquote",[s("p",[a._v("缓存块读64bytes, 多线程下缓存锁造成多CPU缓存之间持续同步")])]),a._v(" "),s("h6",{attrs:{id:"cpu乱序执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu乱序执行"}},[a._v("#")]),a._v(" cpu乱序执行")]),a._v(" "),s("blockquote",[s("p",[a._v("cpu为了提高效率, 打乱没有依赖关系的指令顺序, 运行")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624110333610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595862000713"}})]),a._v(" "),s("h6",{attrs:{id:"合并写-writecombinebuffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并写-writecombinebuffer"}},[a._v("#")]),a._v(" 合并写 WriteCombineBuffer")]),a._v(" "),s("blockquote",[s("p",[a._v("一般是4个字节大小, 由于ALU 速度最快, 在写入L1的同时写入一个CombineBuffer, 写满后直接给L2")]),a._v(" "),s("ul",[s("li",[a._v("补充: 直接写到L2")])])]),a._v(" "),s("h6",{attrs:{id:"乱序执行的证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乱序执行的证明"}},[a._v("#")]),a._v(" 乱序执行的证明")]),a._v(" "),s("blockquote",[s("p",[a._v("T04_Disorder.java")])]),a._v(" "),s("h6",{attrs:{id:"特定情况下解决乱序问题-保证有序性-使用内存屏障"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特定情况下解决乱序问题-保证有序性-使用内存屏障"}},[a._v("#")]),a._v(" 特定情况下解决乱序问题, 保证有序性, 使用内存屏障")]),a._v(" "),s("blockquote",[s("p",[a._v("硬件级别CPU内存屏障")]),a._v(" "),s("p",[a._v("以下是Intel CPU的内存屏障, 屏障前后保证顺序, 可以保证一定的读写顺序")]),a._v(" "),s("p",[a._v("lock... 指令")]),a._v(" "),s("p",[a._v("执行时候锁住内存来确保执行顺序")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624111930798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595863192064"}})]),a._v(" "),s("h6",{attrs:{id:"jvm级别规范-jsr133"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm级别规范-jsr133"}},[a._v("#")]),a._v(" JVM级别规范 JSR133")]),a._v(" "),s("blockquote",[s("p",[a._v("JSR内存屏障 JVM的实现也是汇编命令")]),a._v(" "),s("p",[a._v("四种屏障")]),a._v(" "),s("p",[a._v("LoadLoad")]),a._v(" "),s("p",[a._v("StoreStore")]),a._v(" "),s("p",[a._v("LoadStore")]),a._v(" "),s("p",[a._v("StoreLoad")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200624112202189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595910218063"}})]),a._v(" "),s("h6",{attrs:{id:"volatile-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile-实现"}},[a._v("#")]),a._v(" volatile 实现")]),a._v(" "),s("blockquote",[s("ol",[s("li",[s("p",[a._v("字节码 ACC_VOLATILE")])]),a._v(" "),s("li",[s("p",[a._v("JVM")]),a._v(" "),s("ul",[s("li",[a._v("在volatile内存区的 写操作和读操作的前后都加上屏障")])])]),a._v(" "),s("li",[s("p",[a._v("OS和硬件层面")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("使用hsdis(hotspot Dis Assembler)观察汇编")])]),a._v(" "),s("li",[s("p",[a._v("Windows 中是用 lock 实现")])]),a._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://blog.csdn.net/qq_26222859/article/details/52235930",target:"_blank",rel:"noopener noreferrer"}},[a._v("Blog"),s("OutboundLink")],1)])])])])])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("volatile的实现细节\nJVM层面\n\nStoreStoreBarrier\t\t\t\t\t\tLoadLoadBarrier\nvolatile写操作\t\t\t\t\t\t\t  volatile读操作\nStoreLoadBarrier\t\t\t\t\t\tLoadStoreBarrier\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("h6",{attrs:{id:"synchronized-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-实现"}},[a._v("#")]),a._v(" synchronized 实现")]),a._v(" "),s("blockquote",[s("ol",[s("li",[a._v("字节码 ACC_SYNCHRONIZED")])]),a._v(" "),s("ul",[s("li",[a._v("monitorenter monitorexit")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("JVM层面")])]),a._v(" "),s("ul",[s("li",[a._v("C++ 调用了OS提供的同步机制")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("OS和硬件层面")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("lock 指令实现 , lock 将后面这条指令执行的过程中将操作的内存区域锁定")])]),a._v(" "),s("li",[s("p",[s("a",{attrs:{href:"(https://blog.csdn.net/21aspnet/article/details/88571740)"}},[a._v("OSblog")])])])])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/202006251043017.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595941280785"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200625104319309.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595941314062"}})]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("as if serial \n不管如何重排序, 单线程执行结果不会改变\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200625104744447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595941195279"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200625104900549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595941680273"}})]),a._v(" "),s("h4",{attrs:{id:"对象内存布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象内存布局"}},[a._v("#")]),a._v(" 对象内存布局")]),a._v(" "),s("blockquote",[s("p",[a._v("对象大小, 和JVM配置, 和电脑是64位/32位有关")]),a._v(" "),s("p",[s("code",[a._v("java -XX:+PrintCommandLineFlags -version")]),a._v(" 打印命令行参数")])]),a._v(" "),s("h5",{attrs:{id:"普通对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#普通对象"}},[a._v("#")]),a._v(" 普通对象")]),a._v(" "),s("blockquote",[s("ol",[s("li",[a._v("对象头 8个字节")]),a._v(" "),s("li",[a._v("ClassPointer指针, 指向该对象唯一的Class对象")]),a._v(" "),s("li",[a._v("实例数据, 保存的基本类型以及引用类型")]),a._v(" "),s("li",[a._v("Padding对齐, 对齐保证块读效率, 保证是8字节的倍数")])])]),a._v(" "),s("h5",{attrs:{id:"数组对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组对象"}},[a._v("#")]),a._v(" 数组对象")]),a._v(" "),s("blockquote",[s("ol",[s("li",[a._v("对象头 8个字节")]),a._v(" "),s("li",[a._v("ClassPointer 4/8字节")]),a._v(" "),s("li",[a._v("数组长度")]),a._v(" "),s("li",[a._v("数组数据")]),a._v(" "),s("li",[a._v("Padding 对齐")])])]),a._v(" "),s("h5",{attrs:{id:"对象的大小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象的大小"}},[a._v("#")]),a._v(" 对象的大小")]),a._v(" "),s("h6",{attrs:{id:"java-agent"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-agent"}},[a._v("#")]),a._v(" Java Agent")]),a._v(" "),s("blockquote",[s("p",[a._v("截获加载的class , 可以读取class大小, 可以对class进行修改")]),a._v(" "),s("p",[a._v("Instrumentation")]),a._v(" "),s("p",[a._v("Premain-Class 指定main方法之前执行的class, JVM自动调用class内的 premain方法")]),a._v(" "),s("p",[a._v("premain方法获取到Instrumentation对象后, 可以调用它的getObjectSize()获取size")]),a._v(" "),s("p",[a._v("打包成jar, 作为另一个java项目的 agent , 使用时需要指定javaagent的JVM参数")])]),a._v(" "),s("h6",{attrs:{id:"object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[a._v("#")]),a._v(" Object")]),a._v(" "),s("blockquote",[s("p",[a._v("对象头 8 + 压缩的ClassPointer 4 + Padding = 16 字节")])]),a._v(" "),s("h6",{attrs:{id:"数组-空的int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组-空的int"}},[a._v("#")]),a._v(" 数组 空的int[]")]),a._v(" "),s("blockquote",[s("p",[a._v("对象头 8 + 压缩ClassPointer 4 + 数组长度 4 = 16 字节")]),a._v(" "),s("p",[a._v("如果关闭压缩Class指针 "),s("code",[a._v("-XX:-UseCompressedClassPointers")])]),a._v(" "),s("p",[a._v("对象头 8 + 不压缩ClassPointer 8 + 数组长度 4 + padding = 24 字节")])]),a._v(" "),s("p",[a._v("带参数的Class")]),a._v(" "),s("blockquote",[s("p",[a._v("如果Class中有普通对象指针 ordinary object pointers")]),a._v(" "),s("p",[s("code",[a._v("-XX:+UseCompressedOops")]),a._v(" 选项会压缩Oops")])]),a._v(" "),s("h5",{attrs:{id:"对象头具体包括什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象头具体包括什么"}},[a._v("#")]),a._v(" 对象头具体包括什么")]),a._v(" "),s("blockquote",[s("p",[a._v("每个版本不一样 定义在markOop.hpp 文件")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200625114204897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595943510156"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200625114214505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595943541638"}})]),a._v(" "),s("blockquote",[s("p",[a._v("sync 锁标记")]),a._v(" "),s("p",[a._v("gc 标记 分代年龄")])]),a._v(" "),s("p",[a._v("对象的IdentityHashCode计算后, 无法进入偏向锁状态")]),a._v(" "),s("h5",{attrs:{id:"对象定位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象定位"}},[a._v("#")]),a._v(" 对象定位")]),a._v(" "),s("blockquote",[s("ol",[s("li",[a._v("句柄池 首先指向拥有两个指针的句柄池(该对象+class对象), 再指向该对象")]),a._v(" "),s("li",[a._v("直接指针 直接指向该对象")])])]),a._v(" "),s("h5",{attrs:{id:"对象怎么分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象怎么分配"}},[a._v("#")]),a._v(" 对象怎么分配")]),a._v(" "),s("blockquote",[s("p",[a._v("GC课详细讲")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200625115051929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595944845432"}})]),a._v(" "),s("h2",{attrs:{id:"第五节-jvm-runtime-data-area-and-jvm-instructions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五节-jvm-runtime-data-area-and-jvm-instructions"}},[a._v("#")]),a._v(" 第五节 JVM Runtime Data Area and JVM Instructions")]),a._v(" "),s("p",[a._v("JVM运行时数据区 JVM指令集")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626091109514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595981509669"}})]),a._v(" "),s("h3",{attrs:{id:"jvm运行时数据区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm运行时数据区"}},[a._v("#")]),a._v(" JVM运行时数据区")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626091414763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595981805578"}})]),a._v(" "),s("h5",{attrs:{id:"program-counter-程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#program-counter-程序计数器"}},[a._v("#")]),a._v(" Program Counter 程序计数器")]),a._v(" "),s("blockquote",[s("p",[a._v("存放指令位置")])]),a._v(" "),s("h5",{attrs:{id:"heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#heap"}},[a._v("#")]),a._v(" Heap")]),a._v(" "),s("blockquote",[s("p",[a._v("GC时候再聊")])]),a._v(" "),s("h5",{attrs:{id:"jvm-stacks-每个线程开启的栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm-stacks-每个线程开启的栈"}},[a._v("#")]),a._v(" JVM stacks 每个线程开启的栈")]),a._v(" "),s("h6",{attrs:{id:"frame"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#frame"}},[a._v("#")]),a._v(" frame")]),a._v(" "),s("blockquote"),a._v(" "),s("h5",{attrs:{id:"native-method-stacks-本地参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#native-method-stacks-本地参数"}},[a._v("#")]),a._v(" native method stacks 本地参数")]),a._v(" "),s("h5",{attrs:{id:"direct-memory-直接内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#direct-memory-直接内存"}},[a._v("#")]),a._v(" Direct Memory 直接内存")]),a._v(" "),s("blockquote",[s("p",[a._v("NIO新加入, JVM不管理, 直接访问JVM外的内存空间(OS管理的), 参考C++")])]),a._v(" "),s("h5",{attrs:{id:"method-area-方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method-area-方法区"}},[a._v("#")]),a._v(" method area 方法区")]),a._v(" "),s("blockquote",[s("p",[a._v("1.8 前 Perm Space 之后 Meta Space")]),a._v(" "),s("ol",[s("li",[a._v("Perm Space , 启动的时候指定大小, FGC不会清理")]),a._v(" "),s("li",[a._v("Meta Space , 不设定的话最大就是物理内存, 会触发FGC清理,")]),a._v(" "),s("li",[a._v("字符串常量放在Perm Space, 1.8开始 放在堆Heap")])])]),a._v(" "),s("h6",{attrs:{id:"run-time-constant-pool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run-time-constant-pool"}},[a._v("#")]),a._v(" run-time constant pool")]),a._v(" "),s("blockquote",[s("p",[a._v("运行时的常量池")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626091910326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595982370097"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626091930849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595982429121"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626091943211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595982470802"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626091955765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595982502457"}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626092056794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595994770957"}})]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("Native Method Stacks\t本地方法栈\n一个Java虚拟机的实现可能会用到这个本地方法栈\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626092108483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595994887642"}})]),a._v(" "),s("h5",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("blockquote",[s("p",[a._v("每个线程")]),a._v(" "),s("p",[a._v("有自己的PC VMS NMS")]),a._v(" "),s("p",[a._v("共享Heap 和 MethodArea")])]),a._v(" "),s("h6",{attrs:{id:"为什么需要记录当前线程的执行地址"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要记录当前线程的执行地址"}},[a._v("#")]),a._v(" 为什么需要记录当前线程的执行地址?")]),a._v(" "),s("blockquote",[s("p",[a._v("没执行地址怎么执行")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626092208660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595995157163"}})]),a._v(" "),s("h5",{attrs:{id:"栈帧frame-每个方法对应一个栈帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈帧frame-每个方法对应一个栈帧"}},[a._v("#")]),a._v(" 栈帧Frame - 每个方法对应一个栈帧")]),a._v(" "),s("blockquote",[s("p",[a._v("存储数据中间结果动态链接")]),a._v(" "),s("ul",[s("li",[a._v("局部变量/本地变量 Local Variable Table时")]),a._v(" "),s("li",[a._v("操作数栈 Operand Stacks")]),a._v(" "),s("li",[a._v("动态链接 Dynamic Linkings\n"),s("ul",[s("li",[a._v("从Class字节码中找到各方法的地址")])])]),a._v(" "),s("li",[a._v("return address\n"),s("ul",[s("li",[a._v("方法调用结束后的位置以及将返回值返回")])])])])]),a._v(" "),s("h6",{attrs:{id:"回到-i-i-的面试题-以下描述中压栈的都是操作数栈-operand-stack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回到-i-i-的面试题-以下描述中压栈的都是操作数栈-operand-stack"}},[a._v("#")]),a._v(" 回到 i=i++ 的面试题 以下描述中压栈的都是操作数栈(Operand Stack)")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ni "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 bipush 8\n2 istore_1\n3 iload_1\n4 iinc 1 by 1\n7 istore_1\n8 return\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",[a._v("Nr.")]),a._v(" "),s("th",[a._v("Start PC")]),a._v(" "),s("th",[a._v("Length")]),a._v(" "),s("th",[a._v("Index")]),a._v(" "),s("th")])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("0")]),a._v(" "),s("td",[a._v("0")]),a._v(" "),s("td",[a._v("9")]),a._v(" "),s("td",[a._v("0")]),a._v(" "),s("td",[a._v("args")])]),a._v(" "),s("tr",[s("td",[a._v("1")]),a._v(" "),s("td",[a._v("3")]),a._v(" "),s("td",[a._v("6")]),a._v(" "),s("td",[a._v("1")]),a._v(" "),s("td",[a._v("i")])])])]),a._v(" "),s("h6",{attrs:{id:"bipush"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bipush"}},[a._v("#")]),a._v(" bipush")]),a._v(" "),s("blockquote",[s("p",[a._v("push byte 到 Operand Stack (操作数栈)里, 然后扩展成int值")]),a._v(" "),s("p",[a._v("也就是把 8 压栈 (这里因为是8, byte就可以存, 如果大于127, 开始用 sipush (short)")])]),a._v(" "),s("h6",{attrs:{id:"istore-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#istore-n"}},[a._v("#")]),a._v(" istore_n")]),a._v(" "),s("blockquote",[s("p",[a._v("出栈, 把值存到 local variable 局部变量表中 下标为 n 的位置")]),a._v(" "),s("p",[a._v("把栈顶元素出栈, 弹出到局部变量表中下标为 n 的位置, 此处istore_1 局部变量表1的位置是 i , 也就将8赋值给了 i")])]),a._v(" "),s("h6",{attrs:{id:"iload-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iload-n"}},[a._v("#")]),a._v(" iload_n")]),a._v(" "),s("blockquote",[s("p",[a._v("从局部变量表按下标 n 拿值, 压栈")]),a._v(" "),s("p",[a._v("把 i 的值 8 拿出来压栈里")])]),a._v(" "),s("h6",{attrs:{id:"iinc-n-by-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iinc-n-by-1"}},[a._v("#")]),a._v(" iinc n by 1")]),a._v(" "),s("blockquote",[s("p",[a._v("把局部变量表 位置1的数 加一")]),a._v(" "),s("p",[a._v("这时候i = 9 了 (但是栈里面的数还是 8)")]),a._v(" "),s("p",[a._v("然后又调用了 istore_1 , 将栈里的8又赋值给 i")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("0 bipush 8\n2 istore_1\n3 iinc 1 by 1\n6 iload_1\n7 istore_1\n8 return\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ni "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//上图中的 iload_1 和 iinc 1 by 1 位置互换了, 变成先增加, 再将i的值 9 压栈")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/2020062610140417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1596083086677"}})]),a._v(" "),s("blockquote",[s("p",[a._v("JVM是基于栈的指令集")]),a._v(" "),s("p",[a._v("硬件都是基于寄存器")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626105826131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1596084468036"}})]),a._v(" "),s("blockquote",[s("p",[a._v("将 3 和 4 压栈后执行 iadd 指令, 将3, 4 出栈, 把相加之和压栈")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626110021642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1596084600675"}})]),a._v(" "),s("h5",{attrs:{id:"创建对象的指令-dcl问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的指令-dcl问题"}},[a._v("#")]),a._v(" 创建对象的指令 DCL问题")]),a._v(" "),s("h6",{attrs:{id:"new"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[a._v("#")]),a._v(" new")]),a._v(" "),s("blockquote",[s("p",[a._v("开辟内存空间(创建默认对象), 将内存地址压栈")])]),a._v(" "),s("h6",{attrs:{id:"dup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dup"}},[a._v("#")]),a._v(" dup")]),a._v(" "),s("blockquote",[s("p",[a._v("将栈顶元素复制一份压栈")])]),a._v(" "),s("h6",{attrs:{id:"invokespecial"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokespecial"}},[a._v("#")]),a._v(" invokespecial")]),a._v(" "),s("blockquote",[s("p",[a._v("执行构造方法, 初始化内存对象")]),a._v(" "),s("p",[a._v("执行构造方法需要一份对象地址, 于是把栈顶元素弹出")])]),a._v(" "),s("h6",{attrs:{id:"返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[a._v("#")]),a._v(" 返回值")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626110908449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1596109651788"}})]),a._v(" "),s("blockquote",[s("p",[a._v("return的值会放到调用这个方法的栈帧的操作数栈的顶部, 就是把调用方法的返回值压栈了")])]),a._v(" "),s("h6",{attrs:{id:"递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[a._v("#")]),a._v(" 递归")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200626111125916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1596109871079"}})]),a._v(" "),s("h6",{attrs:{id:"iconst-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iconst-n"}},[a._v("#")]),a._v(" iconst_n")]),a._v(" "),s("blockquote",[s("p",[a._v("压栈一个常量 n")])]),a._v(" "),s("h6",{attrs:{id:"if-icmpne-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-icmpne-n"}},[a._v("#")]),a._v(" if_icmpne n")]),a._v(" "),s("blockquote",[s("p",[a._v("比较int值, 如果不相等跳到第n步执行, 如果相等向下运行")])]),a._v(" "),s("h6",{attrs:{id:"ireturn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ireturn"}},[a._v("#")]),a._v(" ireturn")]),a._v(" "),s("blockquote",[s("p",[a._v("int值出栈并返回")])]),a._v(" "),s("h6",{attrs:{id:"aload-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aload-n"}},[a._v("#")]),a._v(" aload_n")]),a._v(" "),s("blockquote",[s("p",[a._v("将引用n的对象压栈")])]),a._v(" "),s("h6",{attrs:{id:"isub-imul"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isub-imul"}},[a._v("#")]),a._v(" isub imul")]),a._v(" "),s("blockquote",[s("p",[a._v("出栈两个int数进行减法/乘法")])]),a._v(" "),s("h6",{attrs:{id:"invokevirtual"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokevirtual"}},[a._v("#")]),a._v(" invokevirtual")]),a._v(" "),s("blockquote",[s("p",[a._v("调用方法, 并将返回值压栈")])]),a._v(" "),s("h5",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("blockquote",[s("p",[a._v("前面的 0 1 2 5 指这条指令所占的字节.. 占的多就会跳行")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("<clinit>")]),a._v(" 静态语句块 static{}")]),a._v(" "),s("li",[s("code",[a._v("<init>")]),a._v(" 构造方法")]),a._v(" "),s("li",[s("code",[a._v("_store")]),a._v(" 出栈, 赋值给对应下标")]),a._v(" "),s("li",[s("code",[a._v("_load")]),a._v(" 读取本地变量表对应下标的值, 压栈")]),a._v(" "),s("li",[s("code",[a._v("invoke_xxx")])])])]),a._v(" "),s("h5",{attrs:{id:"invoke指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invoke指令"}},[a._v("#")]),a._v(" invoke指令")]),a._v(" "),s("h6",{attrs:{id:"invokestatic-调用静态方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokestatic-调用静态方法"}},[a._v("#")]),a._v(" invokeStatic 调用静态方法")]),a._v(" "),s("h6",{attrs:{id:"invokevirtual-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokevirtual-2"}},[a._v("#")]),a._v(" invokeVirtual")]),a._v(" "),s("blockquote",[s("p",[a._v("自带多态, 只是调用了所给对象的方法")])]),a._v(" "),s("h6",{attrs:{id:"invokeinterface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokeinterface"}},[a._v("#")]),a._v(" invokeInterface")]),a._v(" "),s("h6",{attrs:{id:"invokespecial-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokespecial-2"}},[a._v("#")]),a._v(" invokeSpecial")]),a._v(" "),s("blockquote",[s("p",[a._v("可以直接定位, 不需要多态的方法")]),a._v(" "),s("p",[a._v("private 方法, 构造方法")])]),a._v(" "),s("h6",{attrs:{id:"invokedynamic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#invokedynamic"}},[a._v("#")]),a._v(" invokeDynamic")]),a._v(" "),s("blockquote",[s("p",[a._v("JVM最难的指令")]),a._v(" "),s("p",[a._v("lambda表达式, 反射, 其他动态语言scala kotlin，或者CGLib ASM，动态产生的class，会用到的指令")]),a._v(" "),s("p",[a._v("每一个 lambda 表达式都会产生一个内部类")])])])}),[],!1,null,null,null);t.default=r.exports}}]);