(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{397:function(s,t,a){"use strict";a.r(t);var r=a(45),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"mysql总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql总结"}},[s._v("#")]),s._v(" mysql总结")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/164519371",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考链接"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("目录\nMySQL\n\tMySQL架构\n\t存储引擎\n\t数据类型\n\t索引\n\tSQL\n\t事务\n\t锁机制\n\t性能优化\n\t分库分表分区\n\t主从复制\n\t其他问题\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"一-mysql架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-mysql架构"}},[s._v("#")]),s._v(" 一. mysql架构")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gj0sffrl6ij30t30gqdlf.jpg",alt:""}})]),s._v(" "),a("p",[s._v("与其他数据库相比: 插件式的存储引擎架构, 查询处理和数据存储分离")]),s._v(" "),a("ul",[a("li",[s._v("连接层: 管理连接, 授权验证")]),s._v(" "),a("li",[s._v("服务层: 负责大部分核心功能\n"),a("ul",[a("li",[s._v("解析器, 分析器, 优化器, 执行器, 缓存, 所有内置函数")]),s._v(" "),a("li",[s._v("触发器, 存储过程, 视图")]),s._v(" "),a("li",[s._v("RBO基于规则的优化器; CBO基于成本的优化器")])])]),s._v(" "),a("li",[s._v("引擎层: 负责MySQL中数据的存储和读取")]),s._v(" "),a("li",[s._v("存储层: 将数据存储运行于当前设备的文件系统之上, 提供读写API")])]),s._v(" "),a("blockquote",[a("p",[s._v("面试官: 画出MySQL架构 / MySQL查询流程? / SQL语句执行顺序?")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("client -- 连接器(鉴权,建立连接) -- 查询缓存 -- 分析器(语法分析) \n -- 优化器(选择最优执行方案)\n -- 执行器(检查执行权限,实际执行SQL) -- 去引擎层读取数据\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-0d2070e8f84c4801adbfa03bda1f98d9_720w.jpg",alt:"img"}})]),s._v(" "),a("blockquote",[a("p",[s._v("msg: MySQL有哪些存储引擎? 区别?")])]),s._v(" "),a("h2",{attrs:{id:"二-存储引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-存储引擎"}},[s._v("#")]),s._v(" 二. 存储引擎")]),s._v(" "),a("p",[s._v("一个数据库中的不同表可以使用不同引擎以满足需求, 不同引擎提供不同的存储机制, 锁, 索引")]),s._v(" "),a("p",[s._v("(MySQL服务器使用可插拔的存储引擎, 可以加载或卸载)")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" ENGINES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看存储引擎")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLES "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'storage_engine'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看默认存储引擎")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("tablename"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看具体某一个表所使用的存储引擎")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 准确查看某个数据库中的某一表所使用的存储引擎")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<tablename>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("STATUS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATABASE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<tablename>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 设置存储引擎")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNODB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" CSV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 修改默认存储引擎 , 也可以在配置文件my.cnf中修改默认引擎")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SET")]),s._v(" default_storage_engine"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NDBCLUSTER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"存储引擎对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎对比"}},[s._v("#")]),s._v(" 存储引擎对比")]),s._v(" "),a("p",[s._v("常见存储引擎: InnoDB(默认), MyISAM, Memory, NDB;")]),s._v(" "),a("h4",{attrs:{id:"文件存储结构对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件存储结构对比"}},[s._v("#")]),s._v(" 文件存储结构对比")]),s._v(" "),a("ul",[a("li",[s._v("frm文件: 对应在MySQL中建立的一张表, 存储表的元数据信息, 结构定义信息")]),s._v(" "),a("li",[s._v("MyISAM:\n"),a("ul",[a("li",[s._v("MYD(MyData)文件: 存储表数据")]),s._v(" "),a("li",[s._v("MYI(MyIndex)文件: 存储索引")])])]),s._v(" "),a("li",[s._v("InnoDB:\n"),a("ul",[a("li",[s._v("ibd文件: 独享表空间使用, 每个表一个ibd文件")]),s._v(" "),a("li",[s._v("ibdata文件: 共享表空间, 所有表共用一个ibdata文件")])])])]),s._v(" "),a("h4",{attrs:{id:"innodb与myisam对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb与myisam对比"}},[s._v("#")]),s._v(" InnoDB与MyISAM对比")]),s._v(" "),a("ol",[a("li",[s._v("InnoDB支持事务, 外键, 行锁, MyISAM不支持")]),s._v(" "),a("li",[s._v("InnoDB是聚簇索引: 数据存放在主键索引的叶子节点上, 所以必须有主键; 辅助索引比主键索引多了回表, 效率会差些; 主键太大会导致其他索引也很大; MyISAM是非聚簇索引, 主键索引和辅助索引是独立的")]),s._v(" "),a("li",[s._v("InnoDB不保存表的具体行数, COUNT(1) 需要全表扫描, 而MyISAM用一个变量保存了整个表的行数, COUNT(1)很快")]),s._v(" "),a("li",[s._v("锁粒度: InnoDB锁粒度最小是行锁, MyISAM是表锁")])]),s._v(" "),a("blockquote",[a("p",[s._v("msg: 一张表id(自增主键), 插入17条记录后, 删除15, 16, 17条记录, 重启MySQL后插入的新纪录id是多少?")])]),s._v(" "),a("ul",[a("li",[s._v("MyISAM是18, 因为会把自增主键的最大ID 记录到数据文件中")]),s._v(" "),a("li",[s._v("InnoDB是15, 只记录到内存中, 重启导致最大ID丢失")])]),s._v(" "),a("blockquote",[a("p",[s._v("哪个存储引擎SELECT COUNT(1)更快?  -- 显然MyISAM更快")])]),s._v(" "),a("ul",[a("li",[s._v("InnoDB需要把所有数据读出来进行累加计算; 由于MVCC的原因, InnoDB应该返回多少行是不确定的, 所以不能像MyISAM那样准确记录行数")])]),s._v(" "),a("h2",{attrs:{id:"三-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-数据类型"}},[s._v("#")]),s._v(" 三. 数据类型")]),s._v(" "),a("p",[s._v("包括五大类: 整型, 浮点, 字符串, 日期, 其他(ENUM, SET...)")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TINYINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("byte "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SMALLINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("bytes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MEDIUMINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTEGER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BIGINT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FLOAT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" 单精度"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DOUBLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" 双精度"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DECIMAL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("M"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 取决于M和D"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("bytes "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" YYYY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("MM"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("DD\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-838:59:59'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'838:59:59'")]),s._v(" HH:MM:SS 时间或持续时间\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("YEAR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1901")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2155")]),s._v("YYYY年份\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DATETIME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("59")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("59")]),s._v(" YYYY"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("MM"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("DD HH:MM:SS混合日期和时间\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TIMESTAMP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1970")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("00")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2038")]),s._v(" 结束时间是maxint秒"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("到"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2038")]),s._v("年 YYYYMMDD HHMMSS 时间戳\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHAR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("255")]),s._v(" 定长字符串\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65535")]),s._v(" 变长字符串\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BLOB")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TEXT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65535")]),s._v(" 二进制形式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("文本数据\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MEDIUMBLOB")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TEXT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LONGBLOB")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TEXT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TINYBLOB")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TEXT")]),s._v("\n\n以及其他数据类型\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("blockquote",[a("p",[s._v("msg: CHAR和VARCHAR的区别是?")])]),s._v(" "),a("ul",[a("li",[s._v("CHAR是固定长度(不论存储什么占用固定字节), VARCHAR是可变长度(占用实际字节空间加上长度符号位)")]),s._v(" "),a("li",[s._v("存储上限不一样: 255 和 65535")]),s._v(" "),a("li",[s._v("CAHR会截断尾部的空格, 适合存储较短, 长度固定的字符串, 例如用户密码的MD5值")])]),s._v(" "),a("blockquote",[a("p",[s._v("msg: 字符串类型可以是什么?")])]),s._v(" "),a("p",[s._v("SET, BLOB, ENUM, CHAR, VARCHAR, TEXT")]),s._v(" "),a("blockquote",[a("p",[s._v("BLOB 和 TEXT的区别是什么?")])]),s._v(" "),a("ul",[a("li",[s._v("BLOB是一个二进制对象, 可以容纳可变数量的数据, 用于保存二进制数据")]),s._v(" "),a("li",[s._v("TEXT是一个不区分大小写的BLOB, 用于保存字符串数据")])]),s._v(" "),a("h2",{attrs:{id:"四-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-索引"}},[s._v("#")]),s._v(" 四. 索引")]),s._v(" "),a("blockquote",[a("p",[s._v("msg: 说说你对索引的理解?")]),s._v(" "),a("p",[s._v("为什么索引底层要用B+树, 为什么不用hash, B树?")]),s._v(" "),a("p",[s._v("聚簇索引和非聚簇索引的区别? 叶子节点存放的是数据还是数据的内存地址?")]),s._v(" "),a("p",[s._v("InnoDB引擎中的索引策略了解过吗?")]),s._v(" "),a("p",[s._v("创建索引的方式有哪些?")]),s._v(" "),a("p",[s._v("使用索引需要注意什么地方?")])]),s._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("索引本质上是一种数据结构, 可以帮助MySQL高效获取数据;")]),s._v(" "),a("ul",[a("li",[s._v("为了加快某一列的数据查找, 我们可以维护一个搜索树, 树的每个节点存放键值以及指向该行数据的索引, 我们可以通过树的特性快速查找到该行数据")]),s._v(" "),a("li",[s._v("索引本身也很大, 一般以文件形式存储在磁盘上")]),s._v(" "),a("li",[s._v("一般索引都是B+树结构(包括聚簇索引,次要索引,覆盖索引,前缀索引,唯一索引)")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 索引基本语法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("indexname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("column")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 创建索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 如果是CHAR, VARCHAR类型, length可以小于数字段实际长度, 而BLOB和TEXT必须指定长度")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALTER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ADD")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("indexname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("columnn"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 修改")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DROP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("indexname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 删除")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 小知识: 大数据表删除时可以先删索引, 再删数据, 再创建索引")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INDEX")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\\G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看索引信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- ALTER TABLE <table>命令详细使用 ADD PRIMARY KEY (<column>)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- ADD UNIQUE/INDEX/FULLTEXT <indexname> (<column>); 唯一索引,普通索引,全文索引, 可以多个column创建联合索引")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"索引优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引优缺点"}},[s._v("#")]),s._v(" 索引优缺点")]),s._v(" "),a("ul",[a("li",[s._v("提高数据检索效率, 降低IO, 降低排序成本")]),s._v(" "),a("li",[s._v("索引也是一张表, 需要占用硬盘/内存")]),s._v(" "),a("li",[s._v("虽然提高了查询速度, 但是修改一些数据需要同步到索引文件, 降低了增删改效率")]),s._v(" "),a("li",[s._v("对于频繁更新, 重复内容, 非常小的表, 索引没啥用")])]),s._v(" "),a("h3",{attrs:{id:"mysql索引分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引分类"}},[s._v("#")]),s._v(" MySQL索引分类")]),s._v(" "),a("h4",{attrs:{id:"数据结构角度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构角度"}},[s._v("#")]),s._v(" 数据结构角度")]),s._v(" "),a("p",[s._v("B+树索引, Hash索引, FullText全文索引, R-Tree索引")]),s._v(" "),a("h4",{attrs:{id:"物理存储角度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#物理存储角度"}},[s._v("#")]),s._v(" 物理存储角度")]),s._v(" "),a("p",[s._v("聚簇索引和非聚簇索引(辅助索引,次要索引)")]),s._v(" "),a("h4",{attrs:{id:"逻辑角度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑角度"}},[s._v("#")]),s._v(" 逻辑角度")]),s._v(" "),a("ul",[a("li",[s._v("主键索引: 特殊的索引, 不允许空值")]),s._v(" "),a("li",[s._v("普通索引/单列索引/二级索引 "),a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2020/01/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("二级索引分析"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("联合索引/复合索引/多列索引: 多个字段, 遵循最左匹配原则")]),s._v(" "),a("li",[s._v("唯一索引")]),s._v(" "),a("li",[s._v("空间索引: 对空间数据类型建立的索引, 必须非空, 必须MyISAM")])]),s._v(" "),a("h3",{attrs:{id:"mysql索引结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql索引结构"}},[s._v("#")]),s._v(" MySQL索引结构")]),s._v(" "),a("p",[s._v("首先索引是在存储引擎层实现的, 不是所有的存储引擎都支持某些索引类型, 即便支持其实现和行为也可能有所差别")]),s._v(" "),a("h4",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[s._v("#")]),s._v(" 前置知识")]),s._v(" "),a("ol",[a("li",[s._v("磁盘存储是以扇区为单位(如:512bytes, 无法更改)")]),s._v(" "),a("li",[s._v("文件系统以 块(IO Block) 为单位进行管理, 一般为4K(连续的扇区, 可设置)\n"),a("ul",[a("li",[s._v("所以即便创建一个文件只有少量数据, 也会占用 4K")])])]),s._v(" "),a("li",[s._v("磁盘预读以及局部性原理\n"),a("ul",[a("li",[s._v("被查询过的数据可能很快被再次查询")]),s._v(" "),a("li",[s._v("程序与数据往往有聚集的倾向, 一段时间内可能只访问一部分的数据")]),s._v(" "),a("li",[s._v("磁盘预读是基于上述两点, 一次读取一页(数个块)到内存中(一次读取视为一次IO操作)")]),s._v(" "),a("li",[s._v("InnoDB中一次读取的页为 16k")])])]),s._v(" "),a("li",[s._v("内存操作是以页(page)为单位, 一般为4k")])]),s._v(" "),a("h3",{attrs:{id:"b-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-索引"}},[s._v("#")]),s._v(" B+索引")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/09/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("B+树并发控制机制的前世今生"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/11/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("敢问路在何方~论B+树索引的演进方向(上)"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("MyISAM和InnoDB存储引擎均使用B+树实现")]),s._v(" "),a("p",[s._v("二叉树: 常用的数据结构")]),s._v(" "),a("p",[s._v("BST二叉查找树: 通过保证左子树所有节点小于根节点, 右子树所有节点大于根节点, 达到Ologn的最好查找效率, 但是可能会退化成链表O(n)效率")]),s._v(" "),a("p",[s._v("AVL树: 自平衡二叉查找树, 借助多次旋转实现树平衡; 追求完全平衡, 插入和删除旋转次数较多")]),s._v(" "),a("p",[a("strong",[s._v("红黑树")]),s._v(": 不追求完全平衡+变色, 从而降低旋转次数(插入最多2次, 删除3次), 总体性能高于AVL")]),s._v(" "),a("p",[s._v("以上都有深度过深问题")]),s._v(" "),a("p",[a("strong",[s._v("B-树")]),s._v(": 平衡多路查找树,M阶B树每个节点最多M个孩子, 可存储ceil(m/2)-1到m-1个关键字, 使树的结构更加扁平, 减少了IO次数")]),s._v(" "),a("p",[a("strong",[s._v("B+树")]),s._v(": 非叶子节点不再存放数据, 所有数据按照顺序存放在同一层叶子节点; 每个节点可以存入更多关键字(索引字段字节尽量小); 所有叶子节点之间通过双向指针链接, 优化了范围查找/顺序查找的效率")]),s._v(" "),a("p",[a("strong",[s._v("树的分裂")]),s._v(": B树分裂将原节点数据分布到(原节点,父亲,兄弟节点),可能导致高度增加; B+树分裂是分配原节点一半的数据到新增的节点中; B*树分裂是通过指针找到兄弟节点分摊,等兄弟节点和自己都满,创建新节点均摊1/3数据")]),s._v(" "),a("h4",{attrs:{id:"myisam主键索引与辅助索引的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myisam主键索引与辅助索引的结构"}},[s._v("#")]),s._v(" MyISAM主键索引与辅助索引的结构")]),s._v(" "),a("p",[s._v("MyISAM中数据文件与索引文件是分离的(非聚簇索引), 索引文件中的B+树叶子节点存放的是数据记录的地址(数据物理地址的偏移量)")]),s._v(" "),a("p",[a("strong",[s._v("查找流程:")]),s._v(" 从索引文件的根节点开始一直到对应叶子节点进行读取, 然后根据文件指针读取目标数据")]),s._v(" "),a("h4",{attrs:{id:"innodb主键索引与辅助索引结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb主键索引与辅助索引结构"}},[s._v("#")]),s._v(" InnoDB主键索引与辅助索引结构")]),s._v(" "),a("p",[s._v("InnoDB索引结构的叶子节点就是实际的数据记录(主键索引), 而辅助索引的叶子节点存储的是主键, 显然主键是必须的(若不指定, MySQL会自动创建隐式索引6字节整型ROWID)")]),s._v(" "),a("p",[a("strong",[s._v("主键选择")]),s._v(": 推荐使用代理主键(业务无关, 更易于维护)")]),s._v(" "),a("p",[a("strong",[s._v("回表")]),s._v(": 辅助索引先查找到主键, 再根据主键索引查找到目标数据")]),s._v(" "),a("blockquote",[a("p",[s._v("msg: 为什么用自增整型而不是用UUID作为主键?")])]),s._v(" "),a("ul",[a("li",[s._v("UUID是字符串, 消耗更多存储空间, 同时整型equals比字符串更快")]),s._v(" "),a("li",[s._v("自增的主键索引在磁盘中连续存储, 而UUID是随机生成, 可能导致数据结构的重构, 页分裂等")])]),s._v(" "),a("blockquote",[a("p",[s._v("msg: 为什么非主键索引结构叶子节点存储主键")])]),s._v(" "),a("p",[s._v("保证数据一致性, 节省存储空间; 一些场景下的更新, 可以避免索引文件的修改")]),s._v(" "),a("blockquote",[a("p",[s._v("msg:")]),s._v(" "),a("p",[s._v("为什么用B+树, 不用B树? 为什么不用Hash?")]),s._v(" "),a("p",[s._v("为什么建议自增列作为主键?")])]),s._v(" "),a("ol",[a("li",[s._v("首先主键索引底层实现为B+树, 数据都存放在叶子节点, 叶子节点则是顺序存放的")]),s._v(" "),a("li",[s._v("一个叶子节点作为一页存放, 插入数据过程中, 若该页数据大小超过阈值, 则会开辟一个新的页")]),s._v(" "),a("li",[s._v("如果是自增的主键, 只需要在后续位置开辟新的页即可")]),s._v(" "),a("li",[s._v("如果是随机的主键, 可能需要在中间某个位置新维护一页, 需要进行数据移动(增加了额外开销), 甚至导致碎片空间(索引结构不够紧凑, 后续需要OPTIMIZE TABLE重建表)")])]),s._v(" "),a("h4",{attrs:{id:"页分裂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页分裂"}},[s._v("#")]),s._v(" 页分裂")]),s._v(" "),a("p",[s._v("简单而言, 自增主键会使得添加数据的时候其他数据不用动, 而不规则的数据会导致改变之前的数据结构, 从而导致页分裂: 降低插入效率, 导致碎片空间(需要页合并)")]),s._v(" "),a("h4",{attrs:{id:"覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[s._v("#")]),s._v(" 覆盖索引")]),s._v(" "),a("p",[s._v("覆盖索引, 或索引覆盖, 也即平时所说的不需要回表操作")]),s._v(" "),a("ul",[a("li",[s._v("查询的数据只用从索引中就可以取得, 不需要读数据行")]),s._v(" "),a("li",[a("strong",[s._v("判断标准")]),s._v(": 使用explain, 输出的extra列显示为using index")])]),s._v(" "),a("h4",{attrs:{id:"索引下推-谓词下推-icp-index-condition-pushdown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引下推-谓词下推-icp-index-condition-pushdown"}},[s._v("#")]),s._v(" 索引下推 / 谓词下推 ICP (index condition pushdown)")]),s._v(" "),a("p",[s._v("MySQL5.6推出, 是在非主键索引(且是联合索引)上的优化 "),a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2015/03/05/",target:"_blank",rel:"noopener noreferrer"}},[s._v("进一步了解ICP"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("不使用ICP: 只通过最左索引查出数据返回MySQL服务器, 再判断其他条件")]),s._v(" "),a("li",[s._v("使用ICP: 直接判断所有联合索引的条件, 可能返回的数据都减少了, 再判断其他条件\n"),a("ul",[a("li",[s._v("减少了数据复制, 减少了回表次数, 如果加锁,可以减少记录锁的个数")]),s._v(" "),a("li",[s._v("如果是主键索引, 或者谓词不能有效过滤, 效果较差; 不支持多表update和delete;")])])]),s._v(" "),a("li",[a("strong",[s._v("判断标准")]),s._v(": explain后, extra结果为using index condition")])]),s._v(" "),a("h4",{attrs:{id:"索引合并-index-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引合并-index-merge"}},[s._v("#")]),s._v(" 索引合并 (index merge)")]),s._v(" "),a("p",[s._v("查询条件中涉及多个索引字段的 and 或 or, 可能会使用到index merge, 先通过多个索引各自查询结果, 再进行合并 (MySQL5.1开始支持)")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/digdeep/p/4975977.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("索引合并的进一步参考资料"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"最左匹配-最左前缀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最左匹配-最左前缀"}},[s._v("#")]),s._v(" 最左匹配, 最左前缀")]),s._v(" "),a("ul",[a("li",[s._v("联合索引中只有存在最左的索引列作为查询条件才能生效,")]),s._v(" "),a("li",[s._v("最左前缀匹配原则, 一直向右匹配直到遇到范围查询(>, <, between, like)就停止匹配")]),s._v(" "),a("li",[s._v("比如a=1 and b=2 and c>3 and d=4 如果建立(a,b,c,d)顺序的索引, d是用不到索引的;  如果建立(a,b,d,c)的索引则都可以用到")])]),s._v(" "),a("h3",{attrs:{id:"索引失效-建索引的原则-索引优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引失效-建索引的原则-索引优化"}},[s._v("#")]),s._v(" 索引失效 / 建索引的原则 / 索引优化")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/03/03/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL常见SQL错误用法"),a("OutboundLink")],1)]),s._v(" "),a("ol",[a("li",[s._v("组合索引左边索引可以使用范围查询, 但会导致后续右边索引失效")]),s._v(" "),a("li",[s._v("不要让索引参与任何计算, 函数, 类型转换操作(字符类型未加单引号导致隐式转换)")]),s._v(" "),a("li",[s._v("尽量使用主键索引(避免回表)")]),s._v(" "),a("li",[s._v("is null 和 is not null 无法使用索引")]),s._v(" "),a("li",[s._v("like语句以%开头")]),s._v(" "),a("li",[s._v("选用区分度高的列, 一般保持比例 "),a("code",[s._v("count(distinct col)/count(*)>0.1")])]),s._v(" "),a("li",[s._v("单表索引数量控制5个以内")])]),s._v(" "),a("h4",{attrs:{id:"哪些情况需要创建索引-不需要创建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些情况需要创建索引-不需要创建索引"}},[s._v("#")]),s._v(" 哪些情况需要创建索引/ 不需要创建索引")]),s._v(" "),a("p",[s._v("需要")]),s._v(" "),a("ol",[a("li",[s._v("频繁作为查询条件的字段")]),s._v(" "),a("li",[s._v("查询中与其他表关联的字段 , 外键关系建立索引")]),s._v(" "),a("li",[s._v("单键/组合索引的选择问题 , 高并发下倾向创建组合索引")]),s._v(" "),a("li",[s._v("查询中排序的字段 , 排序字段通过索引访问大幅提高排序速度")]),s._v(" "),a("li",[s._v("查询中统计或分组字段")])]),s._v(" "),a("p",[s._v("不需要")]),s._v(" "),a("ol",[a("li",[s._v("表记录太少")]),s._v(" "),a("li",[s._v("经常增删改的表")]),s._v(" "),a("li",[s._v("没有区分度的字段")]),s._v(" "),a("li",[s._v("频繁更新的字段不适合创建索引 (会加重IO负担)")]),s._v(" "),a("li",[s._v("where条件里用不到的字段")])]),s._v(" "),a("h4",{attrs:{id:"索引的一般性建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的一般性建议"}},[s._v("#")]),s._v(" 索引的一般性建议")]),s._v(" "),a("ul",[a("li",[s._v("对于单键索引, 尽量选择针对当前query过滤性更好的索引")]),s._v(" "),a("li",[s._v("在选择组合索引的时候, 当前Query中过滤性最好的字段在索引字段顺序中, 位置越靠前越好。")]),s._v(" "),a("li",[s._v("在选择组合索引的时候, 尽量选择可以能够包含当前query中的where字句中更多字段的索引")]),s._v(" "),a("li",[s._v("尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的")]),s._v(" "),a("li",[s._v("少用Hint强制索引")])]),s._v(" "),a("h4",{attrs:{id:"索引监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引监控"}},[s._v("#")]),s._v(" 索引监控")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Handler_read%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Handler_read_key 走索引次数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"混个眼熟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混个眼熟"}},[s._v("#")]),s._v(" 混个眼熟")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2019/03/07/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL8.0 Descending Index"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2019/05/06/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL8.0 Skip Scan Range"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("Hash索引, Memory存储引擎支持\n"),a("ul",[a("li",[s._v("通过计算hashcode(直接定址法, 平方取中, 折叠法, 取余, 随机数法), 将记录转换成定长的Hash值, 和行数据指针一起存储到表中; 若值相同则下拉链表;")]),s._v(" "),a("li",[s._v("不能排序, 不能范围查询, hash冲突;")]),s._v(" "),a("li",[s._v("使用CRC32循环冗余校验Cyclic Redundancy Check")]),s._v(" "),a("li",[s._v("innodb存储引擎支持自适应hash")])])]),s._v(" "),a("li",[s._v("FullText全文索引 "),a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2015/10/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("全文索引进一步了解"),a("OutboundLink")],1),s._v(" "),a("ul",[a("li",[s._v("用于全文索引, MyISAM提供, InnoDB自5.6版本开始提供")]),s._v(" "),a("li",[s._v("用于替代效率低下的like模糊匹配, 可以多字段组合一次性全模糊匹配多个字段")])])]),s._v(" "),a("li",[s._v("R树空间索引, 特殊索引, 用于地理空间数据类型")]),s._v(" "),a("li",[s._v("OLTP: 在线事务, 很短时间内返回结果")]),s._v(" "),a("li",[s._v("OLAP: 对历史数据进行分析 --- 数据仓库")])]),s._v(" "),a("h2",{attrs:{id:"五-mysql查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-mysql查询"}},[s._v("#")]),s._v(" 五. MySQL查询")]),s._v(" "),a("blockquote",[a("p",[s._v("msg: count(*) 和 count(1) 的区别?")])]),s._v(" "),a("blockquote",[a("p",[s._v("msg: MySQL中in和exist的区别?")])]),s._v(" "),a("ul",[a("li",[s._v("exists exists对外表用loop逐条查询 , 每次查询都会查看exists的条件语句 , 当exists里的条件语句能够返回记录行时 (无论记录行是的多少 , 只要能返回)  , 条件就为真 , 返回当前loop到的这条记录；反之 , 如果exists里的条件语句不能返回记录行 , 则当前loop到的这条记录被丢弃 , exists的条件就像一个bool条件 , 当能返回结果集则为true , 不能返回结果集则为false")]),s._v(" "),a("li",[s._v("in in查询相当于多个or条件的叠加")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("如果查询的两个表大小相当 , 那么用in和exists差别不大")]),s._v("。")]),s._v(" "),a("p",[s._v("如果两个表中一个较小 , 一个是大表 , 则子查询表大的用exists , 子查询表小的用in")]),s._v(" "),a("blockquote",[a("p",[s._v("msg: UNION和UNION ALL的区别?")])]),s._v(" "),a("p",[s._v("UNION和UNION ALL都是将两个结果集合并为一个 , "),a("strong",[s._v("两个要联合的SQL语句 字段个数必须一样 , 而且字段类型要“相容”(一致")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("UNION在进行表连接后会筛选掉重复的数据记录 (效率较低)  , 而UNION ALL则不会去掉重复的数据记录")])]),s._v(" "),a("li",[a("p",[s._v("UNION会按照字段的顺序进行排序 , 而UNION ALL只是简单的将两个结果合并就返回")])])]),s._v(" "),a("h4",{attrs:{id:"sql执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql执行顺序"}},[s._v("#")]),s._v(" SQL执行顺序")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 手写")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("select_list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("left_table"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("join_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("right_table"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("join_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("where_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group_by_list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("having_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("order_by_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("limit_number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 机器读取")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("left_table"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("join_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("join_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("right_table"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("where_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group_by_list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("HAVING")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("having_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("select_list"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("order_by_condition"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("limit_number"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("总结")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gf3t8jyy81j30s2083wg2.jpg",alt:"sql-parse"}})]),s._v(" "),a("blockquote",[a("p",[s._v("msg: mysql 的内连接、左连接、右连接有什么区别?")]),s._v(" "),a("p",[s._v("什么是内连接、外连接、交叉连接、笛卡尔积?")])]),s._v(" "),a("h3",{attrs:{id:"join图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join图"}},[s._v("#")]),s._v(" JOIN图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gf3t8novxpj30qu0l4wi7.jpg",alt:"sql-joins"}})]),s._v(" "),a("h4",{attrs:{id:"join原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join原理"}},[s._v("#")]),s._v(" JOIN原理")]),s._v(" "),a("ul",[a("li",[s._v("Simple Nested-Loop Join 简单嵌套连接, 非常简单\n"),a("ul",[a("li",[s._v("从驱动表中顺序取出数据一个个匹配被动表的所有列, 匹配完毕后合并数据")])])]),s._v(" "),a("li",[s._v("Index Nested-Loop Join 索引嵌套连接\n"),a("ul",[a("li",[s._v("从驱动表取出的数据会走索引查找, 主键索引最佳")])])]),s._v(" "),a("li",[s._v("Block Nested-Loop Join\n"),a("ul",[a("li",[s._v("在没有索引的情况下, 优先使用Block Nest-Loop Join")]),s._v(" "),a("li",[s._v("额外使用一个join buffer: 将驱动表涉及join的相关列缓存进join buffer, 批量地与被动表比较, 这样减少了被动表的访问频率")])])])]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2019/11/02/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL 哈希连接实现介绍"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"六-mysql事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-mysql事务"}},[s._v("#")]),s._v(" 六. MySQL事务")]),s._v(" "),a("blockquote",[a("p",[s._v("msg:")]),s._v(" "),a("p",[s._v("事务隔离级别有? 默认的隔离级别?")]),s._v(" "),a("p",[s._v("幻读脏读不可重复读?")]),s._v(" "),a("p",[s._v("MySQL事务的ACID四大特性以及实现原理?")]),s._v(" "),a("p",[s._v("MVCC原理?")])]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2015/12/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB 事务子系统介绍"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/12/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB 事务系统"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("strong",[s._v("事务概述")]),s._v(": 事务是一组SQL语句组成的逻辑处理单元, 具有ACID四大特性")]),s._v(" "),a("ul",[a("li",[s._v("Atomic原子性: 要么全部成功要么全部失败, 不会有中间状态 (undo log)")]),s._v(" "),a("li",[s._v("Consistency一致性: 保证数据结构不被破坏 (doublewrite buffer和crash recovery) ; 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束, 触发器, 级联回滚等")]),s._v(" "),a("li",[s._v("Isolation隔离性: 事务之间不互相干扰, 不同时对同一目标数据做修改 (通过mvcc, 锁)")]),s._v(" "),a("li",[s._v("Durability持久性: 事务结果持久化至数据库 (redo log, WAL预写日志)")])]),s._v(" "),a("h4",{attrs:{id:"并发事务带来的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发事务带来的问题"}},[s._v("#")]),s._v(" 并发事务带来的问题")]),s._v(" "),a("ul",[a("li",[s._v("更新丢失: 两个事务处理同一目标数据, 导致数据问题")]),s._v(" "),a("li",[s._v("脏读: (可以读到其他未提交数据) 事务A读取到了事务B(未提交)的数据")]),s._v(" "),a("li",[s._v("不可重复读: (两次相同查询不同结果) 事务B提交修改的数据, 导致事务A读取的数据前后不一致, 主要针对UPDATE, DELETE")]),s._v(" "),a("li",[s._v("幻读: (之前不存在的数据突然存在了) 事务B提交插入了一些新数据行, 导致事务A范围查询中读到的记录数前后不一致;  或者说事务A先前查询没有这条数据, 但是后续插入的时候报错数据重复了; 主要针对INSERT")])]),s._v(" "),a("h4",{attrs:{id:"并发解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发解决办法"}},[s._v("#")]),s._v(" 并发解决办法")]),s._v(" "),a("ul",[a("li",[s._v("更新丢失: 很明显需要由应用控制")]),s._v(" "),a("li",[s._v("脏读, 不可重复读, 幻读: 由数据库提供的隔离机制解决\n"),a("ul",[a("li",[s._v("加锁: 对数据进行加锁, 阻止其他事务对其进行修改")]),s._v(" "),a("li",[s._v("MVCC: 多版本并发控制, 不需要加锁, 通过一定机制生成数据快照, 为事务提供一致性读取的能力")])])])]),s._v(" "),a("h3",{attrs:{id:"事务隔离级别及其实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别及其实现"}},[s._v("#")]),s._v(" 事务隔离级别及其实现")]),s._v(" "),a("ul",[a("li",[s._v("READ-UNCOMMITED: 一个事务可以读到另一个未提交的数据")]),s._v(" "),a("li",[s._v("READ-COMMITED: 可以读到提交的数据, 没有脏读, 是大部分数据库默认的隔离级别")]),s._v(" "),a("li",[s._v("REPEATABLE-READ: 同一个事务重复读取的数据保证一致, 解决了不可重复读, 可能出现幻读, 是InnoDB默认的隔离级别\n"),a("ul",[a("li",[s._v("**注意,sql标准中定义的RR是存在幻读的,但实际上mysql的RR级别不存在幻读 **")])])]),s._v(" "),a("li",[s._v("SERIALIZABLE: 串行化")]),s._v(" "),a("li",[s._v("事务隔离机制是实现: 基于锁和MVCC")])]),s._v(" "),a("p",[s._v("考虑业务需求+并发需求选择合适的隔离级别, 一般用默认的即可")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'tx_isolation'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看当前数据库的隔离级别")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@tx_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" @"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@transaction_isolation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- mysql 8.0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"mvcc多版本并发控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc多版本并发控制"}},[s._v("#")]),s._v(" MVCC多版本并发控制")]),s._v(" "),a("p",[a("strong",[s._v("概述")]),s._v(": 通过版本管理实现无锁并发访问")]),s._v(" "),a("ul",[a("li",[s._v("这里只讲述InnoDB中的实现: 通过保存快照来实现一致的查询结果\n"),a("ul",[a("li",[s._v("即便有读写冲突, 也能实现不加锁非阻塞并发读, 提高了数据库并发性能")]),s._v(" "),a("li",[s._v("实现了RC和RR隔离级别, 解决了脏读和不可重复读")])])]),s._v(" "),a("li",[a("strong",[s._v("当前读")]),s._v(": 读到当前数据(最新版本数据)\n"),a("ul",[a("li",[s._v("select lock in share mode; select for update; update")]),s._v(" "),a("li",[s._v("; delete操作")])])]),s._v(" "),a("li",[a("strong",[s._v("快照读")]),s._v(": 读到历史快照/版本数据\n"),a("ul",[a("li",[s._v("不加锁的select就是快照读, 非阻塞, 读取的历史版本在undolog中")])])]),s._v(" "),a("li",[a("strong",[s._v("隐式字段")]),s._v(":\n"),a("ul",[a("li",[s._v("回滚指针 : 7字节, 指向这条记录的上一个(pre)旧版本")]),s._v(" "),a("li",[s._v("创建/更新事务id : 6字节, "),a("strong",[s._v("insert和update操作")]),s._v("会把字段值设置为当前操作事务id")]),s._v(" "),a("li",[s._v("删除事务头标记 : "),a("strong",[s._v("delete操作")]),s._v("时会将该标记置为true")]),s._v(" "),a("li",[s._v("另: 系统事务id: 由InnoDB维护的递增版本号, 开启事务先分配再递增")])])]),s._v(" "),a("li",[a("strong",[s._v("undo log")]),s._v(": 回滚日志, 在执行增删改操作时产生\n"),a("ul",[a("li",[s._v("insert操作在事务提交前只对当前事务可见, 产生的日志在事务提交后可以直接删除")]),s._v(" "),a("li",[s._v("而update和delete需要维护多版本信息, 统一归类为update_undo")])])]),s._v(" "),a("li",[a("strong",[s._v("readview")]),s._v(": 绑定当前session, 可以认为是当时的数据库全局事务快照;")])]),s._v(" "),a("h3",{attrs:{id:"undo-log-保证事务的原子性-mvcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undo-log-保证事务的原子性-mvcc"}},[s._v("#")]),s._v(" undo log, 保证事务的原子性, MVCC")]),s._v(" "),a("p",[a("strong",[s._v("概述")]),s._v(": MVCC重要组成部分, 保证了事务回滚, 每当产生记录变更就会产生undo记录, 存储了老版本数据; 当一个旧事务需要读取数据时, 需要顺着undo链找到满足其可见性的记录")]),s._v(" "),a("p",[a("strong",[s._v("undo log操作流程 / 事务流程")])]),s._v(" "),a("ul",[a("li",[s._v("事务开启时, 会在undo log结构中分配一个回滚段;")]),s._v(" "),a("li",[s._v("事务开始, 执行insert以及update/delete语句会分开记录(区分insert_undo和update_undo)")]),s._v(" "),a("li",[s._v("开始一条条写入undo_log, 构建回滚指针\n"),a("ul",[a("li",[s._v("update和delete直接将旧数据放入undo_log, 生成的新数据持有当前事务id以及回滚指针")]),s._v(" "),a("li",[s._v("如果是DML语句, 无需判断可见性, 而是单纯的发现事务锁冲突, 直接堵塞操作")])])]),s._v(" "),a("li",[s._v("事务提交: 为了支持XA, 分为prepare阶段和commit阶段\n"),a("ul",[a("li",[s._v("prepare阶段: 将事务状态设置为prepare")]),s._v(" "),a("li",[s._v("commit: 将事务状态设置为commit, 判断哪些回滚段加入purge, 然后清理undo")])])]),s._v(" "),a("li",[s._v("事务回滚: 读取老版本记录, 逆向操作")]),s._v(" "),a("li",[s._v("多版本控制: 也就是select语句")])]),s._v(" "),a("h4",{attrs:{id:"readview-可见性判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readview-可见性判断"}},[s._v("#")]),s._v(" readview, 可见性判断")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("readview包括  1.当前事务id, 2.活跃事务id的有序数组, 3.最小未分配事务id, 4.活跃事务id数组最小值\n===============================================================\n已提交事务 |(最小事务id) 未提交或已提交事务 | (尚未分配最low事务id) 未开始事务\n(肯定可见的)\t\t\t\t(两种情况)\t\t\t\t\t\t(不可见的)\n==========================||===================================\n两种情况: 这条undo的事务id是否在活跃事务id数组中?\na.在活跃事务id数组中, 说明未提交, 只有这个id等于当前事务id才可见, 否则不可见\nb.不在活跃事务id数组中, 说明已经提交的, 可见\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("此外对于readview的生成时间:")]),s._v(" "),a("ul",[a("li",[s._v("RC隔离级别情况下, 每次select(只有select创建)都要生成readview")]),s._v(" "),a("li",[s._v("RR级别只有开启事务后的第一次select生成readview, 该事务后续查询沿用此readview")]),s._v(" "),a("li",[s._v("RU(读已提交)情况下, 直接读最新的, 根本不判断可见性, 不去查看老版本")]),s._v(" "),a("li",[s._v("serializable序列化下, 直接读写锁, 有修改和查询互相阻塞")])]),s._v(" "),a("h4",{attrs:{id:"redo-log-保证事务的持久性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redo-log-保证事务的持久性"}},[s._v("#")]),s._v(" redo log, 保证事务的持久性")]),s._v(" "),a("p",[s._v("保证WAL(write-ahead log): 在持久化数据文件前, 保证日志先落盘; 日志落盘后即可给用户返回操作成功, 不需要保证数据当时落盘")]),s._v(" "),a("p",[s._v("重启时能够恢复")]),s._v(" "),a("ul",[a("li",[s._v("流程: 先写到内存, 然后fsync写到磁盘")]),s._v(" "),a("li",[s._v("优势:\n"),a("ul",[a("li",[s._v("随机IO转变为顺序IO, 日志的写入开销小")]),s._v(" "),a("li",[s._v("即使奔溃也可恢复这部分数据")]),s._v(" "),a("li",[s._v("非临时表的undo log也可以恢复, 等于可以恢复未提交的事务")])])]),s._v(" "),a("li",[s._v("LSN(log sequence number) 用于记录日志序号")]),s._v(" "),a("li",[s._v("innodb_flush_log_at_trx_commit配置项, 显然对性能的影响是随着持久化程度的增加而增加的. 通常我们建议在日常场景将该值设置为1, 但在系统高峰期临时修改成2以应对大负载")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://mysql.taobao.org/monthly/pic/2015-05-01/5.png",alt:"持久化程度"}})]),s._v(" "),a("blockquote",[a("p",[s._v("msg: mysql共有多少种日志")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("错误日志, 查询日志, 慢查询日志, 二进制日志, 中继日志, 事务日志\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"innodb崩溃恢复流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb崩溃恢复流程"}},[s._v("#")]),s._v(" InnoDB崩溃恢复流程")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2015/06/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("崩溃恢复进一步了解资料"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("初始化崩溃恢复 >> 恢复truncate >> redo崩溃恢复 >> 初始化事务子系统\n>> 应用redo日志 >> 完成崩溃恢复 >> 无效数据清理&事务回滚(回滚不处于prepare的事务)\n>> binlog XA recover(恢复binlog)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v("msg: XA下数据恢复问题?")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("- 非双1配置存在的问题: \na. 引擎层提交了, 但是binlog没写入, 备库丢数据\nb. 引擎层没有prepare , 但binlog写入了 , 主库丢事务\n- 双1配置下存在的问题: \na. 主库crash时还有binlog没传递到备库,直接提升备库为主库,会导致主备不一致\n--此时老主库必须根据新主库重做才能恢复一致, 如何解决?\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sync_binlog + innodb_flush_log_at_trx_commit 双一配置; (主库比从库多出的都是prepare事务)\n开启semisync(半同步) AFTER_SYNC; 超时时间设置到极大值;\n从库执行relay log消费, 并记录执行结束的日志位点, 然后提升为新主库;\n截断老主库binlog和上面的记录位点保持一致; 重启老主库;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/03/07/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL半同步复制数据安全性分析"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/04/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL半同步复制数据一致性分析"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"事务开启-事务提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务开启-事务提交"}},[s._v("#")]),s._v(" 事务开启 & 事务提交")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 事务开启: ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("work")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启一个事务,会根据sql变为只读或读写事务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("read")]),s._v(" only"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启只读事务(5.6加入,没有事务id,回滚段,全局链表)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("read")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启读写事务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("start")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transaction")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("consistent")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("snapshot")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启事务顺便创建一个readview")]),s._v("\nautocommit "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 不自动提交事务...别用")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 事务提交:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显式开启一个事务,或执行一条非临时表DDL,就会隐式地将上一个事务提交")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显式提交")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"innodb分布式事务支持-xa事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innodb分布式事务支持-xa事务"}},[s._v("#")]),s._v(" InnoDB分布式事务支持: XA事务")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/question/06distributed/distrubuted-transaction/"}},[s._v("分布式事务专题, XA协议, 2PC协议")])],1),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/09/05/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB XA"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2021/01/02/",target:"_blank",rel:"noopener noreferrer"}},[s._v("内部XA事务"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"xa事务发起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xa事务发起"}},[s._v("#")]),s._v(" XA事务发起")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* \nBinlog/Engine XA --- 开启binlog时, MySQL默认使用隐式XA模式\nbinlog prepare + InnoDB prepare + 组提交\n\nEngine/Engine XA --- binlog关闭, 如果事务跨引擎, 就可以在事务引擎间XA, 例如InnoDB和TokuDB(RDS MySQL)\n\nEngine Commit --- binlog关闭, 且只使用了一个事务引擎, 无需进行XA  */")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显式XA")]),s._v("\nxa "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xidname'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- do something ...")]),s._v("\nxa "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xidname'")]),s._v("\nxa "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("prepare")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xidname'")]),s._v("\nxa "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xidname'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h4",{attrs:{id:"mysql内部xa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql内部xa"}},[s._v("#")]),s._v(" MySQL内部XA")]),s._v(" "),a("p",[s._v("单个MySQL实例 + 多个存储引擎实现的内部XA")]),s._v(" "),a("p",[s._v("server层作为事务协调器, 多个存储引擎作为参与者")]),s._v(" "),a("ul",[a("li",[s._v("协调器对象:\n"),a("ul",[a("li",[s._v("如果开启binlog且存在事务引擎, 用binlog记录事务状态")]),s._v(" "),a("li",[s._v("如果关闭binlog且存在多个事务引擎, 用tc_log_mmap内存记录事务状态")]),s._v(" "),a("li",[s._v("其他情况, 则不需要XA")])])]),s._v(" "),a("li",[s._v("二阶段提交过程\n"),a("ul",[a("li",[s._v("prepare: 将undo回滚段设置为prepare, 将redolog刷盘")]),s._v(" "),a("li",[s._v("commit: binlog写入, binlog刷盘, 事务提交")])])])]),s._v(" "),a("p",[s._v("如何保证XA事务中崩溃恢复, 以及组提交优化看这篇 "),a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2020/05/07/",target:"_blank",rel:"noopener noreferrer"}},[s._v("内部 XA 和组提交"),a("OutboundLink")],1)]),s._v(" "),a("h4",{attrs:{id:"临键锁-next-key锁-解决幻读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临键锁-next-key锁-解决幻读"}},[s._v("#")]),s._v(" 临键锁(next-key锁), 解决幻读")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/06/07/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB在RR隔离级别下的幻读问题"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("如果在事务中使用update更新幻读数据, 该数据的事务id会设置成为本事务id, 具有了可见性")]),s._v(" "),a("h2",{attrs:{id:"七-锁机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-锁机制"}},[s._v("#")]),s._v(" 七. 锁机制")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/weixin_39629876/article/details/112776744",target:"_blank",rel:"noopener noreferrer"}},[s._v("入分析解读MySQL锁"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("锁概念: 在并发访问下保护数据一致性所设计的规则, 保证了目标数据在同一时刻只允许一个线程进行操作")]),s._v(" "),a("blockquote",[a("p",[s._v("msg:数据库的乐观锁和悲观锁? MySQL中有哪些锁?")])]),s._v(" "),a("h3",{attrs:{id:"锁的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁的分类"}},[s._v("#")]),s._v(" 锁的分类")]),s._v(" "),a("h4",{attrs:{id:"从数据操作分类-读锁-共享锁-s锁-写锁-排他锁-x锁-意向锁-is锁和ix锁-自增锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从数据操作分类-读锁-共享锁-s锁-写锁-排他锁-x锁-意向锁-is锁和ix锁-自增锁"}},[s._v("#")]),s._v(" 从数据操作分类: 读锁(共享锁, S锁) , 写锁(排他锁, X锁) , 意向锁(IS锁和IX锁), 自增锁")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LOCK")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHARE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("MODE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- S锁, 行锁")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOR")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UPDATE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- X锁, 行锁")]),s._v("\n只有明确指定索引的情况下走行锁"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 索引不明确"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 非索引"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 都会走表锁\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("问题: 在InnoDB引擎中行锁和表锁共存的")]),s._v(" : 如果t1上加了行锁, 其他事务能再加表锁吗?")]),s._v(" "),a("p",[a("strong",[s._v("意向锁是表锁")]),s._v(", 是MySQL自己维护的, 用户无法手动设置")]),s._v(" "),a("p",[a("strong",[s._v("解决: 意向锁")]),s._v(": 当需要给数据加上S锁/X锁的时候, MySQL会先给这张表加上IS锁/IX锁; 所以加锁的时候先判断这个表上的哪种锁, 根据兼容性判断是否可以加锁")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/da08474c065b6c6d98e7194505865d00.png",alt:"XSIXIS兼容性"}})]),s._v(" "),a("h4",{attrs:{id:"从数据粒度分类-表锁-行锁-页面锁-间隙锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从数据粒度分类-表锁-行锁-页面锁-间隙锁"}},[s._v("#")]),s._v(" 从数据粒度分类: 表锁, 行锁, 页面锁, (间隙锁?)")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LOCK")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("tablename"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("READ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 表锁; 锁定后只读")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNLOCK")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 解锁")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"从实现-乐观锁-悲观锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从实现-乐观锁-悲观锁"}},[s._v("#")]),s._v(" 从实现: 乐观锁 , 悲观锁")]),s._v(" "),a("p",[s._v("乐观锁: 乐观认为可以大概率没有冲突, 可以成功数据更新, 所以在访问数据过程中不加锁, 只是通过数据版本号进行判断是否有冲突, 数据库没有实现, 请自己实现;")]),s._v(" "),a("h4",{attrs:{id:"到底锁了什么-innodb中锁的是索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#到底锁了什么-innodb中锁的是索引"}},[s._v("#")]),s._v(" 到底锁了什么 --- InnoDB中锁的是索引")]),s._v(" "),a("ul",[a("li",[s._v("假如一张表没有索引, InnoDB会进行锁表")]),s._v(" "),a("li",[s._v("假如我们对辅助索引加锁, 那么辅助索引所对应的主键索引也会被锁住")]),s._v(" "),a("li",[s._v("主键索引被锁住, 实际上就等于是整条记录都被锁住了")])]),s._v(" "),a("blockquote",[a("p",[s._v("msg: InnoDB行锁是怎么实现的? 间隙锁? 临键锁?")])]),s._v(" "),a("h3",{attrs:{id:"锁的三种模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁的三种模式"}},[s._v("#")]),s._v(" 锁的三种模式")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/48269420",target:"_blank",rel:"noopener noreferrer"}},[s._v("记录所, 间隙锁, 临键锁"),a("OutboundLink")],1)]),s._v(" "),a("ol",[a("li",[s._v("记录锁(Record Lock): 当我们的查询能命中一条记录的时候, 锁住所命中的这一行记录")]),s._v(" "),a("li",[s._v("间隙锁(Gap Lock): (RR级别) 查询没有记录的时候(命中间隙), 会加上间隙锁. 会阻塞插入操作 (目标数据和主键数据区间追加后一个区间);")]),s._v(" "),a("li",[s._v("临键锁(Next-Key Lock): 范围查询中不但命中了记录, 同时包括了间隙, 此时使用临键锁\n"),a("ul",[a("li",[s._v("将数据划分区间, 锁住所有 (查询到数据的区间并追加上后一个区间)")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("msg: 死锁? 写一段可以造成死锁的sql, mysql如何解决死锁?")])]),s._v(" "),a("h3",{attrs:{id:"死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[s._v("#")]),s._v(" 死锁")]),s._v(" "),a("p",[s._v("多个事务等待获取对方已持有但又不释放的资源, 最终引起互相等待的现象")]),s._v(" "),a("p",[s._v("死锁条件: 互斥条件, 持有并等待条件, 不可剥夺条件, 环路等待条件")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOR")]),s._v(" UDPATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOR")]),s._v(" UDPATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BEGIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOR")]),s._v(" UDPATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOR")]),s._v(" UDPATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 两个session同时执行以上语句可能导致死锁")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"死锁的检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁的检测"}},[s._v("#")]),s._v(" 死锁的检测")]),s._v(" "),a("p",[s._v("采用wait-for graph (等待图) 的方式来进行死锁检测:")]),s._v(" "),a("ul",[a("li",[s._v("数据库首先记录两种信息:  1.锁的信息链表;   2.事务的等待链表")]),s._v(" "),a("li",[s._v("wait-for graph算法会根据这两个信息构建一张图, 当图中存在回路则证明存在死锁")]),s._v(" "),a("li",[s._v("检测到死锁后一般将开销小的事务释放锁并回退, 另一个事务获得锁继续执行")]),s._v(" "),a("li",[s._v("InnoDB不能完全检测到的死锁, 需要通过锁超时时间解决(默认50秒) innodb_lock_wait_timeout")])]),s._v(" "),a("p",[s._v("下图中, t1和t2之间存在回路, 证明t1和t2事务之间存在死锁")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/02f3f99a7017c6597e574b13b5df4c63.png",alt:"wait-for graph"}})]),s._v(" "),a("h4",{attrs:{id:"死锁的避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁的避免"}},[s._v("#")]),s._v(" 死锁的避免")]),s._v(" "),a("ul",[a("li",[s._v("减少长事务")]),s._v(" "),a("li",[s._v("避免没有where 条件的sql, 尽量使用索引, 尽量使用等值查询")])]),s._v(" "),a("h4",{attrs:{id:"锁信息查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁信息查询"}},[s._v("#")]),s._v(" 锁信息查询")]),s._v(" "),a("p",[s._v("information_schema数据库中提供了3张表查询事务和锁相关问题, 分别是1.INNODB_TRX(事务); 2.INNODB_LOCKS(事务锁); 3.INNODB_LOCK_WAITS(锁等待);")]),s._v(" "),a("p",[s._v("进阶: "),a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2016/01/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("事务锁进一步资料"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2016/03/10/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL锁问题最佳实践"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/01/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB锁同步机制"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/12/02/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Innodb 锁子系统浅析"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/02/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("常用SQL语句的MDL加锁源码分析"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/05/04/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB行锁分析"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2020/04/02/",target:"_blank",rel:"noopener noreferrer"}},[s._v("InnoDB读写锁实现分析"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"八-mysql调优"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八-mysql调优"}},[s._v("#")]),s._v(" 八. MySQL调优")]),s._v(" "),a("blockquote",[a("p",[s._v("日常工作中你是怎么优化SQL的？")]),s._v(" "),a("p",[s._v("SQL优化的一般步骤是什么 , 怎么看执行计划 (explain)  , 如何理解其中各个字段的含义？")]),s._v(" "),a("p",[s._v("如何写sql能够有效的使用到复合索引？")]),s._v(" "),a("p",[s._v("一条sql执行过长的时间 , 你如何优化 , 从哪些方面入手？")])]),s._v(" "),a("h4",{attrs:{id:"sql语句的优化器-mysql-query-optimizer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql语句的优化器-mysql-query-optimizer"}},[s._v("#")]),s._v(" SQL语句的优化器 - MySQL Query Optimizer")]),s._v(" "),a("ol",[a("li",[s._v("RBO基于规则的优化器:\n"),a("ol",[a("li",[s._v("对sql进行优化, 分析Hint信息, 得出最后的执行计划")])])]),s._v(" "),a("li",[s._v("CBO基于成本的优化器: 根据计算分析系统收集到的统计信息")])]),s._v(" "),a("h4",{attrs:{id:"sql性能下降原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql性能下降原因"}},[s._v("#")]),s._v(" SQL性能下降原因")]),s._v(" "),a("ul",[a("li",[s._v("查询语句写的烂")]),s._v(" "),a("li",[s._v("索引失效 (单值/复合)")]),s._v(" "),a("li",[s._v("关联查询太多 join (设计缺陷或不得已的需求)")]),s._v(" "),a("li",[s._v("服务器调优及各个参数设置 (缓冲, 线程数等)")])]),s._v(" "),a("h3",{attrs:{id:"mysql常见性能分析手段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql常见性能分析手段"}},[s._v("#")]),s._v(" MySQL常见性能分析手段")]),s._v(" "),a("ul",[a("li",[s._v("慢查询日志")]),s._v(" "),a("li",[s._v("explain执行计划分析")]),s._v(" "),a("li",[s._v("profiling分析")]),s._v(" "),a("li",[s._v("show命令查询系统状态及系统变量")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显示状态信息 (扩展show status like ‘XXX’) ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显示系统变量 (扩展show variables like ‘XXX’) ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("innodb")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显示InnoDB存储引擎的状态")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" processlist "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看当前SQL执行 , 包括执行状态、是否锁表等")]),s._v("\nmysqladmin variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("p password "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显示系统变量")]),s._v("\nmysqladmin "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extended")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("status")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("p password "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 显示状态信息")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"explain执行计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain执行计划"}},[s._v("#")]),s._v(" explain执行计划")]),s._v(" "),a("p",[s._v("可以模拟优化器执行sql查询语句, 从而知道MySQL是如何处理你的sql语句的, 可以看到:")]),s._v(" "),a("ul",[a("li",[s._v("表的读取顺序")]),s._v(" "),a("li",[s._v("数据读取操作的操作类型")]),s._v(" "),a("li",[s._v("哪些索引可以使用")]),s._v(" "),a("li",[s._v("哪些索引被实际使用")]),s._v(" "),a("li",[s._v("表之间的引用")]),s._v(" "),a("li",[s._v("每张表有多少行被优化器查询")])]),s._v(" "),a("h4",{attrs:{id:"explain各字段解释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain各字段解释"}},[s._v("#")]),s._v(" explain各字段解释")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("id")]),s._v(": select 查询的序列号, 包含一组数字, 表示执行顺序")]),s._v(" "),a("ul",[a("li",[s._v("id 相同, 执行顺序从上往下")]),s._v(" "),a("li",[s._v("id 全不同, 如果是子查询, id 的序号会递增, id 值越大优先级越高, 越先被执行")]),s._v(" "),a("li",[s._v("id 部分相同, 执行顺序是先按照数字大的先执行, 然后相同的按从上往下顺序执行")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("select_type")]),s._v(": 查询类型, 用于区别普通查询, 联合查询, 子查询等复杂查询")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("SIMPLE")]),s._v(" 简单的 select 查询 , 查询中不包含子查询或 UNION")])]),s._v(" "),a("li",[a("p",[s._v("**PRIMARY ** 查询中若包含任何复杂的子部分, 最外层查询被标记为 PRIMARY")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("SUBQUERY")]),s._v(" 在select或where列表中包含了子查询")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("DERIVED")]),s._v(" 在from列表中包含的子查询被标记为DERIVED, MySQL会递归执行这些子查询, 把结果放在临时表里")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("UNION")]),s._v(" 若第二个select出现在UNION之后, 则被标记为UNION, 若UNION包含在from子句的子查询中, 外层select将被标记为DERIVED")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("UNION RESULT")]),s._v(" 从UNION表获取结果的select")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("table")]),s._v(" (显示这一行的数据是关于哪张表的)")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("type")]),s._v(" (显示查询使用了那种类型 , 从最好到最差依次排列\t"),a("strong",[s._v("system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL")]),s._v(" )")])]),s._v(" "),a("li",[a("p",[s._v("system 表只有一行记录 (等于系统表)  , 是 const 类型的特例 , 平时不会出现")])]),s._v(" "),a("li",[a("p",[s._v("const 表示通过索引一次就找到了 , const 用于比较 primary key 或 unique 索引 , 因为只要匹配一行数据 , 所以很快 , 如将主键置于 where 列表中 , mysql 就能将该查询转换为一个常量")])]),s._v(" "),a("li",[a("p",[s._v("eq_ref 唯一性索引扫描 , 对于每个索引键 , 表中只有一条记录与之匹配 , 常见于主键或唯一索引扫描")])]),s._v(" "),a("li",[a("p",[s._v("ref 非唯一性索引扫描 , 范围匹配某个单独值得所有行。本质上也是一种索引访问 , 他返回所有匹配某个单独值的行 , 它可能也会找到多个符合条件的行")])]),s._v(" "),a("li",[a("p",[s._v("range 只检索给定范围的行 , 使用一个索引来选择行。key列显示使用了哪个索引 , 一般就是在你的where语句中出现了between、<、>、in等的查询")])]),s._v(" "),a("li",[a("p",[s._v("index (Full Index Scan) , 只遍历索引树, 通常比ALL快")])]),s._v(" "),a("li",[a("p",[s._v("ALL (Full Table Scan) , 将遍历全表")])])]),s._v(" "),a("p",[s._v("tip: 一般来说 , 得保证查询至少达到range级别 , 最好到达ref")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("possible_keys")]),s._v(" (显示可能应用在这张表中的索引 , 一个或多个 , 查询涉及到的字段若存在索引 , 则该索引将被列出 , 但不一定被查询实际使用)")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("key")])])]),s._v(" "),a("li",[a("p",[s._v("实际使用的索引, 如果为 NULL, 则没有使用索引")])]),s._v(" "),a("li",[a("p",[s._v("查询中若使用了覆盖索引, 则该索引和查询的 select 字段重叠, 仅出现在key列表中")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gf2hsty7iaj30nt0373yb.jpg",alt:"explain-key"}})]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("key_len")])])]),s._v(" "),a("li",[a("p",[s._v("表示索引中使用的字节数 , 可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下 , 长度越短越好")])]),s._v(" "),a("li",[a("p",[s._v("key_len显示的值为索引字段的最大可能长度 , 并非实际使用长度 , 即key_len是根据表定义计算而得 , 不是通过表内检索出的")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("ref")]),s._v("  (显示索引的哪一列被使用了 , 如果可能的话 , 是一个常数。哪些列或常量被用于查找索引列上的值)")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("rows")]),s._v("  (根据表统计信息及索引选用情况 , 大致估算找到所需的记录所需要读取的行数)")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Extra")]),s._v(" (包含不适合在其他列中显示但十分重要的额外信息)")])])]),s._v(" "),a("ol",[a("li",[a("font",{attrs:{color:"red"}},[s._v("using filesort")]),s._v(": 说明mysql会对数据使用一个外部的索引排序 , 不是按照表内的索引顺序进行读取。\n"),a("ul",[a("li",[s._v("mysql中无法利用索引完成的排序操作称为“文件排序”。常见于order by和group by语句中")])])],1),s._v(" "),a("li",[a("font",{attrs:{color:"red"}},[s._v("Using temporary")]),s._v(" 使用了临时表保存中间结果 , mysql在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。")],1),s._v(" "),a("li",[a("font",{attrs:{color:"red"}},[s._v("using index")]),s._v(" 表示相应的select操作中使用了覆盖索引 , 避免访问了表的数据行 , 效率不错 ,\n"),a("ul",[a("li",[s._v("如果同时出现using where , 表明索引被用来执行索引键值的查找；否则索引被用来读取数据而非执行查找操作")])])],1),s._v(" "),a("li",[s._v("using where 使用了where过滤")]),s._v(" "),a("li",[s._v("using join buffer 使用了连接缓存")]),s._v(" "),a("li",[s._v("impossible where where子句的值总是false , 不能用来获取任何元祖")]),s._v(" "),a("li",[s._v("select tables optimized away 在没有group by子句的情况下 , 基于索引 优化操作或对于MyISAM存储引擎优化COUNT(*)操作 , 不必等到执行阶段再进行计算 , 查询执行计划生成的阶段即完成优化")]),s._v(" "),a("li",[s._v("distinct 优化distinct操作 , 在找到第一匹配的元祖后即停止找同样值的动作")])]),s._v(" "),a("h4",{attrs:{id:"explain案例1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explain案例1"}},[s._v("#")]),s._v(" explain案例1")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1gf2hszmc0lj30lc05w75c.jpg",alt:"explain-demo"}})]),s._v(" "),a("ol",[a("li",[a("p",[s._v("第一行 (执行顺序4) : id列为1, 表示是union里的第一个select, select_type列的primary表示该查询为外层查询, table列被标记为<derived3>, 表示查询结果来自一个衍生表, 其中derived3中3代表该查询衍生自第三个select查询, 即id为3的select。【select d1.name......】")])]),s._v(" "),a("li",[a("p",[s._v("第二行 (执行顺序2) : id为3, 是整个查询中第三个select的一部分。因查询包含在from中, 所以为derived。【select id,name from t1 where other_column=''】")])]),s._v(" "),a("li",[a("p",[s._v("第三行 (执行顺序3) : select列表中的子查询select_type为subquery, 为整个查询中的第二个select。【select id from t3】")])]),s._v(" "),a("li",[a("p",[s._v("第四行 (执行顺序1) : select_type为union, 说明第四个select是union里的第二个select, 最先执行【select name,id from t2】")])]),s._v(" "),a("li",[a("p",[s._v("第五行 (执行顺序5) : 代表从union的临时表中读取行的阶段, table列的<union1,4>表示用第一个和第四个select的结果进行union操作。【两个结果union操作】")])])]),s._v(" "),a("h3",{attrs:{id:"慢查询日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#慢查询日志"}},[s._v("#")]),s._v(" 慢查询日志")]),s._v(" "),a("p",[s._v("概述: MySQL提供的一种日志记录, 记录响应时间超过阈值的sql")]),s._v(" "),a("ul",[a("li",[s._v("默认阈值 "),a("code",[s._v("long_query_time=10")]),s._v(" , 意指执行10秒以上")]),s._v(" "),a("li",[s._v("默认情况下不开启")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLES "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%slow_query_log%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看开启状态")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启慢查询日志: 临时配置, 重启后失效;")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" slow_query_log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ON'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" slow_query_log_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/var/lib/mysql/hostname-slow.log'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" long_query_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开启慢查询日志: 永久配置, 配置文件my.cnf")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mysqld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nslow_query_log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nslow_query_log_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("var"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("lib"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("hostname"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("slow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nlong_query_time "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通过 mysqldumpslow --help 查看操作帮助信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 得到返回记录集最多的10个SQL")]),s._v("\nmysqldumpslow -s r -t "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" /var/lib/mysql/hostname-slow.log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 得到访问次数最多的10个SQL")]),s._v("\nmysqldumpslow -s c -t "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" /var/lib/mysql/hostname-slow.log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 得到按照时间排序的前10条里面含有左连接的查询语句")]),s._v("\nmysqldumpslow -s t -t "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" -g "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"left join"')]),s._v(" /var/lib/mysql/hostname-slow.log\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 也可以和管道配合使用")]),s._v("\nmysqldumpslow -s r -t "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" /var/lib/mysql/hostname-slow.log "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("慢日志查询看哪些sql执行效率低下, 通过explain得知sql的具体执行情况, 索引使用等")]),s._v(" "),a("h3",{attrs:{id:"show-profile-分析查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-profile-分析查询"}},[s._v("#")]),s._v(" show profile 分析查询")]),s._v(" "),a("p",[s._v("概述: 使用show profile命令查看执行状态")]),s._v(" "),a("ul",[a("li",[s._v("可以用来分析当前会话中语句执行的资源消耗情况, 可以用于sql的调优的测量")]),s._v(" "),a("li",[s._v("默认情况下, 参数处于关闭状态, 并保存最近15次的运行结果")])]),s._v(" "),a("h4",{attrs:{id:"show-profile使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-profile使用"}},[s._v("#")]),s._v(" show profile使用")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" VARIABLES "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("LIKE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'profiling'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查看当前mysql是否支持")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" profiling"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 默认是关闭, 使用前需要开启")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 执行sql语句, 然后查看结果, 比如: ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" profiles"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+------------+---------------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Query_ID "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Duration   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" Query                           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+------------+---------------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00385450")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"profiling"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00170050")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"profiling"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00038025")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" t_base_user       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+------------+---------------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 诊断sql")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" profile cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" block io "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" query "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("query_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 以上一步的id查看详细信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 开发需要注意的结论")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" converting HEAP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" MyISAM \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 查询结果太大, 内存都不够用了, 往磁盘上搬")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("create")]),s._v(" tmp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" \t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 创建临时表, 这个要注意")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" Copying "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" tmp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("table")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("disk")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 把内存临时表复制到磁盘")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" locked\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"性能优化-sql优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化-sql优化"}},[s._v("#")]),s._v(" 性能优化, sql优化")]),s._v(" "),a("h4",{attrs:{id:"索引优化-详见索引章节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引优化-详见索引章节"}},[s._v("#")]),s._v(" 索引优化, 详见索引章节")]),s._v(" "),a("h4",{attrs:{id:"查询优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询优化"}},[s._v("#")]),s._v(" 查询优化")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("永远小表(数据集)驱动大表")])]),s._v(" "),a("li",[a("p",[s._v("当 B 表的数据集小于 A 表的数据集时, 用 in 优于 exists ; 反之~")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("exists")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" B "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" B"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("如果明确知道只有一条结果返回, "),a("code",[s._v("limit 1")]),s._v(" 可以提高效率, 尽量使用limit, limit分页数据过多会变为全表查询")]),s._v(" "),a("ul",[a("li",[s._v("limit过多数据可以先根据主键筛选大部分数据, 再limit; (也就是使用覆盖索引)")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rental "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 优化该sql到只遍历几行数据")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rental a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" rental_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" rental "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rental_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rental_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 更快")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("表连接最好不要超过三张表, 需要join的字段, 数据类型必须一致, 最好条件相同")])]),s._v(" "),a("li",[a("p",[s._v("尽量使用 union all 而不是 union , 除非需要消除重复的行")])])]),s._v(" "),a("h4",{attrs:{id:"order-by-关键字优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-by-关键字优化"}},[s._v("#")]),s._v(" order by 关键字优化")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("order by子句, 尽量使用 Index 方式排序, 避免使用 FileSort 方式排序")])]),s._v(" "),a("li",[a("p",[s._v("MySQL 支持两种方式的排序, FileSort 和 Index, Index指 MySQL 扫描索引本身完成排序, FileSort 效率较低；")])]),s._v(" "),a("li",[a("p",[s._v("order by 满足两种情况, 会使用 Index 方式排序；")]),s._v(" "),a("ul",[a("li",[s._v("order by 语句使用联合索引最左列")]),s._v(" "),a("li",[s._v("使用 where 子句与 order by 子句条件列组合满足索引最左前列")])])]),s._v(" "),a("li",[a("p",[s._v("尽可能在索引列上完成排序操作, 遵照建索引的最左前缀, order by顺序与联合索引顺序一致")])]),s._v(" "),a("li",[a("p",[s._v("如果不在索引列上, filesort 有两种算法, 双路排序和单路排序")]),s._v(" "),a("ul",[a("li",[s._v("双路排序: 先将需要排序的字段读出来, 排序后按照需要再读取一次数据行")]),s._v(" "),a("li",[s._v("单路排序: 从磁盘读取查询需要的所有列, 按照 order by 列在 buffer 对它们进行排序")]),s._v(" "),a("li",[s._v("需要排序的列的总大小超过 "),a("code",[s._v("max_length_for_sort_data")]),s._v(" 这个值, 会进行两次排序")])])]),s._v(" "),a("li",[a("p",[s._v("优化策略")]),s._v(" "),a("ul",[a("li",[s._v("增大 sort_buffer_size 参数的设置")]),s._v(" "),a("li",[s._v("增大 max_lencth_for_sort_data 参数的设置")])])])]),s._v(" "),a("h4",{attrs:{id:"group-by-关键字优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group-by-关键字优化"}},[s._v("#")]),s._v(" GROUP BY 关键字优化")]),s._v(" "),a("ul",[a("li",[s._v("group by 实质是先排序后进行分组, 遵照索引建的最佳左前缀")]),s._v(" "),a("li",[s._v("当无法使用索引列, 增大 "),a("code",[s._v("max_length_for_sort_data")]),s._v(" "),a("code",[s._v("sort_buffer_size")]),s._v(" 参数的设置")]),s._v(" "),a("li",[s._v("where 效率高于 having, 能写在 where 限定的条件就不要去 having 限定了")])]),s._v(" "),a("h4",{attrs:{id:"数据类型优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型优化"}},[s._v("#")]),s._v(" 数据类型优化")]),s._v(" "),a("ul",[a("li",[s._v("更小的通常更好: 选择正确存储数据的最小数据类型")]),s._v(" "),a("li",[s._v("简单就好: 选择数值比字符串更好, 枚举使用数字来映射")]),s._v(" "),a("li",[s._v("尽量避免NULL, 通常情况下指定列为not null")])]),s._v(" "),a("h4",{attrs:{id:"适当的数据冗余-别再join了"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适当的数据冗余-别再join了"}},[s._v("#")]),s._v(" 适当的数据冗余: 别再join了")]),s._v(" "),a("h4",{attrs:{id:"适当拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适当拆分"}},[s._v("#")]),s._v(" 适当拆分")]),s._v(" "),a("ul",[a("li",[s._v("AKF")]),s._v(" "),a("li",[s._v("垂直拆分: 将大字段拆分成多条小字段或是独立表")])]),s._v(" "),a("h3",{attrs:{id:"服务器参数配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器参数配置"}},[s._v("#")]),s._v(" 服务器参数配置")]),s._v(" "),a("h4",{attrs:{id:"connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connection"}},[s._v("#")]),s._v(" connection")]),s._v(" "),a("ul",[a("li",[s._v("最大连接数")]),s._v(" "),a("li",[s._v("backlog")]),s._v(" "),a("li",[s._v("等待时间")])]),s._v(" "),a("h4",{attrs:{id:"说一下大表的优化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下大表的优化方案"}},[s._v("#")]),s._v(" 说一下大表的优化方案")]),s._v(" "),a("p",[s._v("https://segmentfault.com/a/1190000006158186")]),s._v(" "),a("h2",{attrs:{id:"九-主从复制-分库分表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九-主从复制-分库分表"}},[s._v("#")]),s._v(" 九. 主从复制 + 分库分表")]),s._v(" "),a("h3",{attrs:{id:"主从集群概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主从集群概述"}},[s._v("#")]),s._v(" 主从集群概述")]),s._v(" "),a("p",[s._v("概述: 数据可以从数据库主节点复制到从节点,")]),s._v(" "),a("ul",[a("li",[s._v("可以做数据的备份, 主机宕机后可以提升备机为新主机")]),s._v(" "),a("li",[s._v("业务量越来越大的情况下, 突破单机的I/O瓶颈")])]),s._v(" "),a("h4",{attrs:{id:"复制过程-简略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制过程-简略"}},[s._v("#")]),s._v(" 复制过程(简略)")]),s._v(" "),a("p",[s._v("这里讲述的基于日志重放 (物理日志或逻辑日志) 的主从集群;  (MySQL就是以逻辑日志为基础的)")]),s._v(" "),a("ol",[a("li",[s._v("master记录binlog")]),s._v(" "),a("li",[s._v("slave定时对主机的binlog日志进行检查, 如果发生改变则开启一个IO_thread将数据同步到relay log")]),s._v(" "),a("li",[s._v("从节点驱动sql_thread读取relay log进行replay重放")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.wandouip.com/crawler/article/201942/94aec4abf353527cbbe2bef5a484471d",alt:"img"}})]),s._v(" "),a("h4",{attrs:{id:"复制历史优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制历史优化"}},[s._v("#")]),s._v(" 复制历史优化")]),s._v(" "),a("ol",[a("li",[s._v("最初只有io_thread和sql_thread: 当主库写入压力较大, 从库sql_thread重放速度跟不上主库的写入速度, 导致主备延迟 + relaylog不断堆积")]),s._v(" "),a("li",[s._v("mysql5.6基于scheme级别的并行复制: 开启并行复制后会启动多个worker线程, relaylog中可以并行的事务发给worker执行, 不能并行的事务等worker处理完毕后由coordinator线程自己执行 (提高多表环境下的并行度)")]),s._v(" "),a("li",[s._v("mysql5.7引入组提交, 组提交的flush, fsync, commit三个阶段可以并发执行, 提高主库的并行度\n"),a("ul",[a("li",[s._v("binlog_group_commit_sync_delay: 等待延迟提交的时间, binlog提交后等待一段时间再 fsync. 让每个 group 的事务更多, 人为提高并行度")]),s._v(" "),a("li",[s._v("binlog_group_commit_sync_no_delay_count: 等待提交的最大事务数, 如果等待时间没到, 而事务数达到了, 就立即 fsync")])])]),s._v(" "),a("li",[s._v("mysql8.0实现了即使主库是串行提交, 只要通过算法判断互相不冲突, 备库可以并行回放replay")])]),s._v(" "),a("h4",{attrs:{id:"异步复制数据不一致问题-semi-sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步复制数据不一致问题-semi-sync"}},[s._v("#")]),s._v(" 异步复制数据不一致问题 - semi-sync")]),s._v(" "),a("p",[s._v("延迟: 如果master与slave之间采用异步模式进行binlog复制, 显然就会存在部分binlog未复制到slave的情况")]),s._v(" "),a("ul",[a("li",[s._v("为提高可用性, MySQL支持semi-sync模式, 也就是当master在提交事务之前, 保证binlog已经复制到slave, 并且收到slave回复的ACK后, master再将事务提交")]),s._v(" "),a("li",[s._v("虽然提高了可用性, 极端情况下还是不一致: binlog还未复制到从机, 主机故障, 从机升为新主机, 旧主机重启后作为从机, 此时主从数据不一致")])]),s._v(" "),a("p",[s._v("解决: 基于RAFT的多副本集群 - 阿里云MySQL金融版...")]),s._v(" "),a("h3",{attrs:{id:"分库分表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[s._v("#")]),s._v(" 分库分表")]),s._v(" "),a("h4",{attrs:{id:"表分区-分区表-partitions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表分区-分区表-partitions"}},[s._v("#")]),s._v(" 表分区, 分区表 partitions")]),s._v(" "),a("p",[s._v("概述 :  partitioning 按自定义的规则分布各个表的各个部分, 会以多个文件形式存储, 也可能分布在不同机器")]),s._v(" "),a("h5",{attrs:{id:"应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[s._v("#")]),s._v(" 应用场景")]),s._v(" "),a("ol",[a("li",[s._v("表非常大以至于无法全部放进内存, 或者只在表的最后部分有热点数据, 其他均是历史数据")]),s._v(" "),a("li",[s._v("批量删除大量数据可以使用清除整个分区的方式")]),s._v(" "),a("li",[s._v("可以对一个独立分区进行优化, 检查, 修复等操作")]),s._v(" "),a("li",[s._v("分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备")]),s._v(" "),a("li",[s._v("ext3文件系统的inode锁竞争")]),s._v(" "),a("li",[s._v("可以备份和恢复独立的分区")])]),s._v(" "),a("h5",{attrs:{id:"分区表的限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分区表的限制"}},[s._v("#")]),s._v(" 分区表的限制")]),s._v(" "),a("ol",[a("li",[s._v("一个表最多只能有1024个分区，在5.7版本的时候可以支持8196个分区")]),s._v(" "),a("li",[s._v("成本高, 包括选择分区的成本, 锁住所有表的成本, 维护分区的成本")]),s._v(" "),a("li",[s._v("分区键设计不太灵活, 如果不走分区键, 很容易出现全表锁")]),s._v(" "),a("li",[s._v("一旦数据并发量上来, 如果在分区表实施关联, 就是一个灾难")]),s._v(" "),a("li",[s._v("不可控")])]),s._v(" "),a("h5",{attrs:{id:"分区表使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分区表使用场景"}},[s._v("#")]),s._v(" 分区表使用场景")]),s._v(" "),a("ul",[a("li",[s._v("数量过大, 时间序列性比较强(可以按时间来分区)")]),s._v(" "),a("li",[s._v("有明显热点数据")])]),s._v(" "),a("h4",{attrs:{id:"mysql分表-数据分片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql分表-数据分片"}},[s._v("#")]),s._v(" MySQL分表, 数据分片")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("垂直拆分: 业务拆分, 将主要的字段作为主要表, 不常用的字段作为次要表")])]),s._v(" "),a("li",[a("p",[s._v("水平拆分: 数据拆分, 拆成完全相同的表, 根据时间, 热点数据, 主键顺序, hash值进行拆分")])])]),s._v(" "),a("h4",{attrs:{id:"mysql分库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql分库"}},[s._v("#")]),s._v(" MySQL分库")]),s._v(" "),a("p",[s._v("概述: 单主集群无法支撑大量并发写入操作的情况下, 考虑分库:  可以将库中的表分到不同数据库中, 减少单库的访问频率")]),s._v(" "),a("p",[s._v("问题: 分布式事务问题, 跨库联表查询问题(比起单库, 应用需要处理更多数据)")]),s._v(" "),a("h3",{attrs:{id:"shardingsphere"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere"}},[s._v("#")]),s._v(" ShardingSphere")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/overview/",target:"_blank",rel:"noopener noreferrer"}},[s._v("概述"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/governance/",target:"_blank",rel:"noopener noreferrer"}},[s._v("分布式治理&链路追踪"),a("OutboundLink")],1),s._v(": 实现了zookeeper和etcd的分布式治理, openTracing/skywalking分布式链路追踪")]),s._v(" "),a("h4",{attrs:{id:"sharding-jdbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharding-jdbc"}},[s._v("#")]),s._v(" Sharding-JDBC")]),s._v(" "),a("p",[s._v("在 Java 的 JDBC 层提供的额外服务: 它使用客户端直连数据库, 以 jar 包形式提供服务, 无需额外部署和依赖, 可理解为增强版的 JDBC 驱动, 完全兼容 JDBC 和各种 ORM 框架")]),s._v(" "),a("p",[s._v("特点:  可视为JDBC, 数据库连接数消耗较多, 性能损耗小, 去中心化")]),s._v(" "),a("h4",{attrs:{id:"sharding-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharding-proxy"}},[s._v("#")]),s._v(" Sharding-Proxy")]),s._v(" "),a("p",[s._v("数据库代理; 定位为透明化的数据库代理端, 可以直接当做数据库使用")]),s._v(" "),a("p",[s._v("特点: 性能损耗较多, 需要额外维护加入的代理层")]),s._v(" "),a("h4",{attrs:{id:"shardingsphere-sidecar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shardingsphere-sidecar"}},[s._v("#")]),s._v(" ShardingSphere-Sidecar")]),s._v(" "),a("p",[s._v("定位为 Kubernetes 的云原生数据库代理, Database Mesh")]),s._v(" "),a("h3",{attrs:{id:"核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[s._v("#")]),s._v(" 核心概念")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/sql/",target:"_blank",rel:"noopener noreferrer"}},[s._v("ShardingSphere核心概念"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("逻辑表: 概念上的表, 比如流水表 cb_edraft_flow")]),s._v(" "),a("li",[s._v("真实表: 分片后的物理表, 比如 cb_edraft_flow_0 到 cb_edraft_flow_9")]),s._v(" "),a("li",[s._v("数据节点: 数据分片的最小单元, 比如 ebank_0.cb_edraft_flow_0")]),s._v(" "),a("li",[s._v("绑定表: 分片规则一致的主表和字表, 比如 cb_hist_flow和 cb_edraft_flow\n"),a("ul",[a("li",[s._v("绑定表之间的多表关联不会出现笛卡尔积, 提高关联查询效率")])])]),s._v(" "),a("li",[s._v("广播表: 所有的分片数据源(db_0, db_1)中都存在的表, 表结构和数据完全一致")]),s._v(" "),a("li",[s._v("单表: 所有数据源中只存在唯一一张的表")])]),s._v(" "),a("h4",{attrs:{id:"分片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分片"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/sharding/",target:"_blank",rel:"noopener noreferrer"}},[s._v("分片"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("分片键: 用于分片数据库的字段; 例如将cb_edraft_flow表中的主键尾数取模分片")]),s._v(" "),a("li",[s._v("分片运算: 除了键值以为, 还需要根据算法决定, 某键值应该到哪个分片\n"),a("ul",[a("li",[s._v("标准分片算法: 支持等于, in, between, >, < 等基本分片场景")]),s._v(" "),a("li",[s._v("复合分片算法: 支持多列分片键")])])]),s._v(" "),a("li",[s._v("分片策略: 分片键+分片算法, 同样分为标准策略, 复合策略...")]),s._v(" "),a("li",[s._v("在配置中需要指定以上策略, 配置中可以编写表达式")])]),s._v(" "),a("h4",{attrs:{id:"分布式主键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式主键"}},[s._v("#")]),s._v(" "),a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/key-generator/",target:"_blank",rel:"noopener noreferrer"}},[s._v("分布式主键"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("为数据分片后, 不同数据节点生成全局唯一的主键")]),s._v(" "),a("p",[s._v("内置支持UUID和SNOWFLAKE, 且支持自定义扩展")]),s._v(" "),a("h4",{attrs:{id:"snowflake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snowflake"}},[s._v("#")]),s._v(" SNOWFLAKE")]),s._v(" "),a("p",[a("strong",[s._v("概述")]),s._v(": 默认使用snowflake雪花算法")]),s._v(" "),a("p",[a("font",{attrs:{color:"0099FF"}},[s._v("雪花算法")]),s._v(": 生成"),a("font",{attrs:{color:"0099FF"}},[s._v("64bit")]),s._v("的长整型数据, 能够保证")],1),s._v(" "),a("ol",[a("li",[s._v("不同进程的主键不重复")]),s._v(" "),a("li",[s._v("相同进程主键的有序性")])]),s._v(" "),a("p",[a("strong",[s._v("原理")]),s._v(":")]),s._v(" "),a("p",[s._v("在同一个进程中: 通过时间位 + 序列位保证有序")]),s._v(" "),a("p",[s._v("不同进程: 各个服务器大体做了时间同步, 那么可以认为主键是整体有序的")]),s._v(" "),a("ul",[a("li",[s._v("雪花算法的主键二进制表示形式包含 4 部分, 分别为1bit 符号位、41bit 时间戳位、10bit 工作进程位以及 12bit 序列号位")]),s._v(" "),a("li",[s._v("符号位(1bit): 预留")]),s._v(" "),a("li",[s._v("时间戳位(41bit): 容纳2^41毫秒数, 约69.73年")]),s._v(" "),a("li",[s._v("工作进程位(10bit): 分布式下应保证每个工作进程id是不同的(支持1024台机器)")]),s._v(" "),a("li",[s._v("序列号位(12bit): 用于在同一个毫秒内生成不同的id, 如果这个毫秒内超过了2^12, 则顺延到下个毫秒继续生成")]),s._v(" "),a("li",[s._v("时钟回拨: 服务器时钟回拨可能导致重复序列, ShardingSphere可以设置一段的超时时间, 让时钟追上")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://shardingsphere.apache.org/document/current/img/sharding/snowflake_cn_v2.png",alt:"snowflake"}})]),s._v(" "),a("h4",{attrs:{id:"分布式事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[s._v("#")]),s._v(" 分布式事务")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/transaction/",target:"_blank",rel:"noopener noreferrer"}},[s._v("分布式事务"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("XA事务")]),s._v(" "),a("li",[s._v("Seata AT柔性事务, "),a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/transaction/concept/base-transaction-seata/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Seata柔性事务"),a("OutboundLink")],1)])]),s._v(" "),a("h4",{attrs:{id:"其他功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他功能"}},[s._v("#")]),s._v(" 其他功能")]),s._v(" "),a("ul",[a("li",[s._v("读写分离")]),s._v(" "),a("li",[s._v("分布式治理")]),s._v(" "),a("li",[s._v("弹性伸缩")]),s._v(" "),a("li",[a("a",{attrs:{href:"https://shardingsphere.apache.org/document/current/cn/features/shadow/",target:"_blank",rel:"noopener noreferrer"}},[s._v("影子压测(生产)"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("性能测试")])]),s._v(" "),a("p",[s._v("更多知识")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2017/06/03/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL从节点可更新机制"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/06/04/",target:"_blank",rel:"noopener noreferrer"}},[s._v("8.0 WriteSet 并行复制的演进"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/06/03/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL也可以无损自由切换"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/07/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("WAL那些事儿"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/08/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("主库binlog概览"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/12/04/",target:"_blank",rel:"noopener noreferrer"}},[s._v("再议MySQL的故障恢复"),a("OutboundLink")],1)])]),s._v(" "),a("h4",{attrs:{id:"进阶-物理复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶-物理复制"}},[s._v("#")]),s._v(" 进阶-物理复制")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2016/05/01/",target:"_blank",rel:"noopener noreferrer"}},[s._v("基于InnoDB的物理复制实现"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("h3",{attrs:{id:"sql基础问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql基础问题"}},[s._v("#")]),s._v(" SQL基础问题")]),s._v(" "),a("h4",{attrs:{id:"行转列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行转列"}},[s._v("#")]),s._v(" 行转列")]),s._v(" "),a("h4",{attrs:{id:"优化排名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化排名"}},[s._v("#")]),s._v(" 优化排名")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@i")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@i")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@i")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 类似的各种操作")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- mysql 开箱函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 1. 无缓存")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 2. 生命周期在本次连接中")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"更新值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新值"}},[s._v("#")]),s._v(" 更新值")]),s._v(" "),a("h4",{attrs:{id:"字符集的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符集的选择"}},[s._v("#")]),s._v(" 字符集的选择")]),s._v(" "),a("p",[s._v("不使用mysql的utf8(不全), 推荐使用utf8mb4; mysql的字符集可以精确到字段")]),s._v(" "),a("h4",{attrs:{id:"范式-vs-数据冗余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#范式-vs-数据冗余"}},[s._v("#")]),s._v(" 范式 vs 数据冗余")]),s._v(" "),a("ul",[a("li",[s._v("第一范式 (1NF) : 所有字段都是单一属性的, 不可再分")]),s._v(" "),a("li",[s._v("第二范式 (2NF) : 所有每列都和联合主键相关, 不能部分相关")]),s._v(" "),a("li",[s._v("第三范式 (3NF) : 所有字段必须依赖主键, 不包含其他表已包含的非关键字信息")])]),s._v(" "),a("p",[s._v("数据库设计根据具体场景, 合理使用范式和反范式 (常混合使用)")]),s._v(" "),a("h4",{attrs:{id:"临时表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#临时表"}},[s._v("#")]),s._v(" 临时表")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TEMPORARY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" SalesSummary "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("column")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 会话级别, 断开连接就删除")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"事务并发控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务并发控制"}},[s._v("#")]),s._v(" 事务并发控制")]),s._v(" "),a("h4",{attrs:{id:"高优先级事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高优先级事务"}},[s._v("#")]),s._v(" 高优先级事务")]),s._v(" "),a("h4",{attrs:{id:"savepoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#savepoint"}},[s._v("#")]),s._v(" SAVEPOINT")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("savepoint")]),s._v(" sp_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 设置保存点的方式来管理事务的执行过程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rollback")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("to")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("savepoint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" sp_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 回滚到保存点")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("release")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("savepoint")]),s._v(" sp_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 删除一个保存点")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 还有隐式保存点(略)")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"mysql性能问题诊断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql性能问题诊断"}},[s._v("#")]),s._v(" MySQL性能问题诊断")]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2018/11/08/",target:"_blank",rel:"noopener noreferrer"}},[s._v("MySQL性能问题多维度诊断"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2019/11/03/",target:"_blank",rel:"noopener noreferrer"}},[s._v("性能分析的大杀器—Optimizer trace"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"http://mysql.taobao.org/monthly/2019/07/03/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Buffer Pool 漫谈"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);