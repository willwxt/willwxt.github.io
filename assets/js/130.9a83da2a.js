(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{484:function(v,_,l){"use strict";l.r(_);var i=l(45),a=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"常见问题"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[v._v("#")]),v._v(" 常见问题")]),v._v(" "),l("h2",{attrs:{id:"java基础"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[v._v("#")]),v._v(" Java基础")]),v._v(" "),l("h3",{attrs:{id:"真·java基础"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#真·java基础"}},[v._v("#")]),v._v(" 真·Java基础")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("String")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("核心知识点")])]),v._v(" "),l("li",[l("p",[v._v("扩展知识点")])]),v._v(" "),l("li",[l("p",[v._v("常见问法")]),v._v(" "),l("ul",[l("li",[v._v("聊聊String?")]),v._v(" "),l("li",[v._v("扩展问法")])])])])]),v._v(" "),l("li",[l("p",[v._v("equals, hashcode, ==")])])]),v._v(" "),l("h3",{attrs:{id:"集合"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[v._v("#")]),v._v(" 集合")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("普通集合")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("List")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("ArrayList和LinkedList的区别")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("核心知识点")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("数据结构上讲解顺序表和链表的差异, 优缺点, 使用范围")]),v._v(" "),l("ul",[l("li",[v._v('数组: 顺序存储, 创建时需要指定容量大小一次性分配连续的内存\n链表: 每次只创建节点, 可以不连续存储, 但需要存储相邻元素的地址\n数组连续, 通过下标索引的性能好, 但是插入元素, 删除元素效率低(通过数组复制实现)\n链表需要遍历才能索引下标; 而链表的长处在于增删元素只需要修改"指针/引用"实现; 显然相同数据长度下链表占用的内存更多')])])]),v._v(" "),l("li",[l("p",[v._v("结合JDK中如何实现ArrayList和LinkedList做讲解")])]),v._v(" "),l("li",[l("p",[v._v("实际中使用时如何选择的")]),v._v(" "),l("ul",[l("li",[v._v("数组常用于数据量小/已知规模/很少插入删除,主要以查询和更新为主, 比如对已知数据的排序/查询;\n链表常用于首尾插入删除较多; 更适合作为栈(前进/后退功能)/队列(排队)的实现, 更高级数据结构的实现, 图, 树, 跳表")])])])])]),v._v(" "),l("li",[l("p",[v._v("扩展知识点")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("List接口的实现, 继承关系, 可以继续扩展到Collection接口")])]),v._v(" "),l("li",[l("p",[v._v("对比Set/Map, 对比包括优缺点(特点), 适用场景, 底层实现, 以后不再赘述")])]),v._v(" "),l("li",[l("p",[v._v("多线程环境下如何使用")]),v._v(" "),l("ul",[l("li",[v._v("是不是线程安全的, 如果多线程下一定要用该怎么办(加锁, 可替代的数据结果)")])])]),v._v(" "),l("li",[l("p",[v._v("对比Vector")])]),v._v(" "),l("li",[l("p",[v._v("排序场景下使用哪个")])]),v._v(" "),l("li",[l("p",[v._v("和equals方法的关系")])]),v._v(" "),l("li",[l("p",[v._v("迭代器的使用")])]),v._v(" "),l("li",[l("p",[v._v("时间复杂度和空间复杂度的理解")])]),v._v(" "),l("li",[l("p",[v._v("数据结构的作用")])])])]),v._v(" "),l("li",[l("p",[v._v("常见问法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("ArrayList和LinkedList的区别是什么(滴滴)")])]),v._v(" "),l("li",[l("p",[v._v("ArrayList了解吗?说一下(京东)")])]),v._v(" "),l("li",[l("p",[v._v("ArrayList的长度是固定的吗, 实现原理?(小米)")])]),v._v(" "),l("li",[l("p",[v._v("问题扩展")]),v._v(" "),l("ul",[l("li",[v._v("如果表达中出现了指针, 可能追问: java中有指针吗?")]),v._v(" "),l("li",[v._v("如果表达中出现了搜索, 追问: 举例中的搜索是什么, 能表达下具体场景吗")]),v._v(" "),l("li",[v._v("要明确/分清查询以及根据下标访问的区别")]),v._v(" "),l("li",[v._v("LinkedList如果按下标删除, 需要涉及遍历, 所以效率是要打问号的")]),v._v(" "),l("li",[v._v("对比vector, 要回答完整, vector的线程安全如何实现的, 多线程是否真的使用vector, 是否有更好的选择")]),v._v(" "),l("li",[v._v("如果提到时间复杂度, 可进一步说明为什么是O(1), 为什么是O(n)")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("List接口")])]),v._v(" "),l("li",[l("p",[v._v("ArrayList了解吗, 说一下")])])])]),v._v(" "),l("li",[l("p",[v._v("Map")]),v._v(" "),l("ul",[l("li",[v._v("关于HashMap, 你了解哪些知识?")]),v._v(" "),l("li",[v._v("LinkedHashMap")]),v._v(" "),l("li",[v._v("TreeMap")])])]),v._v(" "),l("li",[l("p",[v._v("Set")]),v._v(" "),l("ul",[l("li",[v._v("实现基本同Map")])])]),v._v(" "),l("li",[l("p",[v._v("Arrays/Collections")])])])]),v._v(" "),l("li",[l("p",[v._v("JUC线程安全集合")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("Collections.synchronized")])]),v._v(" "),l("li",[l("p",[v._v("CopyOnWriteArrayList")])]),v._v(" "),l("li",[l("p",[v._v("ConcurrentHashMap")])]),v._v(" "),l("li",[l("p",[v._v("BlockingQueue")]),v._v(" "),l("ul",[l("li",[v._v("LinkedBlockingQueue")]),v._v(" "),l("li",[v._v("ArrayBlockingQueue")]),v._v(" "),l("li",[v._v("DelayQueue")]),v._v(" "),l("li",[v._v("SynchronousQueue")])])])])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("hashmap如何解决hash冲突，为什么hashmap中的链表需要转成红黑树？")])]),v._v(" "),l("li",[l("p",[v._v("hashmap什么时候会触发扩容？")])]),v._v(" "),l("li",[l("p",[v._v("jdk1.8之前并发操作hashmap时为什么会有死循环的问题？")])]),v._v(" "),l("li",[l("p",[v._v("hashmap扩容时每个entry需要再计算一次hash吗？")])]),v._v(" "),l("li",[l("p",[v._v("hashmap的数组长度为什么要保证是2的幂？")])]),v._v(" "),l("li",[l("p",[v._v("LinkedHashMap")]),v._v(" "),l("ul",[l("li",[v._v("如何用LinkedHashMap实现LRU？")])])]),v._v(" "),l("li",[l("p",[v._v("TreeMap")]),v._v(" "),l("ul",[l("li",[v._v("如何用TreeMap实现一致性hash？")])])]),v._v(" "),l("li",[l("p",[v._v("ConcurrentHashMap是如何在保证并发安全的同时提高性能？")])]),v._v(" "),l("li",[l("p",[v._v("ConcurrentHashMap是如何让多线程同时参与扩容？")])]),v._v(" "),l("li",[l("p",[v._v("LinkedBlockingQueue、DelayQueue是如何实现的？")])]),v._v(" "),l("li",[l("p",[v._v("CopyOnWriteArrayList是如何保证线程安全的？")])])])])]),v._v(" "),l("h3",{attrs:{id:"并发"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[v._v("#")]),v._v(" 并发")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("synchronized")]),v._v(" "),l("ul",[l("li",[v._v("偏向锁")]),v._v(" "),l("li",[v._v("轻量级锁")]),v._v(" "),l("li",[v._v("重量级锁")]),v._v(" "),l("li",[v._v("升级机制")]),v._v(" "),l("li",[v._v("和ReentrantLock的区别")])])]),v._v(" "),l("li",[l("p",[v._v("CAS")]),v._v(" "),l("ul",[l("li",[v._v("AtomicInteger实现原理")]),v._v(" "),l("li",[v._v("CAS适用场景")]),v._v(" "),l("li",[v._v("如何实现乐观锁")])])]),v._v(" "),l("li",[l("p",[v._v("AQS")]),v._v(" "),l("ul",[l("li",[v._v("AQS内部实现")]),v._v(" "),l("li",[v._v("ReentrantLock")]),v._v(" "),l("li",[v._v("Semaphore")]),v._v(" "),l("li",[v._v("CountDownLatch")]),v._v(" "),l("li",[v._v("CyclicBarrier")])])]),v._v(" "),l("li",[l("p",[v._v("ThreadLocal")]),v._v(" "),l("ul",[l("li",[v._v("使用场景")]),v._v(" "),l("li",[v._v("内部实现")])])]),v._v(" "),l("li",[l("p",[v._v("ThreadPoolExecutor")]),v._v(" "),l("ul",[l("li",[v._v("工作原理")]),v._v(" "),l("li",[v._v("重要参数的设置")])])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("synchronized与ReentrantLock的区别？")]),v._v(" "),l("li",[v._v("乐观锁和悲观锁的区别？")]),v._v(" "),l("li",[v._v("如何实现一个乐观锁？")]),v._v(" "),l("li",[v._v("AQS是如何唤醒下一个线程的？")]),v._v(" "),l("li",[v._v("ReentrantLock如何实现公平和非公平锁是如何实现？")]),v._v(" "),l("li",[v._v("CountDownLatch和CyclicBarrier的区别？各自适用于什么场景？")]),v._v(" "),l("li",[v._v("适用ThreadLocal时要注意什么？比如说内存泄漏?")]),v._v(" "),l("li",[v._v("说一说往线程池里提交一个任务会发生什么？")]),v._v(" "),l("li",[v._v("线程池的几个参数如何设置？")]),v._v(" "),l("li",[v._v("线程池的非核心线程什么时候会被释放？")]),v._v(" "),l("li",[v._v("如何排查死锁？")])])])]),v._v(" "),l("h3",{attrs:{id:"引用"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[v._v("#")]),v._v(" 引用")]),v._v(" "),l("ul",[l("li",[v._v("软引用")])]),v._v(" "),l("p",[v._v("如果一个对象只具有软引用，在内存足够时，垃圾回收器不会回收它；如果内存不足，就会回收这个对象的内存 (网页缓存)")]),v._v(" "),l("ul",[l("li",[v._v("弱引用")])]),v._v(" "),l("p",[v._v("当垃圾回收器扫描到只具有弱引用的对象，直接回收内存")]),v._v(" "),l("ul",[l("li",[v._v("虚引用")])]),v._v(" "),l("p",[v._v("虚引用必须和引用队列（ReferenceQueue）联合使用")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("适用场景以及释放机制")])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("软引用什么时候会被释放")]),v._v(" "),l("li",[v._v("弱引用什么时候会被释放")])])])]),v._v(" "),l("h3",{attrs:{id:"类加载"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#类加载"}},[v._v("#")]),v._v(" 类加载")]),v._v(" "),l("ul",[l("li",[v._v("双亲委派机制")])]),v._v(" "),l("p",[v._v("BooststrapClassLoader 先从下网上查询缓存类, 在从上往下加载类")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("双亲委派机制的作用？")]),v._v(" "),l("li",[v._v("Tomcat的classloader结构")]),v._v(" "),l("li",[v._v("如何自己实现一个classloader打破双亲委派")])])])]),v._v(" "),l("h3",{attrs:{id:"io"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[v._v("#")]),v._v(" IO")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("BIO和NIO的区别")])]),v._v(" "),l("li",[l("p",[v._v("多路复用机制")])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("同步阻塞、同步非阻塞、异步的区别？")]),v._v(" "),l("li",[v._v("select、poll、eopll的区别？")]),v._v(" "),l("li",[v._v("java NIO与BIO的区别？")]),v._v(" "),l("li",[v._v("reactor线程模型是什么?")])])])]),v._v(" "),l("h3",{attrs:{id:"jvm"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[v._v("#")]),v._v(" JVM")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("GC")]),v._v(" "),l("ul",[l("li",[v._v("垃圾回收基本原理、几种常见的垃圾回收器的特性、重点了解CMS（或G1）以及一些重要的参数")])])]),v._v(" "),l("li",[l("p",[v._v("内存区域")]),v._v(" "),l("ul",[l("li",[v._v("能说清jvm的内存划分")])])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("CMS GC回收分为哪几个阶段？分别做了什么事情？")]),v._v(" "),l("li",[v._v("CMS有哪些重要参数？")]),v._v(" "),l("li",[v._v("Concurrent Model Failure和ParNew promotion failed什么情况下会发生？")]),v._v(" "),l("li",[v._v("CMS的优缺点？")]),v._v(" "),l("li",[v._v("有做过哪些GC调优？")]),v._v(" "),l("li",[v._v("为什么要划分成年轻代和老年代？")]),v._v(" "),l("li",[v._v("年轻代为什么被划分成eden、survivor区域？")]),v._v(" "),l("li",[v._v("年轻代为什么采用的是复制算法？")]),v._v(" "),l("li",[v._v("老年代为什么采用的是标记清除、标记整理算法")]),v._v(" "),l("li",[v._v("什么情况下使用堆外内存？要注意些什么？")]),v._v(" "),l("li",[v._v("堆外内存如何被回收？")]),v._v(" "),l("li",[v._v("jvm内存区域划分是怎样的？")])])])]),v._v(" "),l("h2",{attrs:{id:"中间件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[v._v("#")]),v._v(" 中间件")]),v._v(" "),l("h3",{attrs:{id:"spring"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[v._v("#")]),v._v(" Spring")]),v._v(" "),l("ul",[l("li",[v._v("bean的生命周期")]),v._v(" "),l("li",[v._v("循环依赖问题")]),v._v(" "),l("li",[v._v("AOP的实现")])]),v._v(" "),l("p",[v._v("bean的创建过程中有一个步骤可以对bean进行扩展实现，aop本身就是一个扩展功能，所以在BeanPostProcessor的后置处理方法中来进行实现")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("spring事务传播")])]),v._v(" "),l("li",[l("p",[v._v("spring cloud")])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("java动态代理和cglib动态代理的区别（经常结合spring一起问所以就放这里了）")])]),v._v(" "),l("li",[l("p",[v._v("spring中bean的生命周期是怎样的？")]),v._v(" "),l("ol",[l("li",[v._v("反射实例化bean：反射的方式生成对象 ,")]),v._v(" "),l("li",[v._v("填充bean的属性：populateBean(),循环依赖的问题（三级缓存）")]),v._v(" "),l("li",[v._v("调用aware接口相关的方法：invokeAwareMethod(完成BeanName,BeanFactory,BeanClassLoader对象的属性设置)")]),v._v(" "),l("li",[v._v("调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Environment,ResourceLoader,EmbeddValueResolver等对象）")]),v._v(" "),l("li",[v._v("调用initmethod方法：invokeInitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用")]),v._v(" "),l("li",[v._v("调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator")]),v._v(" "),l("li",[v._v("注册Destuction相关的回调接口钩子函数获取到完整的对象，可以通过getBean的方式来进行对象的获取")]),v._v(" "),l("li",[v._v("销毁流程，1；判断是否实现了DispoableBean接口，2，调用destroyMethod方法")])])]),v._v(" "),l("li",[l("p",[v._v("属性注入和构造器注入哪种会有循环依赖的问题？")])])]),v._v(" "),l("p",[v._v("构造器注入")]),v._v(" "),l("p",[v._v("能够解决的(属性注入): 想法: 先完成实例化, 再完成初始化. 所以用不同的map缓存存放不同状态的bean: 一级缓存存放完整对象, 二级缓存存放不完整对象; 那么三级缓存, 存放的类型是ObjectFactory, 主要是为了判断对象是否被代理")]),v._v(" "),l("p",[v._v("缓存使用顺序: A依赖B, A将自己放在三级缓存中, 去实例化B; B需要A, 查找缓存, 在3级缓存找到A后移动到2级缓存; 然后B初始化完毕, 放入1级缓存; 继续初始化A, A可以直接在1级缓存找到B, 然后A初始化完毕, 放入1级缓存")])])]),v._v(" "),l("h3",{attrs:{id:"dubbo-或其他rpc框架"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#dubbo-或其他rpc框架"}},[v._v("#")]),v._v(" Dubbo（或其他Rpc框架")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("服务发现")])]),v._v(" "),l("li",[l("p",[v._v("路由")])]),v._v(" "),l("li",[l("p",[v._v("异步调用")])]),v._v(" "),l("li",[l("p",[v._v("限流降级")])]),v._v(" "),l("li",[l("p",[v._v("失败重试")])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("Dubbo如何做负载均衡？")]),v._v(" "),l("li",[v._v("Dubbo如何做限流降级？")]),v._v(" "),l("li",[v._v("Dubbo如何优雅的下线服务？")]),v._v(" "),l("li",[v._v("Dubbo如何实现异步调用的？")])])])]),v._v(" "),l("h3",{attrs:{id:"rocketmq-或其他消息中间件"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-或其他消息中间件"}},[v._v("#")]),v._v(" RocketMq（或其他消息中间件）")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("高可用和高吞吐")])]),v._v(" "),l("li",[l("p",[v._v("消息顺序")])]),v._v(" "),l("li",[l("p",[v._v("重复消费")])]),v._v(" "),l("li",[l("p",[v._v("事务消息")])]),v._v(" "),l("li",[l("p",[v._v("延迟消息")])]),v._v(" "),l("li",[l("p",[v._v("死信队列")])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("RocketMq如何保证高可用的？")]),v._v(" "),l("li",[v._v("RocketMq如何保证高吞吐的？")]),v._v(" "),l("li",[v._v("RocketMq的消息是有序的吗？")]),v._v(" "),l("li",[v._v("RocketMq的消息局部顺序是如何保证的?")]),v._v(" "),l("li",[v._v("RocketMq事务消息的实现机制？")]),v._v(" "),l("li",[v._v("RocketMq会有重复消费的问题吗？如何解决？")]),v._v(" "),l("li",[v._v("RocketMq支持什么级别的延迟消息？如何实现的？")]),v._v(" "),l("li",[v._v("RocketMq是推模型还是拉模型？")]),v._v(" "),l("li",[v._v("Consumer的负载均衡是怎么样的？")])])])]),v._v(" "),l("h3",{attrs:{id:"redis-或其他缓存系统"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#redis-或其他缓存系统"}},[v._v("#")]),v._v(" Redis（或其他缓存系统）")]),v._v(" "),l("ul",[l("li",[v._v("redis工作模型")]),v._v(" "),l("li",[v._v("redis持久化")])]),v._v(" "),l("p",[v._v("RDB AOF")]),v._v(" "),l("ul",[l("li",[v._v("redis过期淘汰机制")])]),v._v(" "),l("p",[v._v("LRU LFU")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("redis分布式集群的常见形式")])]),v._v(" "),l("li",[l("p",[v._v("分布式锁")])]),v._v(" "),l("li",[l("p",[v._v("缓存击穿")])]),v._v(" "),l("li",[l("p",[v._v("缓存雪崩")])]),v._v(" "),l("li",[l("p",[v._v("缓存一致性")])]),v._v(" "),l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("死磕redis，5个基本类型的底层实战和使用场景")]),v._v(" "),l("li",[v._v("redis性能为什么高?")]),v._v(" "),l("li",[v._v("单线程的redis如何利用多核cpu机器？")]),v._v(" "),l("li",[v._v("redis的缓存淘汰策略？")]),v._v(" "),l("li",[v._v("redis如何持久化数据？")]),v._v(" "),l("li",[v._v("redis有哪几种数据结构？")]),v._v(" "),l("li",[v._v("redis集群有哪几种形式？")])]),v._v(" "),l("p",[v._v("主从sentinel,")]),v._v(" "),l("p",[v._v("cluster")]),v._v(" "),l("ul",[l("li",[v._v("有海量key和value都比较小的数据，在redis中如何存储才更省内存？")])]),v._v(" "),l("p",[v._v("保证hash的内部实现是ziplist, 多个hash, 保证每个hash数量少")]),v._v(" "),l("ul",[l("li",[v._v("如何保证redis和DB中的数据一致性？")]),v._v(" "),l("li",[v._v("如何解决缓存穿透和缓存雪崩？")]),v._v(" "),l("li",[v._v("如何用redis实现分布式锁？")])])])]),v._v(" "),l("h3",{attrs:{id:"mysql"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[v._v("#")]),v._v(" Mysql")]),v._v(" "),l("ul",[l("li",[v._v("事务隔离级别")])]),v._v(" "),l("p",[v._v("RU RC RR 分别解决脏读..., innodb中是用MVCC和锁实现的")]),v._v(" "),l("ul",[l("li",[v._v("锁")])]),v._v(" "),l("p",[v._v("行锁/表锁(意向锁) ; 记录锁, 间隙锁(阻塞插入操作RR级别) , 临键锁(范围查询到记录+间隙, 锁住目标区间) ; 乐观锁:MVCC ; 当前读要加锁(RC只加记录锁, RR下三个锁都要加)")]),v._v(" "),l("ul",[l("li",[v._v("索引的数据结构")])]),v._v(" "),l("ol",[l("li",[v._v("二叉树 , BST(会退化为链表) , AVL(追求完美平衡, 旋转次数多) , 红黑树 (不完全平衡+变色, 降低旋转次数)")]),v._v(" "),l("li",[v._v("B-树, 多叉搜索树, 树的结构更加扁平")]),v._v(" "),l("li",[v._v("B+树, 非叶子节点只存放关键字(一个块中可存更多数据), 所有数据在同一层叶子节点, 叶子节点双向指针")])]),v._v(" "),l("ul",[l("li",[v._v("聚簇索引和非聚簇索引")])]),v._v(" "),l("p",[v._v("MyISAM非聚簇索引, 索引文件和数据文件分离, 索引文件B+树叶子节点中存放数据记录的物理地址 (偏移量)")]),v._v(" "),l("p",[v._v("InnoDB聚簇索引, 主键索引的叶子节点存放真实数据, 辅助索引的叶子节点存放主键")]),v._v(" "),l("ul",[l("li",[v._v("最左匹配原则")])]),v._v(" "),l("p",[v._v("使用联合索引检索数据会从最左边开始匹配, 联合索引的底层也就是一颗B+树, 在第一个字段的基础上再对第二个字段进行排序")]),v._v(" "),l("ul",[l("li",[v._v("查询优化（explain等命令）")])]),v._v(" "),l("p",[v._v("慢查询(10s以上)日志查看(可以用mysqldimpslow工具查询)")]),v._v(" "),l("p",[v._v("show profiles 分析资源消耗, 可以看下有没有临时表或者查询数据到磁盘")]),v._v(" "),l("p",[v._v("硬件优化, 配置优化, 参数调整, explain执行计划, 索引优化, sql优化改写等方面进行调优;  死锁日志查看;")]),v._v(" "),l("p",[v._v("sql优化: 组合索引左边范围查询, IS (NOT) NULL, like%开头, 区分度; 小表驱动大表; 尽量索引排序; GROUPBY的having效率低于where ;")]),v._v(" "),l("p",[v._v("explain: 看表读取顺序, 实际使用索引, 查询类型")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("常见问题")]),v._v(" "),l("ul",[l("li",[v._v("Mysql(innondb 下同) 有哪几种事务隔离级别？")]),v._v(" "),l("li",[v._v("不同事务隔离级别分别会加哪些锁？")]),v._v(" "),l("li",[v._v("mysql的行锁、表锁、间隙锁、意向锁分别是做什么的？")]),v._v(" "),l("li",[v._v("说说什么是最左匹配？")]),v._v(" "),l("li",[v._v("如何优化慢查询？")]),v._v(" "),l("li",[v._v("mysql索引为什么用的是b+ tree而不是b tree、红黑树")]),v._v(" "),l("li",[v._v("分库分表如何选择分表键")])]),v._v(" "),l("p",[l("a",{attrs:{href:"https://segmentfault.com/a/1190000025156198",target:"_blank",rel:"noopener noreferrer"}},[v._v("分表问题参考"),l("OutboundLink")],1)]),v._v(" "),l("p",[v._v("根据业务主体, 时间, 需要排序的字段; 最好能够均衡热点数据, 比如用主键;")]),v._v(" "),l("ul",[l("li",[v._v("分库分表的情况下，查询时一般是如何做排序的？")])]),v._v(" "),l("p",[v._v("最好情况是根据排序字段可以确认在哪个分库分表, 如果要查询topK可以每个表查出来在应用端汇总,")]),v._v(" "),l("p",[v._v("ShardingSphere 中limit使用流式处理 + 归并排序")])])]),v._v(" "),l("h3",{attrs:{id:"zookeeper-参考问题1"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper-参考问题1"}},[v._v("#")]),v._v(" zookeeper "),l("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1531070",target:"_blank",rel:"noopener noreferrer"}},[v._v("参考问题1"),l("OutboundLink")],1)]),v._v(" "),l("ul",[l("li",[v._v("zk大致原理（可以了解下原理相近的Raft算法）")])]),v._v(" "),l("ol",[l("li",[v._v("paxos 到 multi paxos 到 ZAB\n"),l("ol",[l("li",[v._v("paxos: 提议者, 接受者, 学习者, 提议者发起id递增的提案, 进行prepare+commit二阶段提交")]),v._v(" "),l("li",[v._v("multi-paxos: 提出leader模式 , 解决了活锁")]),v._v(" "),l("li",[v._v("ZAB: 选举(进入looking, 投票规则epoch, zxid, myid, 半数当选); 写请求过程(leader事务提案); 崩溃恢复模式: 不可用, 提交/丢弃;")])])])]),v._v(" "),l("ul",[l("li",[v._v("zk实现分布式锁")])]),v._v(" "),l("p",[v._v("依赖临时节点, 顺序节点, 监听器; 加锁生成临时顺序节点并监听前面的节点, 解锁就删除创建的节点")]),v._v(" "),l("ul",[l("li",[v._v("zk做集群master选举")])]),v._v(" "),l("p",[v._v("注册master临时节点成功的服务器为master, 其他为slave, 其他节点需要监听临时节点的删除事件以便再次抢主")]),v._v(" "),l("ul",[l("li",[v._v("常见问题\n"),l("ul",[l("li",[v._v("如何用zk实现分布式锁，与redis分布式锁有和优缺点")])])])]),v._v(" "),l("p",[v._v("zk集群维持连接压力大, zk可以监听, zk强一致性, 可靠性高; redis最终一致性, 争抢, 考虑过期时间")]),v._v(" "),l("h3",{attrs:{id:"hbase-如简历有写"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#hbase-如简历有写"}},[v._v("#")]),v._v(" HBase（如简历有写）")]),v._v(" "),l("ul",[l("li",[v._v("HBase适用的场景")]),v._v(" "),l("li",[v._v("架构")]),v._v(" "),l("li",[v._v("merge和split")]),v._v(" "),l("li",[v._v("查写数据的流程")])]),v._v(" "),l("h3",{attrs:{id:"storm-如简历有写"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#storm-如简历有写"}},[v._v("#")]),v._v(" Storm（如简历有写）")]),v._v(" "),l("ul",[l("li",[v._v("Storm与Map Reduce、Spark、Flink的比较")]),v._v(" "),l("li",[v._v("Storm高可用")]),v._v(" "),l("li",[v._v("消息ack机制")])]),v._v(" "),l("h2",{attrs:{id:"理论"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#理论"}},[v._v("#")]),v._v(" 理论")]),v._v(" "),l("h3",{attrs:{id:"算法"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[v._v("#")]),v._v(" 算法")]),v._v(" "),l("p",[v._v("算法的话不是所有公司都会问，但最好还是准备下，主要是靠刷题，在leetcode上刷个100-200道easy和medium的题，然后对应公司的面经多看看，问题应该不大。")]),v._v(" "),l("ul",[l("li",[v._v("聊聊八大排序，时间空间复杂度，稳定性，最快的，说下快排")])]),v._v(" "),l("p",[v._v("快速排序: 荷兰旗+随机基准+递归调用分区操作;  归并: 递归地取数组/子数组中点, 让两边有序后进行简单排序merge;  堆排序: 首先检查非叶子节点, 把最大值浮到堆顶, 最大值交换堆尾元素固定, 不断(取新堆, 进行下沉, 交换)")]),v._v(" "),l("ul",[l("li",[v._v("0-1背包问题，动态规划")])]),v._v(" "),l("h3",{attrs:{id:"数据结构"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[v._v("#")]),v._v(" 数据结构")]),v._v(" "),l("h3",{attrs:{id:"设计模式"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),l("h3",{attrs:{id:"分布式理论"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#分布式理论"}},[v._v("#")]),v._v(" 分布式理论")]),v._v(" "),l("ul",[l("li",[v._v("分布式数据库和缓存双写一致性方案")])]),v._v(" "),l("p",[v._v("锁啊, 这么简单..")]),v._v(" "),l("h2",{attrs:{id:"项目"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#项目"}},[v._v("#")]),v._v(" 项目")]),v._v(" "),l("h2",{attrs:{id:"表达"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#表达"}},[v._v("#")]),v._v(" 表达")]),v._v(" "),l("h3",{attrs:{id:"语气坚定明确"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#语气坚定明确"}},[v._v("#")]),v._v(" 语气坚定明确")]),v._v(" "),l("h3",{attrs:{id:"减少口头语-不要出现过长的磕磕绊绊"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#减少口头语-不要出现过长的磕磕绊绊"}},[v._v("#")]),v._v(" 减少口头语, 不要出现过长的磕磕绊绊")]),v._v(" "),l("h2",{attrs:{id:"网络"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[v._v("#")]),v._v(" 网络")]),v._v(" "),l("h3",{attrs:{id:"udp和tcp的区别"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#udp和tcp的区别"}},[v._v("#")]),v._v(" UDP和TCP的区别")]),v._v(" "),l("p",[v._v("TCP面向连接, 必须建立可靠的连接, UDP不建立连接, 发送端直接扔到网络上")]),v._v(" "),l("p",[v._v("TCP保证可靠, UDP最大努力交付, 不保证可靠")]),v._v(" "),l("p",[v._v("TCP效率低, 可靠性高, UDP传输效率高, 准确性低")]),v._v(" "),l("h3",{attrs:{id:"http和https的区别-https如何实现加密"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别-https如何实现加密"}},[v._v("#")]),v._v(" HTTP和HTTPS的区别，HTTPS如何实现加密")]),v._v(" "),l("p",[v._v("HTTPS在传统的HTTP和TCP之间加了一层用于加密解密的SSL/TLS层")]),v._v(" "),l("ol",[l("li",[v._v("客户端给服务端随机值 (由服务端非对称秘钥保护)")]),v._v(" "),l("li",[v._v("客户端和服务端用这个随机值生成 对称的加密信息")]),v._v(" "),l("li",[v._v("实际网络中用这个对称加密信息进行传输")])]),v._v(" "),l("h3",{attrs:{id:"如何避免中间人攻击"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#如何避免中间人攻击"}},[v._v("#")]),v._v(" 如何避免中间人攻击")]),v._v(" "),l("h3",{attrs:{id:"死磕网络-请求全过程-从上到下很细-涉及各层网络协议-三握四挥-https-tcp可靠算法-拥塞阻塞等"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#死磕网络-请求全过程-从上到下很细-涉及各层网络协议-三握四挥-https-tcp可靠算法-拥塞阻塞等"}},[v._v("#")]),v._v(" 死磕网络，请求全过程，从上到下很细，涉及各层网络协议，三握四挥，https，tcp可靠算法，拥塞阻塞等")]),v._v(" "),l("h3",{attrs:{id:"nginx的进程模型-就是磕epoll-poll-select这些"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#nginx的进程模型-就是磕epoll-poll-select这些"}},[v._v("#")]),v._v(" nginx的进程模型，就是磕epoll poll select这些")])])}),[],!1,null,null,null);_.default=a.exports}}]);