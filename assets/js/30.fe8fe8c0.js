(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{386:function(t,a,e){"use strict";e.r(a);var s=e(45),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("h1",{attrs:{id:"多线程和高并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多线程和高并发"}},[t._v("#")]),t._v(" 多线程和高并发")]),t._v(" "),e("h2",{attrs:{id:"复习"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复习"}},[t._v("#")]),t._v(" 复习")]),t._v(" "),e("h2",{attrs:{id:"第一天-线程基础-synchronized"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一天-线程基础-synchronized"}},[t._v("#")]),t._v(" 第一天 线程基础 synchronized")]),t._v(" "),e("h6",{attrs:{id:"什么是程序-进程-线程-协程-纤程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是程序-进程-线程-协程-纤程"}},[t._v("#")]),t._v(" 什么是程序, 进程, 线程, 协程/纤程")]),t._v(" "),e("blockquote",[e("p",[t._v("进程相对于程序而言, 运行的程序, 进程的最小单位是线程")])]),t._v(" "),e("h6",{attrs:{id:"java-开启线程的三种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-开启线程的三种方式"}},[t._v("#")]),t._v(" java 开启线程的三种方式")]),t._v(" "),e("ul",[e("li",[t._v("1继承thread 2实现Runnable 3线程池获取")])]),t._v(" "),e("h6",{attrs:{id:"线程方法介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程方法介绍"}},[t._v("#")]),t._v(" 线程方法介绍")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("Thread.yield()")]),t._v(" 让出一次cpu时间片, 回到就绪Ready, 等待队列中")]),t._v(" "),e("p",[e("code",[t._v("thread1.join()")]),t._v(" 等线程t1执行完再继续向下执行代码")]),t._v(" "),e("p",[e("code",[t._v("this.getState()")]),t._v(" 线程状态, 同一个线程对象结束后不能再次调用start")]),t._v(" "),e("p",[t._v("不要去关闭线程, 要让线程正常结束 不要用 "),e("code",[t._v("stop")]),t._v(" 少用 "),e("code",[t._v("interrupt")])]),t._v(" "),e("p",[e("code",[t._v("sleep join wait park...")]),t._v(" 的时候 "),e("code",[t._v("interrupt")]),t._v(" 程序会收到异常, 然后选择对异常进行处理")])]),t._v(" "),e("h6",{attrs:{id:"线程状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程状态"}},[t._v("#")]),t._v(" 线程状态")]),t._v(" "),e("p",[e("svg",{attrs:{id:"SvgjsSvg1162",width:"883.9943084716797",height:"565.994288444519",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[e("defs",{attrs:{id:"SvgjsDefs1163"}},[e("marker",{attrs:{id:"SvgjsMarker1216",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1217",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1224",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1225",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1234",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1235",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1246",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1247",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1258",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1259",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1268",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1269",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1276",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1277",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1290",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1291",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1302",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1303",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),e("marker",{attrs:{id:"SvgjsMarker1312",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[e("path",{attrs:{id:"SvgjsPath1313",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})])]),e("g",{attrs:{id:"SvgjsG1164",transform:"translate(25,279.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1165",d:"M 0 4Q 0 0 4 0L 105 0Q 109 0 109 4L 109 40Q 109 44 105 44L 4 44Q 0 44 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#e6ffcc"}}),e("g",{attrs:{id:"SvgjsG1166"}},[e("text",{attrs:{id:"SvgjsText1167","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"89px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"12.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1168",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1169"}},[t._v("NEW")])])])])]),e("g",{attrs:{id:"SvgjsG1170",transform:"translate(359,25.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1171",d:"M 0 4Q 0 0 4 0L 105 0Q 109 0 109 4L 109 40Q 109 44 105 44L 4 44Q 0 44 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffb366"}}),e("g",{attrs:{id:"SvgjsG1172"}},[e("text",{attrs:{id:"SvgjsText1173","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"89px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"12.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1174",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1175"}},[t._v("WAITING")])])])])]),e("g",{attrs:{id:"SvgjsG1176",transform:"translate(751,279.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1177",d:"M 0 4Q 0 0 4 0L 105 0Q 109 0 109 4L 109 40Q 109 44 105 44L 4 44Q 0 44 0 40Z",stroke:"rgba(0,0,0,1)","stroke-width":"2","fill-opacity":"1",fill:"#000000"}}),e("g",{attrs:{id:"SvgjsG1178"}},[e("text",{attrs:{id:"SvgjsText1179","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"89px",fill:"#ffffff","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"4.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1180",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1181"}},[t._v("TERMINATE")])]),e("tspan",{attrs:{id:"SvgjsTspan1182",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1183"}},[t._v("D")])])])])]),e("g",{attrs:{id:"SvgjsG1184",transform:"translate(613,478.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1185",d:"M 0 4Q 0 0 4 0L 105 0Q 109 0 109 4L 109 40Q 109 44 105 44L 4 44Q 0 44 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ff9999"}}),e("g",{attrs:{id:"SvgjsG1186"}},[e("text",{attrs:{id:"SvgjsText1187","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"89px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"12.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1188",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1189"}},[t._v("BLOCKED")])])])])]),e("g",{attrs:{id:"SvgjsG1190",transform:"translate(54,496.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1191",d:"M 0 4Q 0 0 4 0L 135 0Q 139 0 139 4L 139 40Q 139 44 135 44L 4 44Q 0 44 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffb366"}}),e("g",{attrs:{id:"SvgjsG1192"}},[e("text",{attrs:{id:"SvgjsText1193","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"119px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"12.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1194",dy:"16",x:"69.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1195"}},[t._v("TIMED_WAITING")])])])])]),e("g",{attrs:{id:"SvgjsG1196",transform:"translate(257,192.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1197",d:"M 0 0L 337 0L 337 218L 0 218Z","stroke-dasharray":"3,4",stroke:"rgba(255,153,153,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffffff"}}),e("g",{attrs:{id:"SvgjsG1198"}},[e("text",{attrs:{id:"SvgjsText1199","font-family":"微软雅黑","text-anchor":"start","font-size":"18px",width:"317px",fill:"#990000","font-weight":"700",align:"top",anchor:"start",family:"微软雅黑",size:"18px",weight:"700","font-style":"italic",opacity:"1",y:"-2.6999999999999997",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1200",dy:"22",x:"10"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1201"}},[t._v("RUNNABLE")])])])])]),e("g",{attrs:{id:"SvgjsG1202",transform:"translate(277,279.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1203",d:"M 0 4Q 0 0 4 0L 105 0Q 109 0 109 4L 109 40Q 109 44 105 44L 4 44Q 0 44 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ff99ff"}}),e("g",{attrs:{id:"SvgjsG1204"}},[e("text",{attrs:{id:"SvgjsText1205","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"89px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"12.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1206",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1207"}},[t._v("READY")])])])])]),e("g",{attrs:{id:"SvgjsG1208",transform:"translate(468,279.00284481048584)"}},[e("path",{attrs:{id:"SvgjsPath1209",d:"M 0 4Q 0 0 4 0L 105 0Q 109 0 109 4L 109 40Q 109 44 105 44L 4 44Q 0 44 0 40Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ff99ff"}}),e("g",{attrs:{id:"SvgjsG1210"}},[e("text",{attrs:{id:"SvgjsText1211","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"89px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"12.55",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1212",dy:"16",x:"54.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1213"}},[t._v("RUNNING")])])])])]),e("g",{attrs:{id:"SvgjsG1214"}},[e("path",{attrs:{id:"SvgjsPath1215",d:"M331.5 279.00284481048584L331.5 249.00284481048584L522.5 249.00284481048584L522.5 279.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1216)"}}),e("rect",{attrs:{id:"SvgjsRect1218",width:"52",height:"15",x:"401",y:"241.50284481048584",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1219","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"52px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"239.55284481048585",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1220",dy:"16",x:"427"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1221"}},[t._v("系统调度")])])])]),e("g",{attrs:{id:"SvgjsG1222"}},[e("path",{attrs:{id:"SvgjsPath1223",d:"M522.5 323.00284481048584L522.5 353.00284481048584L331.5 353.00284481048584L331.5 323.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1224)"}}),e("rect",{attrs:{id:"SvgjsRect1226",width:"52",height:"31",x:"401",y:"337.50284481048584",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1227","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"52px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"335.55284481048585",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1228",dy:"16",x:"427"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1229"}},[t._v("系统调度")])]),e("tspan",{attrs:{id:"SvgjsTspan1230",dy:"16",x:"427"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1231"}},[t._v("yield()")])])])]),e("g",{attrs:{id:"SvgjsG1232"}},[e("path",{attrs:{id:"SvgjsPath1233",d:"M455.6392059326172 68.01989650726318C 455.6392059326172 136.58350089585522 574 123.4392404218938 574 192.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1234)"}}),e("rect",{attrs:{id:"SvgjsRect1236",width:"125",height:"46",x:"452.3196029663086",y:"107.01137065887451",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1237","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"125px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"105.06137065887451",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1238",dy:"16",x:"514.8196029663086"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1239"}},[t._v("Object.notify()")])]),e("tspan",{attrs:{id:"SvgjsTspan1240",dy:"16",x:"514.8196029663086"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1241"}},[t._v("Object.notifyAll()")])]),e("tspan",{attrs:{id:"SvgjsTspan1242",dy:"16",x:"514.8196029663086"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1243"}},[t._v("LockSupport.unpark")])])])]),e("g",{attrs:{id:"SvgjsG1244"}},[e("path",{attrs:{id:"SvgjsPath1245",d:"M272 192.00284481048584C 272 127.31214197176968 374.6392059326172 131.71059934597935 374.6392059326172 67.01989650726318",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1246)"}}),e("rect",{attrs:{id:"SvgjsRect1248",width:"109",height:"46",x:"268.8196029663086",y:"106.51137065887451",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1249","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"109px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"104.56137065887451",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1250",dy:"16",x:"323.3196029663086"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1251"}},[t._v("Object.wait()")])]),e("tspan",{attrs:{id:"SvgjsTspan1252",dy:"16",x:"323.3196029663086"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1253"}},[t._v("Object.join()")])]),e("tspan",{attrs:{id:"SvgjsTspan1254",dy:"16",x:"323.3196029663086"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1255"}},[t._v("LockSupport.park")])])])]),e("g",{attrs:{id:"SvgjsG1256"}},[e("path",{attrs:{id:"SvgjsPath1257",d:"M594 301.00284481048584C 656.8 301.00284481048584 688.2 301.00284481048584 751 301.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1258)"}}),e("rect",{attrs:{id:"SvgjsRect1260",width:"78",height:"31",x:"633.5",y:"285.50284481048584",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1261","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"78px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"283.55284481048585",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1262",dy:"16",x:"672.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1263"}},[t._v("线程执行结束")])]),e("tspan",{attrs:{id:"SvgjsTspan1264",dy:"16",x:"672.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1265"}},[t._v("异常退出")])])])]),e("g",{attrs:{id:"SvgjsG1266"}},[e("path",{attrs:{id:"SvgjsPath1267",d:"M134 301.00284481048584C 183.2 301.00284481048584 207.8 301.00284481048584 257 301.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1268)"}}),e("rect",{attrs:{id:"SvgjsRect1270",width:"75",height:"15",x:"158",y:"293.50284481048584",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1271","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"75px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"291.55284481048585",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1272",dy:"16",x:"195.5"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1273"}},[t._v("Thread.start")])])])]),e("g",{attrs:{id:"SvgjsG1274"}},[e("path",{attrs:{id:"SvgjsPath1275",d:"M266 408.00284481048584C 201.0028533935547 415.7471532821655 61 406.7669775821118 61 496.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1276)"}}),e("rect",{attrs:{id:"SvgjsRect1278",width:"149",height:"62",x:"64.62607002258301",y:"390.4435102767254",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1279","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"149px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"388.49351027672543",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1280",dy:"16",x:"139.126070022583"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1281"}},[t._v("Thread.sleep()")])]),e("tspan",{attrs:{id:"SvgjsTspan1282",dy:"16",x:"139.126070022583"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1283"}},[t._v("Object.wait()")])]),e("tspan",{attrs:{id:"SvgjsTspan1284",dy:"16",x:"139.126070022583"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1285"}},[t._v("Thread.join()")])]),e("tspan",{attrs:{id:"SvgjsTspan1286",dy:"16",x:"139.126070022583"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1287"}},[t._v("LockSupport.parkNanos")])])])]),e("g",{attrs:{id:"SvgjsG1288"}},[e("path",{attrs:{id:"SvgjsPath1289",d:"M193 518.0028448104858C 295.5438442813609 518.0028448104858 425.5 512.5466890918468 425.5 410.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1290)"}}),e("rect",{attrs:{id:"SvgjsRect1292",width:"125",height:"46",x:"285.20394160551035",y:"479.4567864159962",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1293","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"125px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"477.5067864159962",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1294",dy:"16",x:"347.70394160551035"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1295"}},[t._v("Object.notify")])]),e("tspan",{attrs:{id:"SvgjsTspan1296",dy:"16",x:"347.70394160551035"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1297"}},[t._v("Object.notifyAll")])]),e("tspan",{attrs:{id:"SvgjsTspan1298",dy:"16",x:"347.70394160551035"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1299"}},[t._v("LockSupport.unpark")])])])]),e("g",{attrs:{id:"SvgjsG1300"}},[e("path",{attrs:{id:"SvgjsPath1301",d:"M483 410.00284481048584C 483 473.2483980138534 549.7544467966325 500.00284481048584 613 500.00284481048584",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1302)"}}),e("rect",{attrs:{id:"SvgjsRect1304",width:"160",height:"31",x:"444.28291754873715",y:"463.2199272617487",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1305","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"160px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"461.2699272617487",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1306",dy:"16",x:"524.2829175487371"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1307"}},[t._v("当前线程等待进入")])]),e("tspan",{attrs:{id:"SvgjsTspan1308",dy:"16",x:"524.2829175487371"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1309"}},[t._v("synchronized方法或代码块")])])])]),e("g",{attrs:{id:"SvgjsG1310"}},[e("path",{attrs:{id:"SvgjsPath1311",d:"M722 500.00284481048584C 787.4137050277544 500.00284481048584 843.9119262695312 404.7471532821655 592.0340741737109 400.7440257653833",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1312)"}}),e("rect",{attrs:{id:"SvgjsRect1314",width:"117",height:"15",x:"717.501371008196",y:"444.3746081067279",fill:"#ffffff"}}),e("text",{attrs:{id:"SvgjsText1315","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"117px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"442.42460810672793",transform:"rotate(0)"}},[e("tspan",{attrs:{id:"SvgjsTspan1316",dy:"16",x:"776.001371008196"}},[e("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1317"}},[t._v("当前线程成功获得锁")])])])])])]),t._v(" "),e("h6",{attrs:{id:"synchronize"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronize"}},[t._v("#")]),t._v(" synchronize")]),t._v(" "),e("blockquote",[e("p",[t._v("锁, 锁了对象o, 和拿到锁后执行的代码需要分开")]),t._v(" "),e("p",[t._v("锁对象o -- 锁this -- 锁方法在")]),t._v(" "),e("p",[t._v("对于 "),e("code",[t._v("static")]),t._v(" 方法被 "),e("code",[t._v("synchronize")]),t._v(" 修饰, 锁的是这个类的类对象(class)  T.class 单例或存在于不同的classLoad")]),t._v(" "),e("p",[t._v("synchronize 必须是可重入锁, 考虑到父子类继承 synchronize 构造, 子类调父类可重入才能不死锁")]),t._v(" "),e("p",[t._v("程序中出现异常, 默认锁会被释放")])]),t._v(" "),e("h6",{attrs:{id:"synchronize的底层实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronize的底层实现"}},[t._v("#")]),t._v(" synchronize的底层实现")]),t._v(" "),e("blockquote",[e("p",[t._v("Hotspot 的实现是, 在该对象头上使用两位来代表锁的类型/状态, 还在对象头上记录了哪个线程获得了这把锁")]),t._v(" "),e("p",[t._v("JDK 早期的synchronize是重量级的悲观锁, 直接向OS申请, 后期改进为锁升级")]),t._v(" "),e("p",[t._v("首先记录这个线程ID (偏向锁) , 自用没有问题 (也是加在对象头中)")]),t._v(" "),e("p",[t._v("如果有线程争用, 升级为自旋锁 (占用CPU, 但是不调用内核)")]),t._v(" "),e("p",[t._v("轻量级锁?")]),t._v(" "),e("p",[t._v("自旋10次后, 升级为重量级锁, 向OS")]),t._v(" "),e("p",[t._v("============以上为Hotspot的JVM实现==============")]),t._v(" "),e("p",[t._v("(加锁代码) 执行时间长, 线程特别多的 用OS锁, 因为自旋会占用CPU资源")]),t._v(" "),e("p",[t._v("反之使用自旋锁")])]),t._v(" "),e("h6",{attrs:{id:"第一天回顾"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一天回顾"}},[t._v("#")]),t._v(" 第一天回顾")]),t._v(" "),e("blockquote",[e("p",[t._v("线程概念, 启动方式, 常用方法")]),t._v(" "),e("ul",[e("li",[t._v("少讲的问题, synchronize(Obj) 不能锁定String常量, Integer Long 的这些常量, 会造成锁了这些常量的不同的方法块都会进行争抢, 性能大幅降低")])]),t._v(" "),e("p",[t._v("线程同步中的 synchronize")]),t._v(" "),e("ul",[e("li",[t._v("锁的是对象 this, t.class")]),t._v(" "),e("li",[t._v("锁升级")])])]),t._v(" "),e("h2",{attrs:{id:"第二天-synchronized-volatile-cas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二天-synchronized-volatile-cas"}},[t._v("#")]),t._v(" 第二天 synchronized volatile CAS")]),t._v(" "),e("h3",{attrs:{id:"volatile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[t._v("#")]),t._v(" volatile")]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("保证线程可见性\n"),e("ul",[e("li",[t._v("java里面有堆内存, 每个线程有自己私有的工作内存, 访问堆内存先cp一份放在工作空间中, 修改值首先修改自己工作内存中再写回堆内存, 什么时候其他线程再向堆读取更新后的值是不可控制的, 这叫内存不可见")]),t._v(" "),e("li",[t._v("底层实现 使用了CPU的缓存一致性协议 MESI等")])])]),t._v(" "),e("li",[t._v("禁止指令重排序\n"),e("ul",[e("li",[t._v("DCL(Double Check Lock) 单例, 要加volatile\n"),e("ul",[e("li",[t._v("首先, new一个对象的过程(1初始化 2赋值 3和栈内存中的引用联系) 当发生指令重排序, 2和3位置调换, 会出现生成了一个未赋值的引用, 这时候在一开始的判断对象是不为空的, 但是对象的内容只有初始化值")]),t._v(" "),e("li",[t._v("使用 volatile 能够保证操作这个对象的指令不会重排序")])])]),t._v(" "),e("li",[e("code",[t._v("singleton/Mgr06.java")]),t._v(" DCL代码")])])]),t._v(" "),e("li",[t._v("volatile并不保证原子性, 不能替代synchronize")]),t._v(" "),e("li",[t._v("CPU层面实现禁止指令重排序\n"),e("ol",[e("li",[t._v("lfence sfence mfence 内存屏障(针对CPU)")]),t._v(" "),e("li",[t._v("lock 指令")])])]),t._v(" "),e("li",[t._v("volatile 使用 lock addl 0x0 实现, 主要是为了执行lock指令, 使lock前后指令按顺序执行!")])])]),t._v(" "),e("h4",{attrs:{id:"jsr内存屏障-背过-volatile-jvm层面的实现细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsr内存屏障-背过-volatile-jvm层面的实现细节"}},[t._v("#")]),t._v(" JSR内存屏障 (背过) volatile JVM层面的实现细节")]),t._v(" "),e("blockquote",[e("p",[t._v("(JVM规范要求) 只是一种规范, 不是真正硬件底层实现, 一般JVM使用 lock 指令 或 lfence指令来达到这个规范!")]),t._v(" "),e("p",[t._v("volatile的规范内容:")]),t._v(" "),e("p",[t._v("StoreStoreBarrier\t\t\t\tLoadLoadBarrier")]),t._v(" "),e("p",[t._v("volatile写\t\t\t\t\t\t\t  volatile 读")]),t._v(" "),e("p",[t._v("StoreLoadBarrier\t\t\t\tLoadStoreBarrier")])]),t._v(" "),e("h4",{attrs:{id:"volatile-修饰对象需要打问号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-修饰对象需要打问号"}},[t._v("#")]),t._v(" volatile 修饰对象需要打问号!!")]),t._v(" "),e("blockquote",[e("p",[t._v("还是别修饰了吧您内")])]),t._v(" "),e("h4",{attrs:{id:"happens-before-原则-实现jvm需要保证哪些情况下不允许指令重排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#happens-before-原则-实现jvm需要保证哪些情况下不允许指令重排序"}},[t._v("#")]),t._v(" happens-before 原则 (实现JVM需要保证哪些情况下不允许指令重排序)")]),t._v(" "),e("blockquote",[e("p",[t._v("JLS17.4.5")]),t._v(" "),e("p",[t._v("unlock必须在lock后, volatile的一些规则, 线程启动, wait, 打断的一些规则")])]),t._v(" "),e("h4",{attrs:{id:"as-if-serial-不管如何重排序-单线程执行结果不会改变"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#as-if-serial-不管如何重排序-单线程执行结果不会改变"}},[t._v("#")]),t._v(" as_if_serial 不管如何重排序, 单线程执行结果不会改变!")]),t._v(" "),e("blockquote",[e("p",[t._v("这些指令随便怎么乱序执行, 看上去就像是顺序执行一样!")])]),t._v(" "),e("h4",{attrs:{id:"面试题-singletreadpool-任务按顺序执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题-singletreadpool-任务按顺序执行"}},[t._v("#")]),t._v(" 面试题: SingleTreadPool 任务按顺序执行")]),t._v(" "),e("h6",{attrs:{id:"synchronize-锁优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronize-锁优化"}},[t._v("#")]),t._v(" synchronize 锁优化")]),t._v(" "),e("blockquote",[e("p",[t._v("锁的细化, 锁粒度的细化, 分离出不需要加锁的业务逻辑")]),t._v(" "),e("p",[t._v("锁的粗化, 如果一个方法中有很多地方需要加锁, 不如就把整个方法都锁了避免太多竞争")])]),t._v(" "),e("h6",{attrs:{id:"synchronize-锁对象的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronize-锁对象的问题"}},[t._v("#")]),t._v(" synchronize 锁对象的问题")]),t._v(" "),e("blockquote",[e("p",[t._v("在有竞争的情况下, 锁定的引用对象如果发生改变(引用指向了另外的对象), 那么之前的那把锁就会失效, 所以请不要改变锁定的引用对象 (加final)")])]),t._v(" "),e("h6",{attrs:{id:"cas-无锁优化-自旋-自旋锁-乐观锁-无锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cas-无锁优化-自旋-自旋锁-乐观锁-无锁"}},[t._v("#")]),t._v(" CAS-无锁优化/自旋/自旋锁/乐观锁/无锁")]),t._v(" "),e("blockquote",[e("p",[t._v("由于有些常规操作, 多线程情况下特别容易加锁, java提供了一些线程安全的操作方法(CAS), 凡是在 "),e("code",[t._v("java.util.concurrent.atomic")]),t._v(" 包下的类都使用CAS保证线程安全")]),t._v(" "),e("p",[t._v("用法 - 自己去用 "),e("code",[t._v("AtomicInteger count; count.incrementAndGet();")])])]),t._v(" "),e("h6",{attrs:{id:"原理-cas操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理-cas操作"}},[t._v("#")]),t._v(" 原理 - CAS操作")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("AtomicInteger")]),t._v(" 中调用了 "),e("code",[t._v("unsafe")]),t._v(" 类中的 "),e("code",[t._v("compareAndSet")]),t._v(" (atomic类的实现都用了这个)")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取需要修改的值V, 看是不是Expected我所期望的值, ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是, 就改成newvalue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果不是(说明有人改了), 将Expected值更新后重复CAS, 或者失败")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cas")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Expected")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("New")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("New")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" again or fail "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ABA问题")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("CAS 是CPU原语支持 (lock cmpxchg)")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Compare And Set\ncas(V, Expected, NewValue)\n\tif V == E\n\tV = New\n\totherwise try again or fail\n\tCPU原语支持\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h6",{attrs:{id:"aba-问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aba-问题"}},[t._v("#")]),t._v(" ABA 问题")]),t._v(" "),e("blockquote",[e("p",[t._v("CAS中, 有线程把对象修改后又修改回来, CAS无法识别ABA操作! (女友复合问题)")]),t._v(" "),e("p",[t._v("一般没问题, 但如果需要识别, 给修改对象添加版本号(version), CAS时比较版本号")]),t._v(" "),e("p",[t._v("Atomic包下有用于添加版本号的类 AtomicStampedReference 额外维护了一个时间戳")])]),t._v(" "),e("h6",{attrs:{id:"unsafe-类-简单了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unsafe-类-简单了解"}},[t._v("#")]),t._v(" Unsafe 类 简单了解")]),t._v(" "),e("blockquote",[e("p",[t._v("写在前面, blog: "),e("a",{attrs:{href:"https://baijiahao.baidu.com/s?id=1648712942552745701",target:"_blank",rel:"noopener noreferrer"}},[t._v("首先在Oracle的Jdk8无法获取到sun.misc包的源码"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("构造方法 private, 单例, jdk8不能用(反射可以), 只有jdk源码能用, jdk11"),e("a",{attrs:{href:"https://segmentfault.com/a/1190000018037554",target:"_blank",rel:"noopener noreferrer"}},[t._v("还是反射调用"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("是一个直接操作JVM内存的类, 申请/分配/销毁内存(内存管理), 修改数据/对象/线程, 提供CAS机制, 等同于C和C++的指针")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("- 直接操作内存\n\tallocateMemory putXX freeMemory pageSize\n- 直接生成类实例\n\tallocateInstance\n- 直接操作类或实例变量\n\tobjectFieldOffset\n\tgetInt\n\tgetObject\n- CAS相关操作\n\tweakCompareAndSetObject Int Long\n- c > malloc free\n- c++ > new delete\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h2",{attrs:{id:"第三天-reentrantlock-等api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三天-reentrantlock-等api"}},[t._v("#")]),t._v(" 第三天 ReentrantLock 等api")]),t._v(" "),e("h6",{attrs:{id:"比较几种加锁的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较几种加锁的方式"}},[t._v("#")]),t._v(" 比较几种加锁的方式")]),t._v(" "),e("blockquote",[e("p",[t._v("简单的测试, 对于每种加锁的情况要根据实际线程数量和数据操作量来测试")]),t._v(" "),e("p",[t._v("LongAdder 使用了数组/分段锁(分治思想), 将线程数平摊, 最终将数据整合, 线程越多的时候效果明显 ConcurrentHashMap也用到了这种思想(本身就是数组)")])]),t._v(" "),e("h6",{attrs:{id:"可重入锁-reentrantlock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可重入锁-reentrantlock"}},[t._v("#")]),t._v(" 可重入锁 ReentrantLock")]),t._v(" "),e("blockquote",[e("p",[t._v("可重入锁: 获得锁的线程重复调用加锁的方法")]),t._v(" "),e("p",[t._v("synchronize 本身就是可重入锁")]),t._v(" "),e("p",[t._v("ReentrantLock 是新加入用来替代 synchronize 的, 使用时候需要加锁和手动解锁")]),t._v(" "),e("p",[t._v("拥有的额外功能")]),t._v(" "),e("p",[e("code",[t._v("tryLock")]),t._v(" 在一段时间内尝试去获得这把锁, 返回boolean, 是否获得到, 可以控制获取不到锁怎么办")]),t._v(" "),e("p",[e("code",[t._v("lockInterruptibly")]),t._v(" 线程等待获取lock的时候可以被打断, 抛出异常, 结束线程")]),t._v(" "),e("p",[e("code",[t._v("new ReentrantLock(true);")]),t._v(" 公平锁(默认是不公平的) 新线程会先去查看等待队列是否有线程, 有就进入等待队列, 没有就竞争锁")])]),t._v(" "),e("h6",{attrs:{id:"countdownlatch-倒数的门栓"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch-倒数的门栓"}},[t._v("#")]),t._v(" CountDownLatch 倒数的门栓")]),t._v(" "),e("blockquote",[e("p",[t._v("倒数技术, 等到多少个线程结束(每个线程要减少, 每个线程不一定只倒数一次)")]),t._v(" "),e("p",[t._v("示例代码是相当于当前线程join要等待的所有线程")])]),t._v(" "),e("h6",{attrs:{id:"cyclicbarrier-循环栅栏"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier-循环栅栏"}},[t._v("#")]),t._v(" CyclicBarrier 循环栅栏")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("newCyclicBarrier(20, new Runnable(){...})")]),t._v(" 满20人发车(满20个线程向下运行), 否则等待")])]),t._v(" "),e("h6",{attrs:{id:"phaser-阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#phaser-阶段"}},[t._v("#")]),t._v(" Phaser 阶段")]),t._v(" "),e("blockquote",[e("p",[t._v("按照不同阶段执行, 需要定义线程的注册/注销, 等待线程数量, 执行阶段等")]),t._v(" "),e("p",[t._v("场景: 遗传算法")])]),t._v(" "),e("h6",{attrs:{id:"readwhitelock-读写锁-共享锁-排他锁-互斥锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readwhitelock-读写锁-共享锁-排他锁-互斥锁"}},[t._v("#")]),t._v(" ReadWhiteLock 读写锁 (共享锁&排他锁/互斥锁)")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("Lock readLock = readWriteLock.readLock();")]),t._v(" 获取读锁, 共享的, 可以让读线程读, 但是不允许写")]),t._v(" "),e("p",[e("code",[t._v("Lock writeLock = readWriteLock.writeLock();")]),t._v(" 获取写锁, 排他的")])]),t._v(" "),e("p",[t._v("自己要去了解 StampedLock")]),t._v(" "),e("h6",{attrs:{id:"semaphore-信号量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#semaphore-信号量"}},[t._v("#")]),t._v(" Semaphore 信号量")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("new Semaphore(1)")]),t._v(" 设置信号量, 还可以设置是否公平, 是否先去排队(AQS队列)")]),t._v(" "),e("p",[e("code",[t._v("s.acquire()")]),t._v(" 获得信号, 并使信号量减一, 如果没有信号量, 等着")]),t._v(" "),e("p",[e("code",[t._v("s.release()")]),t._v(" 把信号还回去, 信号量加一, 别人可以继续获得")]),t._v(" "),e("p",[t._v("场景: 限流, 最多允许同时运行的线程数量 (买票)")])]),t._v(" "),e("h6",{attrs:{id:"exchanger-交换器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exchanger-交换器"}},[t._v("#")]),t._v(" Exchanger 交换器")]),t._v(" "),e("blockquote",[e("p",[t._v("线程之间交换数据")]),t._v(" "),e("p",[e("code",[t._v("Exchanger.exchange()")]),t._v(" 阻塞!")]),t._v(" "),e("p",[t._v("维护了两个格子, 收集数据后互相交换")])]),t._v(" "),e("h2",{attrs:{id:"第四天-面试题-locksupport-源码阅读技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第四天-面试题-locksupport-源码阅读技巧"}},[t._v("#")]),t._v(" 第四天 面试题 LockSupport 源码阅读技巧")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("淘宝面试题\n\t1. 实现一个容器, 提供两个方法, add, size ; 写两个线程, 线程1添加10个元素到容器中, 线程2实现监控元素个数, 当个数到5个时, 线程2给出提示并结束;\n\t2. 写一个固定容量同步容器, 拥有put和get方法, 以及getCount方法, 能够支持2个生产者线程以及10个消费者线程的阻塞调用;\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("上节课少讲了LockSupport")]),t._v(" "),e("h6",{attrs:{id:"locksupport"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#locksupport"}},[t._v("#")]),t._v(" LockSupport")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("LockSupport.park()")])]),t._v(" "),e("p",[e("code",[t._v("LockSupport.unpark(t1)")]),t._v("  可以在park之前调用")]),t._v(" "),e("p",[t._v("让线程阻塞, 唤醒")]),t._v(" "),e("p",[t._v("还是 unsafe 类的 park , 调用了底层C代码")])]),t._v(" "),e("p",[t._v("面试题目1")]),t._v(" "),e("blockquote",[e("p",[t._v("volatile 实际中尽量别用, 用也要修饰简单变量, 修饰引用不会作用到引用对象的属性, 别的线程还是不可见")]),t._v(" "),e("p",[e("code",[t._v("obj.notify()")]),t._v(" 不释放锁! 不会释放锁, 只是通知")]),t._v(" "),e("p",[e("code",[t._v("obj.wait()")]),t._v(" 释放锁! 立即释放锁以便其他线程执行")]),t._v(" "),e("p",[e("code",[t._v("wait + notify")]),t._v(" 需要牢牢掌握")]),t._v(" "),e("p",[e("code",[t._v("countDownLatch")]),t._v(" 门栓*2")]),t._v(" "),e("p",[e("code",[t._v("LockSupport")])])]),t._v(" "),e("p",[t._v("面试题目2")]),t._v(" "),e("blockquote",[e("p",[t._v("生产消费者问题 - 我第一次阅读理解有问题")]),t._v(" "),e("p",[t._v("我的解法是读写锁, get/getCount读锁不能写可以一起读, put写锁互斥锁,其他都不可以 - 有问题")]),t._v(" "),e("p",[t._v("synchronize 可以写")]),t._v(" "),e("p",[t._v("ReentranLock 可以设置不同的 条件Condition 两个版本都可以背")]),t._v(" "),e("p",[t._v("Condition 本质是不同的等待队列")]),t._v(" "),e("p",[e("code",[t._v("while")]),t._v(" 不要用 "),e("code",[t._v("if")])])]),t._v(" "),e("p",[t._v("第四天作业")]),t._v(" "),e("blockquote",[e("p",[t._v("要求用线程顺序打印A1B2C3...Z26")]),t._v(" "),e("p",[t._v("阅读 CountDownLatch")])]),t._v(" "),e("p",[t._v("ReentrantLock 源码阅读")]),t._v(" "),e("blockquote",[e("p",[t._v("被劝退去学设计模式")]),t._v(" "),e("p",[t._v("画图 UML 方法之间的调用, 类图")]),t._v(" "),e("p",[t._v("模板方法, 钩子函数")]),t._v(" "),e("p",[t._v("AQS (CLH) 核心结构 state 由子类来定义 下跟队列(装Thread, 双向链表) 重点是如何入队出队")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("源码阅读原则: \n- 跑不起来不读\n- 解决问题就好\n- 一条线索到底\n- 无关细节略过\n- 一般不读静态\n- 一般动态读法\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://p0.meituan.net/travelcube/7132e4cef44c26f62835b197b239147b18062.png",alt:"CLH队列"}})]),t._v(" "),e("h2",{attrs:{id:"第五天-aqs-threadlocal-四种引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第五天-aqs-threadlocal-四种引用"}},[t._v("#")]),t._v(" 第五天 AQS ThreadLocal 四种引用")]),t._v(" "),e("h6",{attrs:{id:"aqs源码阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#aqs源码阅读"}},[t._v("#")]),t._v(" AQS源码阅读")]),t._v(" "),e("blockquote",[e("p",[t._v("AQS 尾部添加节点, 使用CAS操作tail, 只要观测tail节点, 来替代锁操作(提高效率!)")]),t._v(" "),e("p",[t._v("如果用锁, 整个队列锁住会导致效率大幅降低")]),t._v(" "),e("p",[e("code",[t._v("acquireQueued")]),t._v("  拿到前置节点, 如果前置节点是头结点, 就去竞争, 如果拿到了锁, 就把自己设置为头结点 否则就阻塞, 等前置节点叫醒自己")]),t._v(" "),e("ul",[e("li",[t._v("VarHandler 句柄/指针/引用 (jdk1.9之后才有), 用来将基础类型作为引用类型来操作, handle还可以做cas, 原子性的加法, ++等,  效率高, 直接操作二进制码")])])]),t._v(" "),e("h6",{attrs:{id:"threadlocal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[t._v("#")]),t._v(" ThreadLocal")]),t._v(" "),e("blockquote",[e("p",[t._v("每个线程中拥有自己的一份")]),t._v(" "),e("p",[t._v("set值设置到了当前线程的map里, 不同线程拥有自己的Map")]),t._v(" "),e("p",[t._v("应用场景: 声明式事务, 保证同一个Connection")])]),t._v(" "),e("h6",{attrs:{id:"强引用-普通引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强引用-普通引用"}},[t._v("#")]),t._v(" 强引用, 普通引用")]),t._v(" "),e("blockquote",[e("p",[t._v("java引用有四种, 强 软 弱 虚")]),t._v(" "),e("p",[t._v("强引用, 就是普通的引用, 强引用的对象不会被回收")])]),t._v(" "),e("h6",{attrs:{id:"softreference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#softreference"}},[t._v("#")]),t._v(" SoftReference")]),t._v(" "),e("blockquote",[e("p",[t._v("软引用, 当有对象被软引用的时候, 只有系统内存不够用的时候会回收这个对象, 跑测试的时候需要设置 -Xms:20M -Xmx:20M (堆内存最小20m, 最大20m) 可以用做缓存...")])]),t._v(" "),e("h6",{attrs:{id:"weakreference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weakreference"}},[t._v("#")]),t._v(" WeakReference")]),t._v(" "),e("blockquote",[e("p",[t._v("弱引用, 只要GC看到这个对象被弱引用的时候, 直接回收, 当强引用取消指向这个对象, 这个对象很快就会被回收")]),t._v(" "),e("p",[t._v("使用场景: 容器里, ThreadLocal")]),t._v(" "),e("p",[t._v("ThreadLocalMap中所存的key是弱引用指向ThreadLocal对象, 当线程结束, tl不指向ThreadLocal了, ThreadLocal就会被回收, 如果key是强引用, 这种情况下回造成内存泄漏, ThreadLocal永远不会被回收")]),t._v(" "),e("p",[t._v("但即使jdk已经这样设定了弱引用, key-value值依旧存在(无法访问到, 构成内存泄漏), 这时候必须调用 ThreadLocal 对象的 remove() 方法来解决, 使用ThreadLocal时必须要注意")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/10/16d1a23292305e7c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),t._v(" "),e("h6",{attrs:{id:"虚引用-phantomreference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚引用-phantomreference"}},[t._v("#")]),t._v(" 虚引用 PhantomReference")]),t._v(" "),e("blockquote",[e("p",[t._v("对api调用基本没用, 给写JVM/写框架的人回收堆外内存用的")]),t._v(" "),e("p",[t._v("另: 一般生产环境中JVM堆内存最大最小设置一样")]),t._v(" "),e("p",[t._v("GC看到就回收虚引用的对象, 虚引用还关联一个队列QUEUE, 只要自己被回收, 就在这个队列里放入一条记录, 只是给个通知使用.. 里面的值你都拿不到(所以没用)")]),t._v(" "),e("p",[t._v("NIO中有个 DirectByteBuffer 直接内存, 可以指向JVM堆外内存, GC没有办法回收到堆外内存, JVM通过检测虚引用的通知QUEUE, 来回收堆外内存 unsafe")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("DirectByteBuffer -----------------\x3e 堆外内存\n\t\t^\n\t\t|\n\t\t|\n\t\t|\nQueue[ = = = = = ]\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("h6",{attrs:{id:"第五天作业"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第五天作业"}},[t._v("#")]),t._v(" 第五天作业")]),t._v(" "),e("blockquote",[e("p",[t._v("AQS unlock源码")]),t._v(" "),e("p",[t._v("WeakHashMap 类源码")])]),t._v(" "),e("h2",{attrs:{id:"第六天-各种容器-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第六天-各种容器-queue"}},[t._v("#")]),t._v(" 第六天 各种容器 QUEUE")]),t._v(" "),e("blockquote",[e("p",[t._v("为了讲线程池作为铺垫, 需要背这张图↓")])]),t._v(" "),e("ul",[e("li",[t._v("Collection\n"),e("ul",[e("li",[t._v("List\n"),e("ul",[e("li",[t._v("CopyOnWriteList")]),t._v(" "),e("li",[t._v("Vector\n"),e("ul",[e("li",[t._v("Stack")])])]),t._v(" "),e("li",[t._v("ArrayList")]),t._v(" "),e("li",[t._v("LinkedList")])])]),t._v(" "),e("li",[t._v("Set\n"),e("ul",[e("li",[t._v("HashSet, LinkedHashSet")]),t._v(" "),e("li",[t._v("SortedSet, TreeSet")]),t._v(" "),e("li",[t._v("EnumSet")]),t._v(" "),e("li",[t._v("CopyOnWriteArraySet")]),t._v(" "),e("li",[t._v("ConcurrentSkipListSet")])])]),t._v(" "),e("li",[t._v("Queue\n"),e("ul",[e("li",[t._v("Deque")]),t._v(" "),e("li",[t._v("BlockingQueue\n"),e("ul",[e("li",[t._v("ArrayBlockingQueue")]),t._v(" "),e("li",[t._v("LinkedBlockingQueue")]),t._v(" "),e("li",[t._v("PriorityBlockingQueue")]),t._v(" "),e("li",[t._v("TransferQueue , LinkedTransferQueue")]),t._v(" "),e("li",[t._v("SynchronousQueue")])])]),t._v(" "),e("li",[t._v("PriorityQueue")]),t._v(" "),e("li",[t._v("ConcurrentLinkedQueue")]),t._v(" "),e("li",[t._v("DelayQueue")])])])])]),t._v(" "),e("li",[t._v("Map\n"),e("ul",[e("li",[t._v("HashMap\n"),e("ul",[e("li",[t._v("LinkedHashMap")])])]),t._v(" "),e("li",[t._v("TreeMap")]),t._v(" "),e("li",[t._v("WeakHashMap")]),t._v(" "),e("li",[t._v("IdentityHashMap")])])])]),t._v(" "),e("blockquote",[e("p",[t._v("物理上的存储结构只有两种: Array 和 LinkedList")]),t._v(" "),e("p",[t._v("Queue 主要用于高并发")]),t._v(" "),e("p",[t._v("Deque 双端队列")]),t._v(" "),e("p",[t._v("Java 1.0 只有 Vector 和 HashTable, 相关操作都加上了 synchronized, 现在基本不用")]),t._v(" "),e("p",[t._v("后面陆续加上 HashMap, synchronizedHashMap, ConcurrentHashMap")])]),t._v(" "),e("h6",{attrs:{id:"性能测试用例-以实测为主"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能测试用例-以实测为主"}},[t._v("#")]),t._v(" 性能测试用例, 以实测为主")]),t._v(" "),e("blockquote",[e("p",[t._v("ConcurrentHashMap 插入效率低, 读取效率高非常多 相比于HashTable和SynchronizedMap")]),t._v(" "),e("p",[t._v("售票 Vector -- Queue.")]),t._v(" "),e("p",[t._v("ConcurrentLinkedQueue CAS保证原子性")])]),t._v(" "),e("h6",{attrs:{id:"线程安全的map-和不安全的map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程安全的map-和不安全的map"}},[t._v("#")]),t._v(" 线程安全的Map 和不安全的Map")]),t._v(" "),e("blockquote",[e("p",[t._v("HashMap 无序, TreeMap 红黑树实现 有序")]),t._v(" "),e("p",[t._v("ConcurrentHashMap CAS红黑树实现复杂, 所以没有Concurrent的TreeMap")]),t._v(" "),e("p",[t._v("ConcurrentSkipListMap 跳表, 有序, 代替实现线程安全的TreeMap")])]),t._v(" "),e("h6",{attrs:{id:"copyonwritelist-set-写时复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritelist-set-写时复制"}},[t._v("#")]),t._v(" CopyOnWriteList / Set 写时复制")]),t._v(" "),e("blockquote",[e("p",[t._v("写的少, 读的多, 读的时候不加锁, 写的时候在原来的基础上复制一份List/Set, 做完写操作之后将原引用指向操作后的复制List/Set , 以此来保证线程安全")]),t._v(" "),e("p",[t._v("add() 加锁, 数组扩容一格, 将数据放入")]),t._v(" "),e("p",[t._v("本质上就是读写锁的变形")])]),t._v(" "),e("h6",{attrs:{id:"queue-接口的基本操作-与list区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#queue-接口的基本操作-与list区别"}},[t._v("#")]),t._v(" Queue 接口的基本操作, 与List区别?")]),t._v(" "),e("blockquote",[e("p",[t._v("添加了对线程友好的api")]),t._v(" "),e("p",[t._v("offer() 添加")]),t._v(" "),e("p",[t._v("poll() 查询并删除")]),t._v(" "),e("p",[t._v("peek() 查询不删除")])]),t._v(" "),e("h6",{attrs:{id:"blokingqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#blokingqueue"}},[t._v("#")]),t._v(" BlokingQueue")]),t._v(" "),e("blockquote",[e("p",[t._v("重点在于Blocking 阻塞")]),t._v(" "),e("p",[t._v("对生产者消费者友好的线程安全模型")]),t._v(" "),e("p",[t._v("在原来Queue的基础上添加了两个阻塞方法")]),t._v(" "),e("p",[t._v("put() 装, 如果Queue满了, 该线程会阻塞住")]),t._v(" "),e("p",[t._v("take() 拿, 如果Queue空了, 该线程会阻塞住")]),t._v(" "),e("p",[t._v("源码使用 Condition的await()和signal()")]),t._v(" "),e("p",[t._v("LinkedBlokingQueue 无界, 但不能超过Integer.MAX_VALUE")]),t._v(" "),e("p",[t._v("ArrayBlokingQueue 有界")]),t._v(" "),e("p",[t._v("SynchronusQueue")]),t._v(" "),e("p",[t._v("TransferQueue")])]),t._v(" "),e("h6",{attrs:{id:"delayqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delayqueue"}},[t._v("#")]),t._v(" DelayQueue")]),t._v(" "),e("blockquote",[e("p",[t._v("队列中加入任务需要实现Delayed接口, 定义参数, 定义参数之间比较的方法, 可以指定任务的执行顺序")]),t._v(" "),e("p",[t._v("使用场景: 按时间进行任务调度")])]),t._v(" "),e("h6",{attrs:{id:"priorityqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[t._v("#")]),t._v(" PriorityQueue")]),t._v(" "),e("blockquote",[e("p",[t._v("底层是小顶堆?, 会根据策略对加入元素进行排序")])]),t._v(" "),e("h6",{attrs:{id:"synchronusqueue-容量为0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronusqueue-容量为0"}},[t._v("#")]),t._v(" SynchronusQueue 容量为0")]),t._v(" "),e("blockquote",[e("p",[t._v("和 Exchanger 类似")]),t._v(" "),e("p",[t._v("容量永远为0 , 直接put会一直阻塞, 直到有其他线程take()")]),t._v(" "),e("p",[t._v("而使用其他方法比如add() 会直接报错, 因为队列满了")]),t._v(" "),e("p",[t._v("等于两个线程交换数据")]),t._v(" "),e("p",[t._v("线程池中用处最大的Queue")])]),t._v(" "),e("h6",{attrs:{id:"transferqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transferqueue"}},[t._v("#")]),t._v(" TransferQueue")]),t._v(" "),e("blockquote",[e("p",[t._v("把数据放在队列中, 然后阻塞, 等有人把这个数据拿走之后再继续运行")])]),t._v(" "),e("h2",{attrs:{id:"第七天-线程池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第七天-线程池"}},[t._v("#")]),t._v(" 第七天 线程池")]),t._v(" "),e("h6",{attrs:{id:"两个线程-顺序打印a1b2c3-z26"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两个线程-顺序打印a1b2c3-z26"}},[t._v("#")]),t._v(" 两个线程 顺序打印A1B2C3...Z26")]),t._v(" "),e("blockquote",[e("p",[t._v("重点掌握 wait notify 和 LockSupport")]),t._v(" "),e("p",[t._v("锁下面的等待队列, notify是随机叫醒一个, condition是等待队列, 可以同一个锁有多个等待队列")]),t._v(" "),e("p",[t._v("cas, LockSupport, BlockingQueue, PipedStream(效率低), exchanger")])]),t._v(" "),e("h6",{attrs:{id:"线程池-executor-executorservice"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程池-executor-executorservice"}},[t._v("#")]),t._v(" 线程池 Executor ExecutorService")]),t._v(" "),e("blockquote",[e("p",[t._v("Executor 执行者, 其中有执行的方法")]),t._v(" "),e("p",[t._v("ExecutorService 继承于 Executor , 拓展了执行者的生命周期")])]),t._v(" "),e("h6",{attrs:{id:"callable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#callable"}},[t._v("#")]),t._v(" Callable")]),t._v(" "),e("blockquote",[e("p",[t._v("与Runnable类似, 区别是call() 拥有返回值")])]),t._v(" "),e("h6",{attrs:{id:"future"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#future"}},[t._v("#")]),t._v(" Future")]),t._v(" "),e("blockquote",[e("p",[t._v("Callable返回值该怎么拿到? Future来保存异步执行的结果")]),t._v(" "),e("p",[t._v("Future的get()是阻塞的, 线程池的submit(Callable) 是异步的")]),t._v(" "),e("p",[t._v("异步一般是区别于同步:")]),t._v(" "),e("p",[t._v("同步: 执行的方法有返回值, 需要等到执行结束之后拿到返回值才可以继续运行后面的代码")]),t._v(" "),e("p",[t._v("异步: 不需要等到返回值就可以运行后面的代码")])]),t._v(" "),e("h6",{attrs:{id:"futuretask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#futuretask"}},[t._v("#")]),t._v(" FutureTask")]),t._v(" "),e("blockquote",[e("p",[t._v("实现了RunnableFuture, 也就是继承了Runnable和Future, 使得自己又是可执行的任务, 又能够存储异步执行的结果")]),t._v(" "),e("p",[t._v("更加好用的类")]),t._v(" "),e("p",[t._v("场景: ForkJoinPool WorkStealingPool")])]),t._v(" "),e("h6",{attrs:{id:"completablefuture"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#completablefuture"}},[t._v("#")]),t._v(" CompletableFuture")]),t._v(" "),e("blockquote",[e("p",[t._v("任务的管理类")]),t._v(" "),e("p",[t._v("底层负责, 使用灵活, 使用ForkJoinPool")]),t._v(" "),e("p",[t._v("supplyAsync() 异步提交任务")]),t._v(" "),e("p",[t._v("allOf(future1, future2 ...) 对批量任务进行管理")]),t._v(" "),e("p",[t._v("异步调用的写法 thenApply() thenAccept()")])]),t._v(" "),e("h6",{attrs:{id:"线程池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),e("blockquote",[e("p",[t._v("维护着线程集合 和任务集合")])]),t._v(" "),e("h6",{attrs:{id:"threadpoolexecutor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[t._v("#")]),t._v(" ThreadPoolExecutor")]),t._v(" "),e("blockquote",[e("p",[t._v("继承于AbstractExcutorService, 线程池的执行器")])]),t._v(" "),e("h6",{attrs:{id:"手动定义线程池-7个参数-背过"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#手动定义线程池-7个参数-背过"}},[t._v("#")]),t._v(" 手动定义线程池, 7个参数 "),e("u",[t._v("背过")])]),t._v(" "),e("blockquote",[e("ol",[e("li",[t._v("核心线程数 不会归还OS的线程")]),t._v(" "),e("li",[t._v("最大线程数 超出核心线程, 最大额外扩展的线程总数")]),t._v(" "),e("li",[t._v("生存时间 额外线程不使用的timeout后还给OS")]),t._v(" "),e("li",[t._v("时间单位")]),t._v(" "),e("li",[t._v("任务队列 各种BlockingQueue, 用来装任务, 不同的队列可以产生不同的线程池")]),t._v(" "),e("li",[t._v("线程工厂, 需要传ThreadFactory,")])]),t._v(" "),e("ul",[e("li",[t._v("实现newThread()方法, 定义产生线程的方式, 可以定义线程名字, 线程组名字(用于jstack排查问题!) 定义守护线程, 优先级等")])]),t._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[t._v("拒绝策略")])]),t._v(" "),e("ul",[e("li",[t._v("线程池忙, 任务队列满的时候执行的策略, JDK默认提供4种(基本不用), 一般情况下自定义")]),t._v(" "),e("li",[t._v("Abort抛异常")]),t._v(" "),e("li",[t._v("Discard扔掉(不加入任务队列)")]),t._v(" "),e("li",[t._v("DiscardOldest扔掉任务队列中存在最久的(最早加入的)")]),t._v(" "),e("li",[t._v("CallerRuns调用者(线程)处理任务")])])]),t._v(" "),e("h2",{attrs:{id:"第八天"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第八天"}},[t._v("#")]),t._v(" 第八天")]),t._v(" "),e("blockquote",[e("p",[t._v("Executors 线程池的工厂")]),t._v(" "),e("p",[t._v("newSingleThreadExecutor(); 线程池只能运行一个线程, 能保证扔进去的线程顺序执行")])]),t._v(" "),e("h6",{attrs:{id:"singlethreadexecutor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#singlethreadexecutor"}},[t._v("#")]),t._v(" SingleThreadExecutor")]),t._v(" "),e("blockquote",[e("p",[t._v("为什么要有单线程的线程池?")]),t._v(" "),e("p",[t._v("任务队列, 生命周期管理")]),t._v(" "),e("p",[t._v("参数: 核心1, 最大1, 时间0, LinkedBlockingQueue(Integer.MAX_VALUE)")])]),t._v(" "),e("h6",{attrs:{id:"cachedthreadpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cachedthreadpool"}},[t._v("#")]),t._v(" CachedThreadPool")]),t._v(" "),e("blockquote",[e("p",[t._v("核心0, 最大Int.MAX_VALUE, 时间60s, SynchronousQueue")]),t._v(" "),e("p",[t._v("基本上来一个任务直接启动, 使用还未到60s的空线程或线程满的时候新建线程, 可能启动线程非常多")])]),t._v(" "),e("h6",{attrs:{id:"fixedthreadpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fixedthreadpool"}},[t._v("#")]),t._v(" FixedThreadPool")]),t._v(" "),e("blockquote",[e("p",[t._v("指定固定的线程数")]),t._v(" "),e("p",[t._v("核心x, 最大x, 时间0, LinkedBlockingQueue")])]),t._v(" "),e("h6",{attrs:{id:"cached-vs-fixed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cached-vs-fixed"}},[t._v("#")]),t._v(" Cached VS Fixed")]),t._v(" "),e("blockquote",[e("p",[t._v("任务不会堆积, 需要处理的线程数量差异较大 - Cached")]),t._v(" "),e("p",[t._v("足够的线程处理 - Fixed")]),t._v(" "),e("p",[t._v("Alibaba 都不用, 估算后自定义")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("调整线程池大小\n\t如果线程池中线程数量过多, 最终会竞争稀缺的处理器和内存资源, 浪费大量的时间在上下文切换上;\n\t线程池大小与处理器利用率之比可以用下面的公式进行估算\n\tN(thread) = N(CPU) * U(CPU) * (1 + W/C)\n\t\t\t  处理器核数\t  期望CPU利用率\t 等待时间与计算时间的比率\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("h6",{attrs:{id:"scheduledthreadpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpool"}},[t._v("#")]),t._v(" ScheduledThreadPool")]),t._v(" "),e("blockquote",[e("p",[t._v("定时任务的线程池")]),t._v(" "),e("p",[t._v("quartz cron 定时任务框架, 一般用这个")]),t._v(" "),e("p",[t._v("核心x, DelayedWorkQueue")]),t._v(" "),e("p",[t._v("scheduleAtFixedRate 固定频率执行任务")])]),t._v(" "),e("h6",{attrs:{id:"面试题-提供一个闹钟服务-订阅服务的人特别多-10亿-怎么优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面试题-提供一个闹钟服务-订阅服务的人特别多-10亿-怎么优化"}},[t._v("#")]),t._v(" 面试题: 提供一个闹钟服务, 订阅服务的人特别多(10亿), 怎么优化?")]),t._v(" "),e("blockquote",[e("p",[t._v("分治")])]),t._v(" "),e("h6",{attrs:{id:"concurrent-parallel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-parallel"}},[t._v("#")]),t._v(" concurrent parallel")]),t._v(" "),e("blockquote",[e("p",[t._v("并发指任务提交, 并行指任务执行, 并行是并发的子集, 并发量, 并行度")])]),t._v(" "),e("h6",{attrs:{id:"threadpoolexecutor-源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor-源码"}},[t._v("#")]),t._v(" ThreadPoolExecutor 源码")]),t._v(" "),e("blockquote",[e("p",[t._v("addWorker() 添加线程 CAS")]),t._v(" "),e("p",[t._v("worker数量先加一")]),t._v(" "),e("p",[t._v("启动Worker")]),t._v(" "),e("p",[t._v("worker extends AQS implements Runnable")])]),t._v(" "),e("h6",{attrs:{id:"workstealingpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workstealingpool"}},[t._v("#")]),t._v(" WorkStealingPool")]),t._v(" "),e("blockquote",[e("p",[t._v("原来的线程池是线程集合去任务队列中获取任务")]),t._v(" "),e("p",[t._v("每一个线程都有自己单独维护的队列, 当某个线程执行完自己的任务, 去别的线程的任务队列中偷任务执行")]),t._v(" "),e("p",[t._v("单独队列 VS 共享队列")]),t._v(" "),e("p",[t._v("本质上是一个 ForkJoinPool")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200628182327254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:""}})]),t._v(" "),e("h6",{attrs:{id:"forkjoinpool"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool"}},[t._v("#")]),t._v(" ForkJoinPool")]),t._v(" "),e("blockquote",[e("p",[t._v("分解汇总的任务, 把大的任务切分成一个个小任务执行(Fork), 小任务切成更小的任务, 切分逻辑可以自己定义, 执行完之后可以进行结果的汇总(Join)")]),t._v(" "),e("p",[t._v("用很少的线程可以执行很多的任务(子任务) TPE做不到先执行子任务")]),t._v(" "),e("p",[t._v("CPU密集型")]),t._v(" "),e("p",[t._v("ForkJoinTask 需要定义特殊的任务, 可以ForkJoin的任务")]),t._v(" "),e("p",[t._v("RecursiveAction 递归任务")])]),t._v(" "),e("h2",{attrs:{id:"第九天-jmh-disruptor-生产环境测试工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第九天-jmh-disruptor-生产环境测试工具"}},[t._v("#")]),t._v(" 第九天 JMH Disruptor 生产环境测试工具")]),t._v(" "),e("h6",{attrs:{id:"jmh-性能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jmh-性能测试"}},[t._v("#")]),t._v(" JMH 性能测试")]),t._v(" "),e("blockquote",[e("p",[t._v("Java Microbenchmark Harness 基本测试")]),t._v(" "),e("p",[t._v("warmup 预热 为了提前使JVM本地化")]),t._v(" "),e("p",[t._v("fork 启动多少线程执行")]),t._v(" "),e("p",[t._v("benchmarkMode 测试模式 Mode.Throughput 吞吐量")]),t._v(" "),e("p",[t._v("Measurement 整个测试程序执行测试多少次, 执行间隔多少时间")])]),t._v(" "),e("h6",{attrs:{id:"disruptor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disruptor"}},[t._v("#")]),t._v(" Disruptor")]),t._v(" "),e("blockquote",[e("p",[t._v("单机最快的消息队列")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200629103312331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQyNDgzMzQx,size_1,color_FFFFFF,t_70",alt:"1595742181425"}})]),t._v(" "),e("blockquote",[e("p",[t._v("核心: 环形buffer ringbuffer")]),t._v(" "),e("p",[t._v("生产者将消息放入环形buffer中, 当生产的消息想要放置的位置发现已经被其他未消费的消息占用了, 会启动等待策略(默认提供了8种)")]),t._v(" "),e("p",[t._v("队列(ringbuffer)中存储着事件Event, 由EventFactory生成, 由EventHandler来消费")]),t._v(" "),e("p",[t._v("启动Disruptor默认填充满ringbuffer(加速)")]),t._v(" "),e("p",[t._v("EventTranslator lambda表达式方式生成Event")])]),t._v(" "),e("h6",{attrs:{id:"生产者类型-single-multi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生产者类型-single-multi"}},[t._v("#")]),t._v(" 生产者类型 Single Multi")]),t._v(" "),e("blockquote",[e("p",[t._v("single 不加锁/不安全/速度快, multi 加锁/安全")])]),t._v(" "),e("h6",{attrs:{id:"等待策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#等待策略"}},[t._v("#")]),t._v(" 等待策略")]),t._v(" "),e("blockquote",[e("p",[t._v("BlockingWaitStrategy 生产满了, 阻塞")]),t._v(" "),e("p",[t._v("YieldingWaitStrategy 让出cpu, 试图让消费者先消费")]),t._v(" "),e("p",[t._v("SleepingWaitStrategy sleep一会")])]),t._v(" "),e("h6",{attrs:{id:"多消费者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多消费者"}},[t._v("#")]),t._v(" 多消费者")]),t._v(" "),e("blockquote",[e("p",[t._v("handlerEventsWith(...)")])]),t._v(" "),e("h6",{attrs:{id:"异常处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),e("blockquote",[e("p",[t._v("handleExceptionsFor().with()")])]),t._v(" "),e("h3",{attrs:{id:"纤程-协程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#纤程-协程"}},[t._v("#")]),t._v(" 纤程/协程")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200402214422641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMjYyNTcx,size_16,color_FFFFFF,t_70#pic_center",alt:"1596381077713"}})]),t._v(" "),e("blockquote",[e("p",[t._v("程序可以启动, - 多个进程 , 进程有多个线程 , 线程可以有多个纤程")]),t._v(" "),e("p",[t._v("线程和纤程都是通过内存栈的保存实现")]),t._v(" "),e("p",[t._v("纤程切换不调度内核级别资源, 而线程需要(重量级的调度)")]),t._v(" "),e("p",[t._v("线程无法大量创建, 会导致CPU的切换大量消耗资源")])]),t._v(" "),e("h4",{attrs:{id:"quasar"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quasar"}},[t._v("#")]),t._v(" Quasar")]),t._v(" "),e("blockquote",[e("p",[t._v("agent 代理实现")]),t._v(" "),e("p",[t._v("实现纤程保留自己的栈")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);