(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{404:function(t,a,_){"use strict";_.r(a);var r=_(45),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"rabbitmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[t._v("#")]),t._v(" RabbitMQ")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://www.bcoder.top/2020/01/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%B0%83%E7%A0%94/",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考资料: 消息队列调研"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("RabbitMQ是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端。")]),t._v(" "),_("p",[t._v("AMQP (Advanced Message Queuing Protocol) 高级消息队列协议是应用层协议的一个开放标准，为面向消息的中间件设计。主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。")]),t._v(" "),_("h3",{attrs:{id:"重要概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重要概念"}},[t._v("#")]),t._v(" 重要概念")]),t._v(" "),_("ul",[_("li",[t._v("VHost 虚拟主机; RabbitMQ提供的环境, 保证多个vhost之间互相隔离")]),t._v(" "),_("li",[t._v("publisher 生产者")]),t._v(" "),_("li",[t._v("consumer 消费者; 一个客户端只会建立一条长连接connection, 通过信道监听queue队列")]),t._v(" "),_("li",[t._v("message 消息: 消息头 + 消息体 + "),_("strong",[t._v("路由键")]),t._v("(route_key) (也要指定交换机)")]),t._v(" "),_("li",[t._v("broker 消息服务器, 消息代理; 将消息发送给指定交换机\n"),_("ul",[_("li",[_("strong",[t._v("Exchange 交换机")]),t._v(" 连接数个队列,负责接收消息,按照绑定关系存入队列")]),t._v(" "),_("li",[_("strong",[t._v("Queue 队列")]),t._v(" 真正存储消息的模块")]),t._v(" "),_("li",[_("strong",[t._v("Binding 绑定")]),t._v(" 路由键与队列的绑定关系, 交换机和队列之间是多对多的绑定关系")])])]),t._v(" "),_("li",[t._v("connection 连接; 连接中有多个通道")]),t._v(" "),_("li",[t._v("channel 信道,通道; 实际传输数据的通道")])]),t._v(" "),_("p",[_("img",{attrs:{src:"http://img.bcoder.top/2020.01.26.1/10.png",alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"交换机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#交换机"}},[t._v("#")]),t._v(" 交换机")]),t._v(" "),_("p",[t._v("交换器分4种：direct，headers，topic，fanout")]),t._v(" "),_("ul",[_("li",[t._v("direct\t直连, 路由键绑定的完全匹配, 只发送到一个队列")]),t._v(" "),_("li",[t._v("topic\t主题, 广播模式, 广播给绑定匹配的所有队列(绑定通配符 #: 0或多个单词; *: 一个单词)")]),t._v(" "),_("li",[t._v("fanout\t扇出, 广播模式, 广播给所有队列")]),t._v(" "),_("li",[t._v("headers\t直连, 不用路由键, 匹配header进行路由, 匹配条件更多, 但是性能差")])]),t._v(" "),_("h3",{attrs:{id:"消息确认ack"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息确认ack"}},[t._v("#")]),t._v(" 消息确认ACK")]),t._v(" "),_("p",[t._v("消息丢失可能出现的位置:")]),t._v(" "),_("ol",[_("li",[t._v("生产者 >>> Broker")]),t._v(" "),_("li",[t._v("Exchange >>> Queue")]),t._v(" "),_("li",[t._v("Queue >>> Consumer")])]),t._v(" "),_("h4",{attrs:{id:"生产者消息确认"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生产者消息确认"}},[t._v("#")]),t._v(" 生产者消息确认")]),t._v(" "),_("h5",{attrs:{id:"_1-事务机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-事务机制"}},[t._v("#")]),t._v(" 1.事务机制")]),t._v(" "),_("p",[t._v("生产者开启事务模式 > 发送消息 > 成功则提交, 失败则回滚")]),t._v(" "),_("h5",{attrs:{id:"_2-confirm机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-confirm机制"}},[t._v("#")]),t._v(" 2.Confirm机制")]),t._v(" "),_("p",[t._v("开启消息id, 消息投递成功后, ack同时将id带回; 如果失败则返回nack; confirm可以异步回调")]),t._v(" "),_("h4",{attrs:{id:"数据持久化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据持久化"}},[t._v("#")]),t._v(" 数据持久化")]),t._v(" "),_("ol",[_("li",[t._v("创建queue的时候设置为持久化, queue的元数据会被持久化")]),t._v(" "),_("li",[t._v("发送消息将deliveryMode设置为2, 消息持久化")])]),t._v(" "),_("h4",{attrs:{id:"消费者消息确认"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消费者消息确认"}},[t._v("#")]),t._v(" 消费者消息确认")]),t._v(" "),_("p",[t._v("消费者收到消息, 会发送ack给RabbitMQ, 然后RabbitMQ会把已ack的消息删除")]),t._v(" "),_("ol",[_("li",[t._v("默认情况会自动ack")]),t._v(" "),_("li",[t._v("可以关闭自动ack, 消费完毕后调用api手动ack")])]),t._v(" "),_("h3",{attrs:{id:"高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[t._v("#")]),t._v(" 高可用")]),t._v(" "),_("h4",{attrs:{id:"镜像集群模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#镜像集群模式"}},[t._v("#")]),t._v(" 镜像集群模式")]),t._v(" "),_("p",[t._v("镜像集群, 当主机处理消息时, 副本进行同步")]),t._v(" "),_("ol",[_("li",[t._v("性能开销大, 消息需要同步所有机器")]),t._v(" "),_("li",[t._v("扩展性低, 某个队列数据量过大时无法拆分")])]),t._v(" "),_("h4",{attrs:{id:"主从集群"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主从集群"}},[t._v("#")]),t._v(" 主从集群")]),t._v(" "),_("p",[t._v("使用HAproxy")])])}),[],!1,null,null,null);a.default=v.exports}}]);