(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{464:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Java集合容器面试题(重点)")]),t._v(" "),a("h2",{attrs:{id:"什么是集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是集合"}},[t._v("#")]),t._v(" 什么是集合")]),t._v(" "),a("p",[a("strong",[t._v("集合框架")]),t._v("：用于存储数据的容器。")]),t._v(" "),a("p",[t._v("集合框架是为表示和操作集合而规定的一种统一的标准的体系结构。 任何集合框架都包含三大块内容：对外的接口, 接口的实现和对集合运算的算法。")]),t._v(" "),a("p",[a("strong",[t._v("接口")]),t._v("：表示集合的抽象数据类型。接口允许我们操作集合时不必关注具体实现， 从而达到“多态”。在面向对象编程语言中，接口通常用来形成规范。")]),t._v(" "),a("p",[a("strong",[t._v("实现")]),t._v("：集合接口的具体实现，是重用性很高的数据结构。")]),t._v(" "),a("p",[a("strong",[t._v("算法")]),t._v("：在一个实现了某个集合框架中的接口的对象身上完成某种有用的计算的方法，例如查找、排序等。这些算法通常是多态的，因为相同的方法可以在同一个接口被多个类实现时有不同的表现。事实上，算法是可复用的函数。 它减少了程序设计的辛劳。")]),t._v(" "),a("p",[t._v("集合框架通过提供有用的数据结构和算法使你能集中注意力于你的程序的重要部分上，而不是为了让程序能正常运转而将注意力于底层设计上。")]),t._v(" "),a("p",[t._v("通过这些在无关API之间的简易的互用性, 使你免除了为改编对象或转换代码以便联合这些API而去写大量的代码。它提高了程序速度和质量。")]),t._v(" "),a("h2",{attrs:{id:"集合的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合的特点"}},[t._v("#")]),t._v(" 集合的特点")]),t._v(" "),a("p",[t._v("集合的特点主要有如下两点：")]),t._v(" "),a("ul",[a("li",[t._v("对象封装数据，对象多了也需要存储。集合用于存储对象。")]),t._v(" "),a("li",[t._v("对象的个数确定可以使用数组，对象的个数不确定的可以用集合。因为集合是可变长度的。")])]),t._v(" "),a("h2",{attrs:{id:"集合和数组的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合和数组的区别"}},[t._v("#")]),t._v(" 集合和数组的区别")]),t._v(" "),a("ul",[a("li",[t._v("数组是固定长度的；集合可变长度的。")]),t._v(" "),a("li",[t._v("数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。")]),t._v(" "),a("li",[t._v("数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。")])]),t._v(" "),a("p",[a("strong",[t._v("数据结构")]),t._v("：就是容器中存储数据的方式。")]),t._v(" "),a("p",[t._v("对于集合容器，有很多种。因为每一个容器的自身特点不同，其实原理在于每个容器的内部数据结构不同。")]),t._v(" "),a("p",[t._v("集合容器在不断向上抽取过程中，出现了集合体系。"),a("strong",[t._v("在使用一个体系的原则：参阅顶层内容。建立底层对象。")])]),t._v(" "),a("h2",{attrs:{id:"使用集合框架的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用集合框架的好处"}},[t._v("#")]),t._v(" 使用集合框架的好处")]),t._v(" "),a("ol",[a("li",[t._v("容量自增长")]),t._v(" "),a("li",[t._v("提供了高性能的数据结构和算法，使编码更轻松，提高了程序速度和质量")]),t._v(" "),a("li",[t._v("允许不同 API 之间的互操作，API之间可以来回传递集合")]),t._v(" "),a("li",[t._v("可以方便地扩展或改写集合，提高代码复用性和可操作性")]),t._v(" "),a("li",[t._v("通过使用JDK自带的集合类，可以降低代码维护和学习新API成本")])]),t._v(" "),a("h2",{attrs:{id:"常用的集合类有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的集合类有哪些"}},[t._v("#")]),t._v(" 常用的集合类有哪些？")]),t._v(" "),a("p",[t._v("Map接口和Collection接口是所有集合框架的父接口：")]),t._v(" "),a("ol",[a("li",[t._v("Collection接口的子接口包括：Set List Queue")]),t._v(" "),a("li",[t._v("Map接口的实现类主要有：HashMap、TreeMap、Hashtable、 ConcurrentHashMap以及Properties等")]),t._v(" "),a("li",[t._v("Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等")]),t._v(" "),a("li",[t._v("List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等")])]),t._v(" "),a("h2",{attrs:{id:"list-set-map三者的区别-list、set、map-是否继-承自-collection-接口-list、map、set-三个接口存取-元素时-各有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-set-map三者的区别-list、set、map-是否继-承自-collection-接口-list、map、set-三个接口存取-元素时-各有什么特点"}},[t._v("#")]),t._v(" List，Set，Map三者的区别？List、Set、Map 是否继 承自 Collection 接口？List、Map、Set 三个接口存取 元素时，各有什么特点？")]),t._v(" "),a("p",[a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",width:"581px",height:"431px",viewBox:"-0.5 -0.5 581 431"}},[a("defs"),a("g",[a("rect",{attrs:{x:"260",y:"0",width:"120",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"15px","margin-left":"261px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("Collection")])])])]),a("text",{attrs:{x:"320",y:"19",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("Collection")])],1)]),a("path",{attrs:{d:"M 120 80 L 120 55 L 290 55 L 290 38.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 290 31.12 L 293.5 38.12 L 286.5 38.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"60",y:"80",width:"120",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"95px","margin-left":"61px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("List"),a("span",{staticStyle:{color:"rgba(0 , 0 , 0 , 0)","font-family":"monospace","font-size":"0px"}},[t._v("%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22Collection%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22210%22%20y%3D%2240%22%20width%3D%22120%22%20height%3D%2230%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E")])])])])]),a("text",{attrs:{x:"120",y:"99",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("List%3CmxGraphModel%...")])],1)]),a("path",{attrs:{d:"M 340 80 L 340 55 L 320 55 L 320 38.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 320 31.12 L 323.5 38.12 L 316.5 38.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"280",y:"80",width:"120",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"95px","margin-left":"281px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("Queue")])])])]),a("text",{attrs:{x:"340",y:"99",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("Queue")])],1)]),a("path",{attrs:{d:"M 520 80 L 520 55 L 350 55 L 350 38.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 350 31.12 L 353.5 38.12 L 346.5 38.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"460",y:"80",width:"120",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"95px","margin-left":"461px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("Set")])])])]),a("text",{attrs:{x:"520",y:"99",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("Set")])],1)]),a("rect",{attrs:{x:"260",y:"240",width:"120",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"255px","margin-left":"261px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("Map")])])])]),a("text",{attrs:{x:"320",y:"259",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("Map")])],1)]),a("path",{attrs:{d:"M 340 160 L 340 118.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 340 111.12 L 343.5 118.12 L 336.5 118.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"310",y:"160",width:"60",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"58px",height:"1px","padding-top":"175px","margin-left":"311px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("Deque")])])])]),a("text",{attrs:{x:"340",y:"179",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("Deque")])],1)]),a("path",{attrs:{d:"M 435 160 L 435 135 L 370 135 L 370 118.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 370 111.12 L 373.5 118.12 L 366.5 118.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"380",y:"160",width:"110",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"108px",height:"1px","padding-top":"175px","margin-left":"381px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("BlockingQueue")])])])]),a("text",{attrs:{x:"435",y:"179",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("BlockingQueue")])],1)]),a("path",{attrs:{d:"M 52.5 160 L 52.5 135 L 90 135 L 90 118.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 90 111.12 L 93.5 118.12 L 86.5 118.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"0",y:"160",width:"70",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"68px",height:"1px","padding-top":"175px","margin-left":"1px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("Vector")])])])]),a("text",{attrs:{x:"35",y:"179",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("Vector")])],1)]),a("path",{attrs:{d:"M 120 160 L 120 118.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 120 111.12 L 123.5 118.12 L 116.5 118.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"80",y:"160",width:"80",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"78px",height:"1px","padding-top":"175px","margin-left":"81px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("ArrayList")])])])]),a("text",{attrs:{x:"120",y:"179",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("ArrayList")])],1)]),a("path",{attrs:{d:"M 195 160 L 195 135 L 150 135 L 150 118.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 150 111.12 L 153.5 118.12 L 146.5 118.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("path",{attrs:{d:"M 245 160 L 245 135 L 310 135 L 310 118.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 310 111.12 L 313.5 118.12 L 306.5 118.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"170",y:"160",width:"100",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"98px",height:"1px","padding-top":"175px","margin-left":"171px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("LinkedList")])])])]),a("text",{attrs:{x:"220",y:"179",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("LinkedList")])],1)]),a("path",{attrs:{d:"M 155 350 L 155 310 L 290 310 L 290 278.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 290 271.12 L 293.5 278.12 L 286.5 278.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"120",y:"350",width:"70",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"68px",height:"1px","padding-top":"365px","margin-left":"121px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("HashMap")])])])]),a("text",{attrs:{x:"155",y:"369",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("HashMap")])],1)]),a("path",{attrs:{d:"M 240 350 L 240 310 L 290 310 L 290 278.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 290 271.12 L 293.5 278.12 L 286.5 278.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"200",y:"350",width:"80",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"78px",height:"1px","padding-top":"365px","margin-left":"201px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("HashTable")])])])]),a("text",{attrs:{x:"240",y:"369",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("HashTable")])],1)]),a("path",{attrs:{d:"M 320 350 L 320 278.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 320 271.12 L 323.5 278.12 L 316.5 278.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"290",y:"350",width:"120",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"365px","margin-left":"291px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("WeakHashMap")])])])]),a("text",{attrs:{x:"350",y:"369",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("WeakHashMap")])],1)]),a("path",{attrs:{d:"M 170 400 L 155 400 L 155 388.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 155 381.12 L 158.5 388.12 L 151.5 388.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"120",y:"400",width:"100",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"98px",height:"1px","padding-top":"415px","margin-left":"121px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("LinkedHashMap")])])])]),a("text",{attrs:{x:"170",y:"419",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("LinkedHashMap")])],1)]),a("path",{attrs:{d:"M 480 350 L 480 310 L 350 310 L 350 278.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 350 271.12 L 353.5 278.12 L 346.5 278.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"420",y:"350",width:"120",height:"30",fill:"#d5e8d4",stroke:"#82b366","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"365px","margin-left":"421px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("SortedMap")])])])]),a("text",{attrs:{x:"480",y:"369",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("SortedMap")])],1)]),a("path",{attrs:{d:"M 480 400 L 480 388.12",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"stroke"}}),a("path",{attrs:{d:"M 480 381.12 L 483.5 388.12 L 476.5 388.12 Z",fill:"none",stroke:"#000000","stroke-miterlimit":"10","pointer-events":"all"}}),a("rect",{attrs:{x:"420",y:"400",width:"120",height:"30",fill:"#dae8fc",stroke:"#6c8ebf","pointer-events":"all"}}),a("g",{attrs:{transform:"translate(-0.5 -0.5)"}},[a("switch",[a("foreignObject",{staticStyle:{overflow:"visible","text-align":"left"},attrs:{"pointer-events":"none",width:"100%",height:"100%",requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}},[a("div",{staticStyle:{display:"flex","align-items":"unsafe center","justify-content":"unsafe center",width:"118px",height:"1px","padding-top":"415px","margin-left":"421px"},attrs:{xmlns:"http://www.w3.org/1999/xhtml"}},[a("div",{staticStyle:{"box-sizing":"border-box","font-size":"0","text-align":"center"}},[a("div",{staticStyle:{display:"inline-block","font-size":"12px","font-family":"Helvetica",color:"#000000","line-height":"1.2","pointer-events":"all","white-space":"normal","word-wrap":"normal"}},[t._v("TreeMap")])])])]),a("text",{attrs:{x:"480",y:"419",fill:"#000000","font-family":"Helvetica","font-size":"12px","text-anchor":"middle"}},[t._v("TreeMap")])],1)])]),a("switch",[a("g",{attrs:{requiredFeatures:"http://www.w3.org/TR/SVG11/feature#Extensibility"}}),a("a",{attrs:{transform:"translate(0,-5)","xlink:href":"https://www.diagrams.net/doc/faq/svg-export-text-problems",target:"_blank"}},[a("text",{attrs:{"text-anchor":"middle","font-size":"10px",x:"50%",y:"100%"}},[t._v("Viewer does not support full SVG 1.1")])])])])]),t._v(" "),a("p",[t._v("Java 容器分为 Collection 和 Map 两大类，Collection集合的子接口有Set、 List、Queue三种子接口。常用的是Set和List; 而Map不是collection的子接口。")]),t._v(" "),a("p",[t._v("Collection集合主要有List和Set两大接口")]),t._v(" "),a("ul",[a("li",[t._v("List：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重 复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList、LinkedList  和 Vector。")]),t._v(" "),a("li",[t._v("Set：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素， 只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、 LinkedHashSet 以及 TreeSet。")])]),t._v(" "),a("p",[t._v("Map是一个键值对集合，存储键、值和之间的映射。 Key无序，唯一；value 允许重复。从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。")]),t._v(" "),a("p",[t._v("Map 的常用实现类：HashMap、TreeMap、HashTable、LinkedHashMap、 ConcurrentHashMap")]),t._v(" "),a("h2",{attrs:{id:"集合框架底层数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合框架底层数据结构"}},[t._v("#")]),t._v(" 集合框架底层数据结构")]),t._v(" "),a("p",[a("strong",[t._v("List")])]),t._v(" "),a("ul",[a("li",[t._v("Arraylist / Vector： Object数组")]),t._v(" "),a("li",[t._v("LinkedList： 双向循环链表")])]),t._v(" "),a("p",[a("strong",[t._v("Set")])]),t._v(" "),a("ul",[a("li",[t._v("HashSet（无序，唯一）：基于 HashMap 实现的")]),t._v(" "),a("li",[t._v("LinkedHashSet： LinkedHashSet 继承与 HashSet，并且其内部是通过 LinkedHashMap 来实现的")]),t._v(" "),a("li",[t._v("TreeSet（有序，唯一）： 红黑树")]),t._v(" "),a("li",[t._v("HashMap： JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主 体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）.JDK1.8以后\n在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转 化为红黑树，以减少搜索时间")]),t._v(" "),a("li",[t._v("LinkedHashMap：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。 同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。")]),t._v(" "),a("li",[t._v("HashTable： 数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的")]),t._v(" "),a("li",[t._v("TreeMap： 红黑树（自平衡的排序二叉树）")])]),t._v(" "),a("h2",{attrs:{id:"哪些集合类是线程安全的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些集合类是线程安全的"}},[t._v("#")]),t._v(" 哪些集合类是线程安全的？")]),t._v(" "),a("ul",[a("li",[t._v("vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。")]),t._v(" "),a("li",[t._v("statck：堆栈类，先进后出。")]),t._v(" "),a("li",[t._v("hashtable：就比hashmap多了个线程安全。")]),t._v(" "),a("li",[t._v("enumeration：枚举，相当于迭代器。")])]),t._v(" "),a("h2",{attrs:{id:"java集合的快速失败机制-fail-fast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java集合的快速失败机制-fail-fast"}},[t._v("#")]),t._v(" Java集合的快速失败机制 “fail-fast”？")]),t._v(" "),a("p",[t._v("是java集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。")]),t._v(" "),a("p",[t._v("例如：假设存在两个线程（线程1、线程2），线程1通过Iterator在遍历集合A中 的元素，在某个时候线程2修改了集合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出ConcurrentModificationException 异常，从而产生fail-fast机制。")]),t._v(" "),a("p",[t._v("原因：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个  modCount 变量。集合在被遍历期间如果内容发生变化，就会改变modCount 的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，都会检测 modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。")]),t._v(" "),a("p",[t._v("解决办法：")]),t._v(" "),a("ol",[a("li",[t._v("在遍历过程中，所有涉及到改变modCount值得地方全部加上 synchronized。")]),t._v(" "),a("li",[t._v("使用CopyOnWriteArrayList来替换ArrayList")])]),t._v(" "),a("h2",{attrs:{id:"怎么确保一个集合不能被修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么确保一个集合不能被修改"}},[t._v("#")]),t._v(" 怎么确保一个集合不能被修改？")]),t._v(" "),a("p",[t._v("可以使用 Collections.unmodifiableCollection(Collection c) 方法来创建一个只读集合，这样改变集合的任何操作都会抛出Java.lang.UnsupportedOperationException异常。 示例代码如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" clist "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("unmodifiableCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n clist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"y"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 运行时此行报错 ")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h1",{attrs:{id:"collection接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection接口"}},[t._v("#")]),t._v(" Collection接口")]),t._v(" "),a("h2",{attrs:{id:"list接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list接口"}},[t._v("#")]),t._v(" List接口")]),t._v(" "),a("h3",{attrs:{id:"迭代器-iterator-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器-iterator-是什么"}},[t._v("#")]),t._v(" 迭代器 Iterator 是什么？")]),t._v(" "),a("p",[t._v("Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。")]),t._v(" "),a("h3",{attrs:{id:"iterator-怎么使用-有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-怎么使用-有什么特点"}},[t._v("#")]),t._v(" Iterator 怎么使用？有什么特点？")]),t._v(" "),a("p",[t._v("Iterator 使用代码如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" terator\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("Iterator 的特点是只能单向遍历，但是更加安全，因为它可以确保，在当前遍历")]),t._v(" "),a("p",[t._v("的集合元素被更改的时候，就会抛出 ConcurrentModificationException 异常。")]),t._v(" "),a("h3",{attrs:{id:"如何边遍历边移除-collection-中的元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何边遍历边移除-collection-中的元素"}},[t._v("#")]),t._v(" 如何边遍历边移除 Collection 中的元素？")]),t._v(" "),a("p",[t._v("边遍历边修改 Collection 的唯一正确方式是使用 Iterator.remove() 方法，如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n\tit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("一种  常见的错误代码如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("运行以上错误代码会报 ConcurrentModificationException 异常。这是因为当使用 foreach(for(Integer i : list)) 语句时，会自动生成一个iterator来遍历该 list，但同时该 list 正在被 Iterator.remove() 修改。Java 一般不允许一个线程在遍历 Collection 时另一个线程修改它。")]),t._v(" "),a("h3",{attrs:{id:"iterator-和-listiterator-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-和-listiterator-有什么区别"}},[t._v("#")]),t._v(" Iterator 和 ListIterator 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("Iterator 可以遍历 Set 和 List 集合，而 ListIterator 只能遍历 List。")]),t._v(" "),a("li",[t._v("Iterator 只能单向遍历，而 ListIterator 可以双向遍历（向前/后遍历）。")]),t._v(" "),a("li",[t._v("ListIterator 实现 Iterator 接口，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。")])]),t._v(" "),a("h3",{attrs:{id:"遍历一个-list-有哪些不同的方式-每种方法的实现原理是什-么-java-中-list-遍历的最佳实践是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历一个-list-有哪些不同的方式-每种方法的实现原理是什-么-java-中-list-遍历的最佳实践是什么"}},[t._v("#")]),t._v(" 遍历一个 List 有哪些不同的方式？每种方法的实现原理是什 么？Java 中 List 遍历的最佳实践是什么？")]),t._v(" "),a("h3",{attrs:{id:"遍历方式有以下几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历方式有以下几种"}},[t._v("#")]),t._v(" 遍历方式有以下几种：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("for 循环遍历，基于计数器。在集合外部维护一个计数器，然后依次读取每一个位置的元素，当读取到后一个元素后停止。")])]),t._v(" "),a("li",[a("p",[t._v("迭代器遍历，Iterator。Iterator 是面向对象的一个设计模式，目的是屏蔽不同数据集合的特点，统一遍历集合的接口。Java 在 Collections 中支持了 Iterator 模式。")])]),t._v(" "),a("li",[a("p",[t._v("foreach 循环遍历。foreach 内部也是采用了 Iterator 的方式实现，使用时不需要显式声明 Iterator 或计数器。优点是代码简洁，不易出错；缺点是只能做简单的遍历，比如不能在遍历过程中操作删除数据集合")])])]),t._v(" "),a("p",[t._v("最佳实践：Java Collections 框架中提供了一个 RandomAccess 接口，用来标记 List 实现是否支持Random Access。")]),t._v(" "),a("ul",[a("li",[t._v("如果一个数据集合实现了该接口，就意味着它支持 Random Access，按位置读取元素的平均时间复杂度为 O(1)，如ArrayList。")]),t._v(" "),a("li",[t._v("如果没有实现该接口，表示不支持 Random Access，如LinkedList。")]),t._v(" "),a("li",[t._v("推荐的做法就是，支持 Random Access 的列表可用 for 循环遍历，否则建议用 Iterator 或 foreach。")])]),t._v(" "),a("h3",{attrs:{id:"说一下-arraylist-的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-arraylist-的优缺点"}},[t._v("#")]),t._v(" 说一下 ArrayList 的优缺点")]),t._v(" "),a("p",[t._v("ArrayList的优点如下：")]),t._v(" "),a("ul",[a("li",[t._v("ArrayList 底层以数组实现，是一种随机访问模式。ArrayList 实现了 RandomAccess 接口，因此查找的时候非常快。")]),t._v(" "),a("li",[t._v("ArrayList 在顺序添加一个元素的时候非常方便。")])]),t._v(" "),a("p",[t._v("ArrayList 的缺点如下：")]),t._v(" "),a("ul",[a("li",[t._v("删除元素的时候，需要做一次元素复制操作。如果要复制的元素很多，那么就会比较耗费性能。")]),t._v(" "),a("li",[t._v("插入元素的时候，也需要做一次元素复制操作，缺点同上。")])]),t._v(" "),a("p",[t._v("ArrayList 比较适合顺序添加、随机访问的场景。")]),t._v(" "),a("h3",{attrs:{id:"如何实现数组和-list-之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组和-list-之间的转换"}},[t._v("#")]),t._v(" 如何实现数组和 List 之间的转换？")]),t._v(" "),a("p",[t._v("数组转 List：使用 Arrays. asList(array) 进行转换。")]),t._v(" "),a("p",[t._v("List 转数组：使用 List 自带的 toArray() 方法。代码示例：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// list to array")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// array to list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"456"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h3",{attrs:{id:"arraylist-和-linkedlist-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-linkedlist-的区别是什么"}},[t._v("#")]),t._v(" ArrayList 和 LinkedList 的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("数据结构实现：ArrayList 是动态数组的数据结构实现，而 LinkedList 是双向链表的数据结构实现。")]),t._v(" "),a("li",[t._v("随机访问效率：ArrayList 比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。")]),t._v(" "),a("li",[t._v("增加和删除效率：在非首尾的增加和删除操作，LinkedList 要比 ArrayList 效率要高，因为 ArrayList 增删操作要影响数组内的其他数据的下标。")]),t._v(" "),a("li",[t._v("内存空间占用：LinkedList 比 ArrayList 更占内存，因为 LinkedList 的节点除了存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。")]),t._v(" "),a("li",[t._v("线程安全：ArrayList 和 LinkedList 都是不同步的，也就是不保证线程安全；")])]),t._v(" "),a("p",[t._v("综合来说，在需要频繁读取集合中的元素时，更推荐使用 ArrayList，而在插入和删除操作较多时，更推荐使用 LinkedList。")]),t._v(" "),a("p",[t._v("补充：数据结构基础之双向链表")]),t._v(" "),a("p",[t._v("双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。")]),t._v(" "),a("h3",{attrs:{id:"arraylist-和-vector-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-vector-的区别是什么"}},[t._v("#")]),t._v(" ArrayList 和 Vector 的区别是什么？")]),t._v(" "),a("p",[t._v("这两个类都实现了 List 接口（List 接口继承了 Collection 接口），他们都是有序集合")]),t._v(" "),a("p",[t._v("线程安全：Vector 使用了 Synchronized 来实现线程同步，是线程安全的，而 ArrayList 是非线程安全的。")]),t._v(" "),a("p",[t._v("性能：ArrayList 在性能方面要优于 Vector。")]),t._v(" "),a("p",[t._v("扩容：ArrayList 和 Vector 都会根据实际的需要动态的调整容量，只不过在 Vector 扩容每次会增加 1 倍，而 ArrayList 只会增加 50%。")]),t._v(" "),a("p",[t._v("Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector的话代码要在同步操作上耗费大量的时间。")]),t._v(" "),a("p",[t._v("Arraylist不是同步的，所以在不需要保证线程安全时时建议使用Arraylist。")]),t._v(" "),a("h3",{attrs:{id:"插入数据时-arraylist、linkedlist、vector谁速度较快-阐述-arraylist、vector、linkedlist-的存储性能和特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入数据时-arraylist、linkedlist、vector谁速度较快-阐述-arraylist、vector、linkedlist-的存储性能和特性"}},[t._v("#")]),t._v(" 插入数据时，ArrayList、LinkedList、Vector谁速度较快？阐述 ArrayList、Vector、LinkedList 的存储性能和特性？")]),t._v(" "),a("p",[t._v("ArrayList、LinkedList、Vector 底层的实现都是使用数组方式存储数据。数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。")]),t._v(" "),a("p",[t._v("Vector 中的方法由于加了 synchronized 修饰，因此 Vector是线程安全容器，但性能上较ArrayList差。")]),t._v(" "),a("p",[t._v("LinkedList 使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但插入数据时只需要记录当前项的前后项即可，所以 LinkedList插入速度较快。")]),t._v(" "),a("h3",{attrs:{id:"多线程场景下如何使用-arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程场景下如何使用-arraylist"}},[t._v("#")]),t._v(" 多线程场景下如何使用 ArrayList？")]),t._v(" "),a("p",[t._v("ArrayList 不是线程安全的，如果遇到多线程场景，可以通过 Collections 的 synchronizedList 方法将其转换成线程安全的容器后再使用。例如像下面这样：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" synchronizedList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collections")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("synchronizedList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsynchronizedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsynchronizedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" synchronizedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("synchronizedList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"为什么-arraylist-的-elementdata-加上-transient-修饰-arraylist-中的数组定义如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-arraylist-的-elementdata-加上-transient-修饰-arraylist-中的数组定义如下"}},[t._v("#")]),t._v(" 为什么 ArrayList 的 elementData 加上 transient 修饰？ ArrayList 中的数组定义如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("再看一下 ArrayList 的定义：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RandomAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cloneable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("可以看到 ArrayList 实现了 Serializable 接口，这意味着 ArrayList 支持序列")]),t._v(" "),a("p",[t._v("化。transient 的作用是说不希望 elementData 数组被序列化，重写了 writeObject 实现：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("ObjectOutputStream")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write out element count, and any hidden stuff")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expectedModCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" modCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultWriteObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write out array length")]),t._v("\n    s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Write out all elements in the proper order.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    \ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elementData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" expectedModCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentModificationException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("每次序列化时，先调用 defaultWriteObject() 方法序列化 ArrayList 中的非transient 元素，然后遍历 elementData，只序列化已存入的元素，这样既加快了序列化的速度，又减小了序列化之后的文件大小。")]),t._v(" "),a("h3",{attrs:{id:"list-和-set-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-和-set-的区别"}},[t._v("#")]),t._v(" List 和 Set 的区别")]),t._v(" "),a("p",[t._v("List , Set 都是继承自Collection 接口")]),t._v(" "),a("p",[t._v("List 特点：一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有 ArrayList, LinkedList 和 Vector。")]),t._v(" "),a("p",[t._v("Set 特点：一个无序（存入和取出顺序有可能不一致）容器，不可以存储重复元素，只允许存入一个null元素，必须保证元素唯一性。Set 接口常用实现类是 HashSet、LinkedHashSet 以及 TreeSet。")]),t._v(" "),a("p",[t._v("另外 List 支持for循环，也就是通过下标来遍历，也可以用迭代器，但是set只能用迭代，因为他无序，无法用下标来取得想要的值。")]),t._v(" "),a("p",[t._v("Set和List对比")]),t._v(" "),a("p",[t._v("Set：检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置改变。")]),t._v(" "),a("p",[t._v("List：和数组类似，List可以动态增长，查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变")]),t._v(" "),a("h2",{attrs:{id:"set接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set接口"}},[t._v("#")]),t._v(" Set接口")]),t._v(" "),a("h4",{attrs:{id:"说一下-hashset-的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-hashset-的实现原理"}},[t._v("#")]),t._v(" 说一下 HashSet 的实现原理？")]),t._v(" "),a("p",[t._v("HashSet 是基于 HashMap 实现的，HashSet的值存放于HashMap的key上，")]),t._v(" "),a("p",[t._v("HashMap的value统一为PRESENT，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，HashSet 不允许重复的值。")]),t._v(" "),a("h4",{attrs:{id:"hashset如何检查重复-hashset是如何保证数据不可重复的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset如何检查重复-hashset是如何保证数据不可重复的"}},[t._v("#")]),t._v(" HashSet如何检查重复？HashSet是如何保证数据不可重复的？")]),t._v(" "),a("p",[t._v("向HashSet 中add ()元素时，判断元素是否存在的依据，不仅要比较hash值，同时还要结合equles 方法比较。")]),t._v(" "),a("p",[t._v("HashSet 中的add ()方法会使用HashMap 的put()方法。")]),t._v(" "),a("p",[t._v("HashMap 的 key 是唯一的，由源码可以看出 HashSet 添加进去的值就是作为 HashMap 的key，并且在HashMap中如果K/V相同时，会用新的V覆盖掉旧的V，然后返回旧的V。所以不会重复（ HashMap 比较key是否相等是先比较 hashcode 再比较equals ）。")]),t._v(" "),a("p",[t._v("以下是HashSet 部分源码：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" PRESENT "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n\tmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用HashMap的put方法,PRESENT是一个至始至终都相同的虚值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PRESENT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("hashCode() 与 equals() 的相关规定：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果两个对象相等，则hashcode一定也是相同的")])]),t._v(" "),a("li",[a("p",[t._v("两个对象相等, 对两个equals方法返回true")])]),t._v(" "),a("li",[a("p",[t._v("两个对象有相同的hashcode值, 它们也不一定是相等的")])]),t._v(" "),a("li",[a("p",[t._v("综上, equals方法被覆盖过, 则hashCode方法也必须被覆盖")])]),t._v(" "),a("li",[a("p",[t._v("hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。")])])]),t._v(" "),a("p",[t._v("== 与 equals 的区别")]),t._v(" "),a("ol",[a("li",[t._v("==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同")]),t._v(" "),a("li",[t._v("==是指对内存地址进行比较 equals()是对字符串的内容进行比较")]),t._v(" "),a("li",[t._v("== 指引用是否相同 equals()指的是值是否相同")])]),t._v(" "),a("h4",{attrs:{id:"hashset与hashmap的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset与hashmap的区别"}},[t._v("#")]),t._v(" HashSet与HashMap的区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("HashMap")]),t._v(" "),a("th",[t._v("HashSet")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("实现了Map接口")]),t._v(" "),a("td",[t._v("实现了Set接口")])]),t._v(" "),a("tr",[a("td",[t._v("存储键值对")]),t._v(" "),a("td",[t._v("仅存储对象")])]),t._v(" "),a("tr",[a("td",[t._v("调用 put 添加元素")]),t._v(" "),a("td",[t._v("调用 add 添加元素")])]),t._v(" "),a("tr",[a("td",[t._v("HashMap使用键(key)计算hashcode")]),t._v(" "),a("td",[t._v("使用添加的对象计算hashcode")])])])]),t._v(" "),a("h2",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("h4",{attrs:{id:"blockingqueue是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue是什么"}},[t._v("#")]),t._v(" BlockingQueue是什么？")]),t._v(" "),a("p",[t._v("java.util.concurrent.BlockingQueue是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。BlockingQueue接口是Java集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在BlockingQueue的实现类中被处理了。Java提供了集中 BlockingQueue的实现，比如ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue,、SynchronousQueue等。")]),t._v(" "),a("h4",{attrs:{id:"在-queue-中-poll-和-remove-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-queue-中-poll-和-remove-有什么区别"}},[t._v("#")]),t._v(" 在 Queue 中 poll()和 remove()有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("相同点：都是返回第一个元素，并在队列中删除返回的对象。")]),t._v(" "),a("li",[t._v("不同点：如果没有元素 poll()会返回 null，而 remove()会直接抛出 NoSuchElementException 异常。")])]),t._v(" "),a("p",[t._v("代码示例：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" queue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nqueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("offer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// add")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h1",{attrs:{id:"map接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map接口"}},[t._v("#")]),t._v(" Map接口")]),t._v(" "),a("h3",{attrs:{id:"说一下-hashmap-的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下-hashmap-的实现原理"}},[t._v("#")]),t._v(" 说一下 HashMap 的实现原理？")]),t._v(" "),a("p",[t._v("HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。")]),t._v(" "),a("p",[t._v("HashMap的数据结构： 在Java编程语言中， 基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。")]),t._v(" "),a("p",[t._v("HashMap 基于 Hash 算法实现的")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("当我们往Hashmap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标")])]),t._v(" "),a("li",[a("p",[t._v("存储时，如果出现hash值相同的key，此时有两种情况。")]),t._v(" "),a("p",[t._v("(1) 如果key相同，则覆盖原始值；")]),t._v(" "),a("p",[t._v("(2) 如果key不同（出现冲突），则将当前的key-value 放入链表中")])]),t._v(" "),a("li",[a("p",[t._v("获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。")])]),t._v(" "),a("li",[a("p",[t._v("理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。")])])]),t._v(" "),a("p",[t._v("需要注意Jdk 1.8中对HashMap的实现做了优化，当链表中的节点数 > 8之后，该链表会转为红黑树来提高查询效率，从原来的O(n)到O(logn)")]),t._v(" "),a("h3",{attrs:{id:"hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现"}},[t._v("#")]),t._v(" HashMap在JDK1.7和JDK1.8中有哪些不同？ HashMap的底层实现")]),t._v(" "),a("p",[t._v("在Java中，保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做拉链法的方式可以解决哈希冲突。")]),t._v(" "),a("h4",{attrs:{id:"jdk1-8之前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8之前"}},[t._v("#")]),t._v(" JDK1.8之前")]),t._v(" "),a("p",[t._v("JDK1.8之前采用的是拉链法。拉链法：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。")]),t._v(" "),a("h4",{attrs:{id:"jdk1-8之后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8之后"}},[t._v("#")]),t._v(" JDK1.8之后")]),t._v(" "),a("p",[t._v("相比于之前的版本，jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。")]),t._v(" "),a("h4",{attrs:{id:"jdk1-7-vs-jdk1-8-比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-7-vs-jdk1-8-比较"}},[t._v("#")]),t._v(" JDK1.7 VS JDK1.8 比较")]),t._v(" "),a("p",[t._v("JDK1.8主要解决或优化了一下问题：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("resize 扩容优化")])]),t._v(" "),a("li",[a("p",[t._v("引入了红黑树，目的是避免单条链表过长而影响查询效率，红黑树算法请参考")])]),t._v(" "),a("li",[a("p",[t._v("解决了多线程死循环问题，但仍是非线程安全的，多线程时可能会造成数据丢失问题。")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("不同")]),t._v(" "),a("th",[t._v("JDK 1.7")]),t._v(" "),a("th",[t._v("JDK 1.8")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("存储结构")]),t._v(" "),a("td",[t._v("数组 + 链表")]),t._v(" "),a("td",[t._v("数组 + 链表 + 红黑树")])]),t._v(" "),a("tr",[a("td",[t._v("初始化方式")]),t._v(" "),a("td",[t._v("单独函数：inflateTable()")]),t._v(" "),a("td",[t._v("直接集成到了扩容函数  resize()中")])]),t._v(" "),a("tr",[a("td",[t._v("hash值计算方式")]),t._v(" "),a("td",[t._v("扰动处理 = 9次扰动 = 4次位运算 + 5次异或运算")]),t._v(" "),a("td",[t._v("扰动处理 = 2次扰动 = 1次位运算 + 1次异或运算")])]),t._v(" "),a("tr",[a("td",[t._v("存放数据 的规则")]),t._v(" "),a("td",[t._v("无冲突时，存放数组；冲突时，存放链表")]),t._v(" "),a("td",[t._v("无冲突时，存放数组；冲突 & 链表长度 < 8：存放单链表；冲突 & 链表长度 > 8：树化并存放红黑树")])]),t._v(" "),a("tr",[a("td",[t._v("插入数据 方式")]),t._v(" "),a("td",[t._v("头插法: 先将原位置的数据移到后1 位，再插入数据到该位置")]),t._v(" "),a("td",[t._v("尾插法: 直接插入到链表尾部")])]),t._v(" "),a("tr",[a("td",[t._v("扩容后存 储位置的 计算方式")]),t._v(" "),a("td",[t._v("全部按照原来方法进行计算:  hashCode--扰动函数--(h&length-1)")]),t._v(" "),a("td",[t._v("按照扩容后的规律计算:  扩容后的位置 = 原位置 or 原位置 + 旧容量")])])])]),t._v(" "),a("h3",{attrs:{id:"hashmap的put方法的具体流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的put方法的具体流程"}},[t._v("#")]),t._v(" HashMap的put方法的具体流程？")]),t._v(" "),a("p",[t._v("当我们put的时候，首先计算 key的hash值，这里调用了 hash方法，hash方法实际是让key.hashCode()与key.hashCode()>>>16进行异或操作，高16bit补0，一个数和0异或不变，所以 hash 函数大概的作用就是：高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞。")]),t._v(" "),a("p",[t._v("按照函数注释，因为bucket数组大小是2的幂，计算下标index = (table.length - 1) & hash，如果不做 hash 处理，相当于散列生效的只有几个低 bit 位，为了减少散列的碰撞，设计者综合考虑了速度、作用、质量之后，使用高16bit和低16bit异或来简单处理减少碰撞，而且JDK8中用了红黑树结构来提升碰撞下的性能。")]),t._v(" "),a("p",[t._v("putVal方法执行流程图")]),t._v(" "),a("p",[a("svg",{attrs:{id:"SvgjsSvg1006",width:"988.7073974609375",height:"867.2982940673828",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[a("defs",{attrs:{id:"SvgjsDefs1007"}},[a("marker",{attrs:{id:"SvgjsMarker1024",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1025",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1028",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1029",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1042",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1043",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1058",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1059",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1072",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1073",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1118",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1119",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1130",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1131",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1144",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1145",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1164",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1165",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1168",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1169",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1185",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1186",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1189",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1190",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1193",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1194",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1201",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1202",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1217",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1218",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1221",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1222",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1237",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1238",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1251",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1252",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1255",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1256",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1269",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1270",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1277",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1278",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1281",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1282",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1285",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1286",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1289",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1290",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})]),a("marker",{attrs:{id:"SvgjsMarker1293",markerWidth:"16",markerHeight:"12",refX:"16",refY:"6",viewBox:"0 0 16 12",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[a("path",{attrs:{id:"SvgjsPath1294",d:"M0,2 L14,6 L0,11 L0,2",fill:"#323232",stroke:"#323232","stroke-width":"2"}})])]),a("g",{attrs:{id:"SvgjsG1008",transform:"translate(36.38373870283532,103.79735056559244)"}},[a("path",{attrs:{id:"SvgjsPath1009",d:"M 0 4Q 0 0 4 0L 107.64511293066637 0Q 111.64511293066637 0 111.64511293066637 4L 111.64511293066637 37.486111111111114Q 111.64511293066637 41.486111111111114 107.64511293066637 41.486111111111114L 4 41.486111111111114Q 0 41.486111111111114 0 37.486111111111114Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffcccc"}}),a("g",{attrs:{id:"SvgjsG1010"}},[a("text",{attrs:{id:"SvgjsText1011","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"92px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"11.293055555555558",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1012",dy:"16",x:"56"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1013"}},[t._v("开始")])])])])]),a("g",{attrs:{id:"SvgjsG1014",transform:"translate(25.009525636367506,180.6660435994466)"}},[a("path",{attrs:{id:"SvgjsPath1015",d:"M 0 31.253153483072936L 66.05934822515422 0L 132.11869645030845 31.253153483072936L 66.05934822515422 62.50630696614587Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1016"}},[a("text",{attrs:{id:"SvgjsText1017","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"113px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"14.115685017903665",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1018",dy:"16",x:"66.5"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1019"}},[t._v("table")])]),a("tspan",{attrs:{id:"SvgjsTspan1020",dy:"16",x:"66.5"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1021"}},[t._v("是否为空")])])])])]),a("g",{attrs:{id:"SvgjsG1022"}},[a("path",{attrs:{id:"SvgjsPath1023",d:"M92.20629516816851 145.28346167670355L92.20629516816851 162.97475263807507L91.06887386152174 162.97475263807507L91.06887386152174 180.6660435994466",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1024)"}})]),a("g",{attrs:{id:"SvgjsG1026"}},[a("path",{attrs:{id:"SvgjsPath1027",d:"M157.1282220866761 211.91919708251953L197.5129376397682 211.91919708251953L197.5129376397682 211.52459173634227L237.89765319286033 211.52459173634227",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1028)"}}),a("rect",{attrs:{id:"SvgjsRect1030",width:"13",height:"15",x:"191.0129376397682",y:"204.2218944094309",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1031","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"202.2718944094309",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1032",dy:"16",x:"197.5129376397682"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1033"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1034",transform:"translate(237.89765319286033,176.52459173634227)"}},[a("path",{attrs:{id:"SvgjsPath1035",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ccffff"}}),a("g",{attrs:{id:"SvgjsG1036"}},[a("text",{attrs:{id:"SvgjsText1037","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1038",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1039"}},[t._v("resize()")])])])])]),a("g",{attrs:{id:"SvgjsG1040"}},[a("path",{attrs:{id:"SvgjsPath1041",d:"M91.06887386152174 243.17235056559258L91.06887386152174 263.8390172322593L92.17886032591885 263.8390172322593L92.17886032591885 284.50568389892607",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1042)"}}),a("rect",{attrs:{id:"SvgjsRect1044",width:"13",height:"15",x:"85.12386709372029",y:"256.3390172322593",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1045","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"254.38901723225933",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1046",dy:"16",x:"91.62386709372029"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1047"}},[t._v("否")])])])]),a("g",{attrs:{id:"SvgjsG1048",transform:"translate(42.17886032591885,284.50568389892607)"}},[a("path",{attrs:{id:"SvgjsPath1049",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1050"}},[a("text",{attrs:{id:"SvgjsText1051","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1052",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1053"}},[t._v("根据key")])]),a("tspan",{attrs:{id:"SvgjsTspan1054",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1055"}},[t._v("计算索引")])])])])]),a("g",{attrs:{id:"SvgjsG1056"}},[a("path",{attrs:{id:"SvgjsPath1057",d:"M152.20629516816854 434.77552516876716L181.38329616975807 434.77552516876716L181.38329616975807 433.7390123846109L210.56029717134763 433.7390123846109",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1058)"}}),a("rect",{attrs:{id:"SvgjsRect1060",width:"13",height:"15",x:"174.88329616975807",y:"426.757268776689",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1061","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"424.807268776689",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1062",dy:"16",x:"181.38329616975807"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1063"}},[t._v("否")])])])]),a("g",{attrs:{id:"SvgjsG1064",transform:"translate(210.56029717134763,399.08879146318037)"}},[a("path",{attrs:{id:"SvgjsPath1065",d:"M 0 34.6502209214307L 67.27507716049399 0L 134.55015432098799 34.6502209214307L 67.27507716049399 69.3004418428614Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1066"}},[a("text",{attrs:{id:"SvgjsText1067","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"115px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.54672313064501",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1068",dy:"16",x:"67.5"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1069"}},[t._v("key是否存在")])])])])]),a("g",{attrs:{id:"SvgjsG1070"}},[a("path",{attrs:{id:"SvgjsPath1071",d:"M345.1104514923358 433.7390123846109L374.8207066964818 433.7390123846109L374.8207066964818 213.96336736300063L404.53096190062774 213.96336736300063",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1072)"}}),a("rect",{attrs:{id:"SvgjsRect1074",width:"13",height:"15",x:"368.3207066964818",y:"316.35118987380577",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1075","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"314.4011898738058",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1076",dy:"16",x:"374.8207066964818"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1077"}},[t._v("否")])])])]),a("g",{attrs:{id:"SvgjsG1078",transform:"translate(404.53096190062774,176.7279061211481)"}},[a("path",{attrs:{id:"SvgjsPath1079",d:"M 0 37.23546124185248L 67.51362930278916 0L 135.0272586055783 37.23546124185248L 67.51362930278916 74.47092248370495Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1080"}},[a("text",{attrs:{id:"SvgjsText1081","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"116px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"20.157815854271004",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1082",dy:"16",x:"68"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1083"}},[t._v("table[i]")])]),a("tspan",{attrs:{id:"SvgjsTspan1084",dy:"16",x:"68"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1085"}},[t._v("是红黑树?")])])])])]),a("g",{attrs:{id:"SvgjsG1086",transform:"translate(421.23444821304577,285.2596521528944)"}},[a("path",{attrs:{id:"SvgjsPath1087",d:"M 0 4Q 0 0 4 0L 98 0Q 102 0 102 4L 102 66Q 102 70 98 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1088"}},[a("text",{attrs:{id:"SvgjsText1089","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"82px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1090",dy:"16",x:"51"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1091"}},[t._v("开始遍历链表")])]),a("tspan",{attrs:{id:"SvgjsTspan1092",dy:"16",x:"51"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1093"}},[t._v("准备插入")])])])])]),a("g",{attrs:{id:"SvgjsG1094",transform:"translate(228.80633436080066,534.7530547265438)"}},[a("path",{attrs:{id:"SvgjsPath1095",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1096"}},[a("text",{attrs:{id:"SvgjsText1097","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1098",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1099"}},[t._v("直接覆盖")])]),a("tspan",{attrs:{id:"SvgjsTspan1100",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1101"}},[t._v("value")])])])])]),a("g",{attrs:{id:"SvgjsG1102",transform:"translate(863.7212863498272,177.85917824340072)"}},[a("path",{attrs:{id:"SvgjsPath1103",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1104"}},[a("text",{attrs:{id:"SvgjsText1105","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1106",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1107"}},[t._v("在红黑树中")])]),a("tspan",{attrs:{id:"SvgjsTspan1108",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1109"}},[t._v("插入")])])])])]),a("g",{attrs:{id:"SvgjsG1110",transform:"translate(42.2062845650712,533.2505398660046)"}},[a("path",{attrs:{id:"SvgjsPath1111",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1112"}},[a("text",{attrs:{id:"SvgjsText1113","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1114",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1115"}},[t._v("直接插入")])])])])]),a("g",{attrs:{id:"SvgjsG1116"}},[a("path",{attrs:{id:"SvgjsPath1117",d:"M92.2062845650712 603.2505398660046L92.2062845650712 634.2172833538249L92.47189600616188 634.2172833538249L92.47189600616188 665.1840268416452",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1118)"}})]),a("g",{attrs:{id:"SvgjsG1120",transform:"translate(26.288914853644116,665.1840268416452)"}},[a("path",{attrs:{id:"SvgjsPath1121",d:"M 0 34.612847360623675L 66.18298115251775 0L 132.3659623050355 34.612847360623675L 66.18298115251775 69.22569472124735Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1122"}},[a("text",{attrs:{id:"SvgjsText1123","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"113px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.50897583422991",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1124",dy:"16",x:"66.5"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1125"}},[t._v("++size > ")])]),a("tspan",{attrs:{id:"SvgjsTspan1126",dy:"16",x:"66.5"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1127"}},[t._v("threshold")])])])])]),a("g",{attrs:{id:"SvgjsG1128"}},[a("path",{attrs:{id:"SvgjsPath1129",d:"M158.65487715868 699.7968742022687L194.87292400391044 699.7968742022687L194.87292400391044 699.6043233547089L231.09097084914092 699.6043233547089",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1130)"}}),a("rect",{attrs:{id:"SvgjsRect1132",width:"13",height:"15",x:"188.37292400391044",y:"692.2005987784887",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1133","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"690.2505987784887",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1134",dy:"16",x:"194.87292400391044"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1135"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1136",transform:"translate(231.09097084914092,664.6043233547089)"}},[a("path",{attrs:{id:"SvgjsPath1137",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ccffff"}}),a("g",{attrs:{id:"SvgjsG1138"}},[a("text",{attrs:{id:"SvgjsText1139","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1140",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1141"}},[t._v("resize()")])])])])]),a("g",{attrs:{id:"SvgjsG1142"}},[a("path",{attrs:{id:"SvgjsPath1143",d:"M92.47189600616188 734.4097215628926L92.47189600616188 767.3545281277351L92.20629516816851 767.3545281277351L92.20629516816851 800.2993346925775",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1144)"}}),a("rect",{attrs:{id:"SvgjsRect1146",width:"13",height:"15",x:"85.83909558716519",y:"759.8545281277351",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1147","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"757.904528127735",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1148",dy:"16",x:"92.33909558716519"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1149"}},[t._v("否")])])])]),a("g",{attrs:{id:"SvgjsG1150",transform:"translate(42.48763777434597,800.2993346925775)"}},[a("path",{attrs:{id:"SvgjsPath1151",d:"M 0 4Q 0 0 4 0L 95.43731478764508 0Q 99.43731478764508 0 99.43731478764508 4L 99.43731478764508 37.98286050463378Q 99.43731478764508 41.98286050463378 95.43731478764508 41.98286050463378L 4 41.98286050463378Q 0 41.98286050463378 0 37.98286050463378Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffcccc"}}),a("g",{attrs:{id:"SvgjsG1152"}},[a("text",{attrs:{id:"SvgjsText1153","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"11.54143025231689",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1154",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1155"}},[t._v("end")])])])])]),a("g",{attrs:{id:"SvgjsG1156",transform:"translate(32.2062951681685,394.77552516876716)"}},[a("path",{attrs:{id:"SvgjsPath1157",d:"M 0 40L 60 0L 120 40L 60 80Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1158"}},[a("text",{attrs:{id:"SvgjsText1159","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"100px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"700","font-style":"",opacity:"1",y:"30.95",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1160",dy:"16",x:"60"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1161"}},[t._v("table[i]==null")])])])])]),a("g",{attrs:{id:"SvgjsG1162"}},[a("path",{attrs:{id:"SvgjsPath1163",d:"M92.17886032591885 354.505683898926L92.17886032591885 374.6406045338466L92.20629516816848 374.6406045338466L92.20629516816848 394.77552516876716",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1164)"}})]),a("g",{attrs:{id:"SvgjsG1166"}},[a("path",{attrs:{id:"SvgjsPath1167",d:"M92.20629516816848 474.77552516876716L92.20629516816848 504.0130325173859L92.2062845650712 504.0130325173859L92.2062845650712 533.2505398660046",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1168)"}}),a("rect",{attrs:{id:"SvgjsRect1170",width:"13",height:"15",x:"85.70628986661987",y:"496.5130325173859",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1171","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"494.5630325173859",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1172",dy:"16",x:"92.20628986661987"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1173"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1174",transform:"translate(588.6189935808675,529.0742794720932)"}},[a("path",{attrs:{id:"SvgjsPath1175",d:"M 0 40L 60 0L 120 40L 60 80Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1176"}},[a("text",{attrs:{id:"SvgjsText1177","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"100px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"22.95",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1178",dy:"16",x:"60"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1179"}},[t._v("链表")]),a("tspan",{staticStyle:{"font-size":"inherit"},attrs:{id:"SvgjsTspan1180"}},[t._v("长度")])]),a("tspan",{attrs:{id:"SvgjsTspan1181",dy:"16",x:"60"}},[a("tspan",{staticStyle:{"font-size":"inherit"},attrs:{id:"SvgjsTspan1182"}},[t._v("是否 > 8")])])])])]),a("g",{attrs:{id:"SvgjsG1183"}},[a("path",{attrs:{id:"SvgjsPath1184",d:"M278.80633436080075 604.7530547265438L278.80633436080075 634.9685407840946L92.47189600616188 634.9685407840946L92.47189600616188 665.1840268416452",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1185)"}})]),a("g",{attrs:{id:"SvgjsG1187"}},[a("path",{attrs:{id:"SvgjsPath1188",d:"M287.89765319286033 246.5245917363423L287.89765319286033 319.50568389892607L142.17886032591886 319.50568389892607",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1189)"}})]),a("g",{attrs:{id:"SvgjsG1191"}},[a("path",{attrs:{id:"SvgjsPath1192",d:"M277.8353743318418 468.3892333060418L277.8353743318418 501.5711440162928L278.80633436080063 501.5711440162928L278.80633436080063 534.7530547265438",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1193)"}}),a("rect",{attrs:{id:"SvgjsRect1195",width:"13",height:"15",x:"271.8208543463212",y:"494.0711440162928",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1196","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"492.1211440162928",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1197",dy:"16",x:"278.3208543463212"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1198"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1199"}},[a("path",{attrs:{id:"SvgjsPath1200",d:"M472.0445912034174 251.19882860485285L472.0445912034174 268.2292403788735L472.23444821304645 268.2292403788735L472.23444821304645 285.2596521528944",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1201)"}}),a("rect",{attrs:{id:"SvgjsRect1203",width:"13",height:"15",x:"465.639519708232",y:"260.7292403788735",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1204","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"258.7792403788735",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1205",dy:"16",x:"472.139519708232"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1206"}},[t._v("否")])])])]),a("g",{attrs:{id:"SvgjsG1207",transform:"translate(404.51103928137957,401.1723505655924)"}},[a("path",{attrs:{id:"SvgjsPath1208",d:"M 0 37.23546124185248L 67.51362930278916 0L 135.0272586055783 37.23546124185248L 67.51362930278916 74.47092248370495Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#99ffcc"}}),a("g",{attrs:{id:"SvgjsG1209"}},[a("text",{attrs:{id:"SvgjsText1210","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"116px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"20.157815854271004",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1211",dy:"16",x:"68"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1212"}},[t._v("key")])]),a("tspan",{attrs:{id:"SvgjsTspan1213",dy:"16",x:"68"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1214"}},[t._v("是否存在")])])])])]),a("g",{attrs:{id:"SvgjsG1215"}},[a("path",{attrs:{id:"SvgjsPath1216",d:"M472.23444821304645 355.2596521528944C 472.23444821304645 373.62492321771913 475.2137644369352 383.0860892347822 472.0246685841692 401.1723505655924",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1217)"}})]),a("g",{attrs:{id:"SvgjsG1219"}},[a("path",{attrs:{id:"SvgjsPath1220",d:"M472.0246685841692 475.6432730492974C 475.8583431736693 497.3851220510596 472.4963595010539 508.7571355346381 472.4963595010539 530.834387602629",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1221)"}}),a("rect",{attrs:{id:"SvgjsRect1223",width:"13",height:"15",x:"467.1981420136741",y:"495.61305417612743",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1224","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"493.66305417612745",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1225",dy:"16",x:"473.6981420136741"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1226"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1227",transform:"translate(422.4963595010534,532.5427209359623)"}},[a("path",{attrs:{id:"SvgjsPath1228",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1229"}},[a("text",{attrs:{id:"SvgjsText1230","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"17.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1231",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1232"}},[t._v("直接覆盖")])]),a("tspan",{attrs:{id:"SvgjsTspan1233",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1234"}},[t._v("value")])])])])]),a("g",{attrs:{id:"SvgjsG1235"}},[a("path",{attrs:{id:"SvgjsPath1236",d:"M539.5382978869585 438.4078118074449C 560.6902094992261 448.2711101768629 574.5461262121921 438.4078118074449 597.8846784290145 438.4078118074449",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1237)"}}),a("rect",{attrs:{id:"SvgjsRect1239",width:"13",height:"15",x:"561.3914979312784",y:"434.60654869597664",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1240","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"432.65654869597665",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1241",dy:"16",x:"567.8914979312784"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1242"}},[t._v("否")])])])]),a("g",{attrs:{id:"SvgjsG1243",transform:"translate(598.3720800006206,403.4078118074449)"}},[a("path",{attrs:{id:"SvgjsPath1244",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1245"}},[a("text",{attrs:{id:"SvgjsText1246","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1247",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1248"}},[t._v("插入节点")])])])])]),a("g",{attrs:{id:"SvgjsG1249"}},[a("path",{attrs:{id:"SvgjsPath1250",d:"M648.3720800006206 473.40781180744494L648.3720800006206 501.241045639769L648.6189935808675 501.241045639769L648.6189935808675 529.0742794720932",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1251)"}})]),a("g",{attrs:{id:"SvgjsG1253"}},[a("path",{attrs:{id:"SvgjsPath1254",d:"M708.6189935808675 569.0742794720929C 730.9691800102455 579.4963425653038 745.609195270068 568.7502359752608 770.2698974609389 568.7502359752608",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1255)"}}),a("rect",{attrs:{id:"SvgjsRect1257",width:"13",height:"15",x:"732.0780021103433",y:"565.320531383631",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1258","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"563.3705313836309",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1259",dy:"16",x:"738.5780021103433"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1260"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1261",transform:"translate(770.2698974609389,534.0835693085943)"}},[a("path",{attrs:{id:"SvgjsPath1262",d:"M 0 4Q 0 0 4 0L 96 0Q 100 0 100 4L 100 66Q 100 70 96 70L 4 70Q 0 70 0 66Z",stroke:"rgba(50,50,50,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffff99"}}),a("g",{attrs:{id:"SvgjsG1263"}},[a("text",{attrs:{id:"SvgjsText1264","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"80px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"25.55",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1265",dy:"16",x:"50"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1266"}},[t._v("转为红黑树")])])])])]),a("g",{attrs:{id:"SvgjsG1267"}},[a("path",{attrs:{id:"SvgjsPath1268",d:"M539.5582205062066 213.96336736300057L701.6397534280169 213.96336736300057L701.6397534280169 212.85917824340066L863.7212863498272 212.85917824340066",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1269)"}}),a("rect",{attrs:{id:"SvgjsRect1271",width:"13",height:"15",x:"695.1397534280169",y:"205.9112728032006",fill:"#ffffff"}}),a("text",{attrs:{id:"SvgjsText1272","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"13px",fill:"#323232","font-weight":"400",align:"top",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"203.96127280320061",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1273",dy:"16",x:"701.6397534280169"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1274"}},[t._v("是")])])])]),a("g",{attrs:{id:"SvgjsG1275"}},[a("path",{attrs:{id:"SvgjsPath1276",d:"M281.09097084914094 734.6043233547089L281.09097084914094 821.2907649448944L141.92495256199106 821.2907649448944",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1277)"}})]),a("g",{attrs:{id:"SvgjsG1279"}},[a("path",{attrs:{id:"SvgjsPath1280",d:"M913.7212863498272 247.85917824340072L913.7212863498272 634.2993803203002L92.47189600616187 634.2993803203002L92.47189600616187 665.1840268416452",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1281)"}})]),a("g",{attrs:{id:"SvgjsG1283"}},[a("path",{attrs:{id:"SvgjsPath1284",d:"M472.4963595010534 602.5427209359623L472.4963595010534 633.8633738888037L92.47189600616187 633.8633738888037L92.47189600616187 665.1840268416452",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1285)"}})]),a("g",{attrs:{id:"SvgjsG1287"}},[a("path",{attrs:{id:"SvgjsPath1288",d:"M648.6189935808675 609.0742794720932L648.6189935808675 634.906930934647L92.47189600616187 634.906930934647L92.47189600616187 665.1840268416452",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1289)"}})]),a("g",{attrs:{id:"SvgjsG1291"}},[a("path",{attrs:{id:"SvgjsPath1292",d:"M820.2698974609389 604.0835693085943L820.2698974609389 634.6337980751198L92.47189600616187 634.6337980751198L92.47189600616187 665.1840268416452",stroke:"#323232","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1293)"}})]),a("g",{attrs:{id:"SvgjsG1295",transform:"translate(645.8254530164936,603.5290459570945)"}},[a("path",{attrs:{id:"SvgjsPath1296",d:"M 0 0L 36.66666666666629 0L 36.66666666666629 31.086706686489833L 0 31.086706686489833Z",stroke:"none",fill:"none"}}),a("g",{attrs:{id:"SvgjsG1297"}},[a("text",{attrs:{id:"SvgjsText1298","font-family":"微软雅黑","text-anchor":"middle","font-size":"13px",width:"37px",fill:"#323232","font-weight":"400",align:"middle",anchor:"middle",family:"微软雅黑",size:"13px",weight:"400","font-style":"",opacity:"1",y:"6.0933533432449165",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1299",dy:"16",x:"18.5"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1300"}},[t._v("否")])])])])]),a("g",{attrs:{id:"SvgjsG1301",transform:"translate(64.71434190538197,26.019572787814674)"}},[a("path",{attrs:{id:"SvgjsPath1302",d:"M 0 0L 235.55555555555554 0L 235.55555555555554 40.33058232240272L 0 40.33058232240272Z",stroke:"none",fill:"none"}}),a("g",{attrs:{id:"SvgjsG1303"}},[a("text",{attrs:{id:"SvgjsText1304","font-family":"微软雅黑","text-anchor":"middle","font-size":"16px",width:"236px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"16px",weight:"700","font-style":"",opacity:"1",y:"7.765291161201359",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1305",dy:"20",x:"118"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1306"}},[t._v("计算索引 + 逻辑判断 + 扩容")])])])])]),a("g",{attrs:{id:"SvgjsG1307",transform:"translate(482.4921196831599,25.00166816622921)"}},[a("path",{attrs:{id:"SvgjsPath1308",d:"M 0 0L 151.11111111111111 0L 151.11111111111111 41.11111111111111L 0 41.11111111111111Z",stroke:"none",fill:"none"}}),a("g",{attrs:{id:"SvgjsG1309"}},[a("text",{attrs:{id:"SvgjsText1310","font-family":"微软雅黑","text-anchor":"middle","font-size":"16px",width:"152px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"16px",weight:"700","font-style":"",opacity:"1",y:"8.155555555555553",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1311",dy:"20",x:"76"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1312"}},[t._v("链表")])])])])]),a("g",{attrs:{id:"SvgjsG1313",transform:"translate(788.0476752387157,25.629308393460477)"}},[a("path",{attrs:{id:"SvgjsPath1314",d:"M 0 0L 151.11111111111111 0L 151.11111111111111 41.11111111111111L 0 41.11111111111111Z",stroke:"none",fill:"none"}}),a("g",{attrs:{id:"SvgjsG1315"}},[a("text",{attrs:{id:"SvgjsText1316","font-family":"微软雅黑","text-anchor":"middle","font-size":"16px",width:"152px",fill:"#323232","font-weight":"700",align:"middle",anchor:"middle",family:"微软雅黑",size:"16px",weight:"700","font-style":"",opacity:"1",y:"8.155555555555553",transform:"rotate(0)"}},[a("tspan",{attrs:{id:"SvgjsTspan1317",dy:"20",x:"76"}},[a("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1318"}},[t._v("红黑树")])])])])])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("putVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实现Map.put和相关方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("putVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" onlyIfAbsent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" evict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤1：table == null ?\t")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//table未初始化或者长度为0，进行扩容")]),t._v("\n\t\tn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤2：计算index, table[index] == null ?")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (n ‐ 1) & hash 确定元素存放在哪个桶中,桶为空,新生成结点放入桶中")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\ttab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 桶中已经存在元素")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤3：节点key存在，直接覆盖value")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与桶中第一个元素(数组中的结点)进行比较 (hash, ==, equals)")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将第一个元素赋值给e，用e来记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤4：否则判断该链是否为红黑树")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash值不相等，即key不相等；为红黑树结点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前元素类型为TreeNode，表示为红黑树，putTreeVal返回待存放的node, e可能为null")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放入树中")]),t._v("\n            e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("putTreeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤5：否则确定该链为链表,遍历列表做替换或append")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" binCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("binCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//遍历 + 判断是否到达链表的尾部")]),t._v("\n                    p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在尾部插入新结点")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断链表的长度是否达到转化红黑树的临界值，临界值为8")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" TREEIFY_THRESHOLD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -1 for 1st")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("treeifyBin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//链表结构转树形结构")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 跳出循环")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与节点进行比较 (hash, ==, equals)")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相等，跳出循环")]),t._v("\n\t\t\t\tp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与前面的e = p.next组合; 用于遍历链表")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// existing mapping for key")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录e的value")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("onlyIfAbsent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// onlyIfAbsent为false或者旧值为null")]),t._v("\n\t\t\te"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用新值替换旧值")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterNodeAccess")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问后回调函数")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回旧值")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("modCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结构性修改次数叠加")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤6：根据size判断是否扩容")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" threshold"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际大小大于阈值则扩容")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterNodeInsertion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入后回调函数")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br")])]),a("p",[t._v("①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；")]),t._v(" "),a("p",[t._v("②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；")]),t._v(" "),a("p",[t._v("③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；")]),t._v(" "),a("p",[t._v("④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；")]),t._v(" "),a("p",[t._v("⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；")]),t._v(" "),a("p",[t._v("⑥.插入成功后，判断实际存在的键值对数量size是否超多了 大容量threshold，如果超过，进行扩容。")]),t._v(" "),a("h3",{attrs:{id:"hashmap的扩容操作是怎么实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的扩容操作是怎么实现的"}},[t._v("#")]),t._v(" HashMap的扩容操作是怎么实现的？")]),t._v(" "),a("p",[t._v("①.在jdk1.8中，resize方法是在hashmap中的键值对大于阈值时或者初始化时，就调用resize方法进行扩容；")]),t._v(" "),a("p",[t._v("②.每次扩展的时候，都是扩展2倍；")]),t._v(" "),a("p",[t._v("③.扩展后Node对象的位置要么在原位置，要么移动到原偏移量两倍的位置。在putVal()中，我们看到在这个函数里面使用到了2次resize()方法，resize()方法表示的在进行第一次初始化时会对其进行扩容，或者当该数组的实际大小大于其临界值值(第一次为12),这个时候在扩容的同时也会伴随的桶上面的元素进行重新分发，这也是JDK1.8版本的一个优化的地方，在1.7中，扩容之后需要重新去计算其Hash值，根据Hash值对其进行分发，但在1.8版本中，则是根据在同一个桶的位置中进行判断(e.hash & oldCap)是否为0，重新进行hash分配后，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" oldTab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//oldTab指向hash桶数组")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" oldCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldTab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" oldTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" oldThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" threshold"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newCap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果oldCap不为空的话，就是hash桶数组不为空")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" MAXIMUM_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果大于最大容量了，就赋值为整数最大的阈值")]),t._v("\n            threshold "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回, 不再处理")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扩容后没有超长,且大于16,则扩充阈值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v(" MAXIMUM_CAPACITY "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("\n                 oldCap "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DEFAULT_INITIAL_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            newThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// double threshold")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧容量为0,threshold>0,说明构造时指定容量,threshold已经被初始化成最小2的n次幂")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// initial capacity was placed in threshold")]),t._v("\n        newCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldThr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// zero initial threshold signifies using defaults")]),t._v("\n        newCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DEFAULT_INITIAL_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无参构造会走这个分支")]),t._v("\n        newThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DEFAULT_LOAD_FACTOR "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" DEFAULT_INITIAL_CAPACITY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有参构造第一次初始化时候计算threshold 例:4默认得到3; 4,1.25会得到5")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" ft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("newCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" loadFactor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        newThr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" MAXIMUM_CAPACITY "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("MAXIMUM_CAPACITY "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("ft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    threshold "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newThr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rawtypes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" newTab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newCap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    table "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//以新容量扩充本HashMap数组长度 (此时数组为空)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldTab "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//旧数组不为空则数据迁移")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" oldCap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null判断 + 遍历时赋给临时变量e")]),t._v("\n                oldTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方便GC回收")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否单节点链表")]),t._v("\n                    newTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newCap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//迁移数据")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是红黑树, 按红黑树处理")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldCap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// preserve order")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// loHead,loTail (低位)代表扩容后不用变换下标, 见注1")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hiHead,hiTail 代表扩容后变换下标, 见注1")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" loHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" hiHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hiTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历链表, 根据hash值将原链表拆成两个, 分别放原位和偏移位")]),t._v("\n                        next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" oldCap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//e.hash小于旧容量,认为在低位")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                                loHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                                loTail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                            loTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 否则在高位")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hiTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                                hiHead "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                                hiTail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                            hiTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//保留原位")]),t._v("\n                        loTail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        newTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hiTail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//迁移至偏移量")]),t._v("\n                        hiTail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        newTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" oldCap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hiHead"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newTab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br"),a("span",{staticClass:"line-number"},[t._v("61")]),a("br"),a("span",{staticClass:"line-number"},[t._v("62")]),a("br"),a("span",{staticClass:"line-number"},[t._v("63")]),a("br"),a("span",{staticClass:"line-number"},[t._v("64")]),a("br"),a("span",{staticClass:"line-number"},[t._v("65")]),a("br"),a("span",{staticClass:"line-number"},[t._v("66")]),a("br"),a("span",{staticClass:"line-number"},[t._v("67")]),a("br"),a("span",{staticClass:"line-number"},[t._v("68")]),a("br"),a("span",{staticClass:"line-number"},[t._v("69")]),a("br"),a("span",{staticClass:"line-number"},[t._v("70")]),a("br"),a("span",{staticClass:"line-number"},[t._v("71")]),a("br"),a("span",{staticClass:"line-number"},[t._v("72")]),a("br"),a("span",{staticClass:"line-number"},[t._v("73")]),a("br"),a("span",{staticClass:"line-number"},[t._v("74")]),a("br"),a("span",{staticClass:"line-number"},[t._v("75")]),a("br"),a("span",{staticClass:"line-number"},[t._v("76")]),a("br")])]),a("h3",{attrs:{id:"hashmap是怎么解决哈希冲突的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap是怎么解决哈希冲突的"}},[t._v("#")]),t._v(" HashMap是怎么解决哈希冲突的？")]),t._v(" "),a("p",[t._v("答：在解决这个问题之前，我们首先需要知道什么是哈希冲突，而在了解哈希冲突之前我们还要知道什么是哈希才行；什么是哈希？")]),t._v(" "),a("p",[t._v("Hash，一般翻译为“散列”，也有直接音译为“哈希”的，这就是把任意长度的输入通过散列算法，变换成固定长度的输出，该输出就是散列值（哈希值）；这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。")]),t._v(" "),a("p",[t._v("所有散列函数都有如下一个基本特性**：根据同一散列函数计算出的散列值如果不同，那么输入值肯定也不同。但是，根据同一散列函数计算出的散列值如果相同，输入值不一定相同**。")]),t._v(" "),a("h4",{attrs:{id:"什么是哈希冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是哈希冲突"}},[t._v("#")]),t._v(" 什么是哈希冲突？")]),t._v(" "),a("p",[t._v("当两个不同的输入值，根据同一散列函数计算出相同的散列值的现象，我们就把它叫做碰撞（哈希碰撞）。")]),t._v(" "),a("h4",{attrs:{id:"hashmap的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的数据结构"}},[t._v("#")]),t._v(" HashMap的数据结构")]),t._v(" "),a("p",[t._v("在Java中，保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做链地址法的方式可以解决哈希冲突：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("bucket at hash(key) = 0: [] - node\nbucket at hash(key) = 1: [] - node - node - node\nbucket at hash(key) = 2: [] - node\nbucket at hash(key) = 3: []\nbucket at hash(key) = 4: [] - node - node\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("这样我们就可以将拥有相同哈希值的对象组织成一个链表放在hash值所对应的 bucket下，但相比于hashCode返回的int类型，我们HashMap初始的容量大小DEFAULT_INITIAL_CAPACITY = 1 << 4（即2的四次方16）要远小于int类型的范围，所以我们如果只是单纯的用hashCode取余来获取对应的bucket这将会大大增加哈希碰撞的概率，并且最坏情况下还会将HashMap变成一个单链表，所以我们还需要对hashCode作一定的优化 hash()函数")]),t._v(" "),a("p",[t._v("上面提到的问题，主要是因为如果使用hashCode取余，那么相当于参与运算的只有hashCode的低位，高位是没有起到任何作用的，所以我们的思路就是让 hashCode取值出的高位也参与运算，进一步降低hash碰撞的概率，使得数据分布更平均，我们把这样的操作称为扰动，在JDK 1.8中的hash()函数如下：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("这比在JDK 1.7中，更为简洁，相比在1.7中的4次位运算，5次异或运算（9次扰动），在1.8中，只进行了1次位运算和1次异或运算（2次扰动）；")]),t._v(" "),a("h4",{attrs:{id:"jdk1-8新增红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8新增红黑树"}},[t._v("#")]),t._v(" JDK1.8新增红黑树")]),t._v(" "),a("p",[t._v("通过上面的链地址法（使用散列表）和扰动函数我们成功让我们的数据分布更平均，哈希碰撞减少，但是当我们的HashMap中存在大量数据时，加入我们某个 bucket下对应的链表有n个元素，那么遍历时间复杂度就为O(n)，为了针对这个问题，JDK1.8在HashMap中新增了红黑树的数据结构，进一步使得遍历复杂度降低至O(logn);")]),t._v(" "),a("p",[t._v("简单总结一下HashMap是使用了哪些方法来有效解决哈希冲突的：")]),t._v(" "),a("ol",[a("li",[t._v("使用链地址法（使用散列表）来链接拥有相同hash值的数据；")]),t._v(" "),a("li",[t._v("使用2次扰动函数（hash函数）来降低哈希冲突的概率，使得数据分布更平均；")]),t._v(" "),a("li",[t._v("引入红黑树进一步降低遍历的时间复杂度，使得遍历更快；")])]),t._v(" "),a("h3",{attrs:{id:"能否使用任何类作为-map-的-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#能否使用任何类作为-map-的-key"}},[t._v("#")]),t._v(" 能否使用任何类作为 Map 的 key？")]),t._v(" "),a("p",[t._v("可以使用任何类作为 Map 的 key，然而在使用之前，需要考虑以下几点: 如果类重写了 equals() 方法，也应该重写 hashCode() 方法。类的所有实例需要遵循与 equals() 和 hashCode() 相关的规则。")]),t._v(" "),a("p",[t._v("如果一个类没有使用 equals()，不应该在 hashCode() 中使用它。")]),t._v(" "),a("p",[t._v("用户自定义Key, 最佳实践是使之为不可变的，这样 hashCode() 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode() 和 equals() 在未来不会改变，这样就会解决与可变相关的问题了。")]),t._v(" "),a("h3",{attrs:{id:"为什么hashmap中string、integer这样的包装类适合作为key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么hashmap中string、integer这样的包装类适合作为key"}},[t._v("#")]),t._v(" 为什么HashMap中String、Integer这样的包装类适合作为Key？")]),t._v(" "),a("p",[t._v("答：String、Integer等包装类的特性能够保证Hash值的不可更改性和计算准确性，能够有效的减少Hash碰撞的几率")]),t._v(" "),a("ol",[a("li",[t._v("都是final类型，即不可变性，保证key的不可更改性，不会存在获取 hash值不同的情况")])]),t._v(" "),a("p",[t._v("内部已重写了equals()、hashCode()等方法，遵守了HashMap内部的规范（不清楚可以去上面看看putValue的过程），不容易出现Hash值计算错误的情况")]),t._v(" "),a("h3",{attrs:{id:"如果使用object作为hashmap的key-应该怎么办呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果使用object作为hashmap的key-应该怎么办呢"}},[t._v("#")]),t._v(" 如果使用Object作为HashMap的Key，应该怎么办呢？")]),t._v(" "),a("p",[t._v("答：重写hashCode()和equals()方法")]),t._v(" "),a("ol",[a("li",[t._v("重写hashCode()是因为需要计算存储数据的存储位置，需要注意不要试图从散列码计算中排除掉一个对象的关键部分来提高性能，这样虽然能更快但可能会导致更多的Hash碰撞；")]),t._v(" "),a("li",[t._v("重写equals()方法，需要遵守自反性、对称性、传递性、一致性以及对于任何非null的引用值x，x.equals(null)必须返回false的这几个特性，目的是为了保证key在哈希表中的唯一性")])]),t._v(" "),a("h3",{attrs:{id:"hashmap为什么不直接使用hashcode-处理后的哈希值直接作为table的下标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap为什么不直接使用hashcode-处理后的哈希值直接作为table的下标"}},[t._v("#")]),t._v(" HashMap为什么不直接使用hashCode()处理后的哈希值直接作为table的下标？")]),t._v(" "),a("p",[t._v("答：hashCode()方法返回的是int整数类型，其范围为-(2 ^ 31)~(2 ^ 31 - 1)，约有40亿个映射空间，而HashMap的容量范围是在16（初始化默认值）~2 ^ 30，HashMap通常情况下是取不到大值的，并且设备上也难以提供这么多的存储空间，从而导致通过hashCode()计算出的哈希值可能不在数组大小范围内，进而无法匹配存储位置；")]),t._v(" "),a("p",[t._v("那怎么解决呢？")]),t._v(" "),a("ol",[a("li",[t._v("HashMap自己实现了自己的hash()方法，通过两次扰动使得它自己的哈希值高低位自行进行异或运算，降低哈希碰撞概率也使得数据分布更平均；")]),t._v(" "),a("li",[t._v('在保证数组长度为2的幂次方的时候，使用hash()运算之后的值h&(length-1)来获取数组下标的方式进行存储，这样一来是比取余操作更加有效率，二来也是因为只有当数组长度为2的幂次方时，h&(length-1)才等价于h%length，三来解决了“哈希值与数组大小范围不匹配"的问题')])]),t._v(" "),a("h3",{attrs:{id:"hashmap-的长度为什么是2的幂次方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的长度为什么是2的幂次方"}},[t._v("#")]),t._v(" HashMap 的长度为什么是2的幂次方")]),t._v(" "),a("p",[t._v("为了能让 HashMap 存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀，每个链表/红黑树长度大致相同。这个实现就是把数据存到哪个链表/红黑树中的算法。")]),t._v(" "),a("p",[t._v("这个算法应该如何设计呢？我们首先可能会想到采用%取余的操作来实现。但是，重点来了：“取余(%)操作中如果除数是2的幂次则等价于与其除数减一的与(&)操作")]),t._v(" "),a("p",[t._v("也就是说 hash%length==hash&(length-1)的前提是 length 是2的 n 次方；并且 采用二进制位操作 &，相对于%能够提高运算效率，这就解释了 HashMap 的长度为什么是2的幂次方。")]),t._v(" "),a("p",[t._v("那为什么是两次扰动呢？答：这样就是加大哈希值低位的随机性，使得分布更均匀，从而提高对应数组存储下标位置的随机性&均匀性，  终减少Hash冲突，两次就够了，已经达到了高位低位同时参与运算的目的")]),t._v(" "),a("h3",{attrs:{id:"hashmap-与-hashtable-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-与-hashtable-有什么区别"}},[t._v("#")]),t._v(" HashMap 与 HashTable 有什么区别？")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("线程安全： HashMap 是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过 synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；")])]),t._v(" "),a("li",[a("p",[t._v("效率： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；")])]),t._v(" "),a("li",[a("p",[t._v("对Null key 和Null value的支持： HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛 NullPointerException。")])]),t._v(" "),a("li",[a("p",[t._v("**初始容量大小和每次扩充容量大小的不同 **：")]),t._v(" "),a("p",[t._v("①创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。")]),t._v(" "),a("p",[t._v("②创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小。")])]),t._v(" "),a("li",[a("p",[t._v("底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值8时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。")])]),t._v(" "),a("li",[a("p",[t._v("推荐使用：在 Hashtable 的类注释可以看到，Hashtable 是保留类不建议使用，推荐在单线程环境下使用 HashMap 替代，如果需要多线程使用则用 ConcurrentHashMap 替代。")])])]),t._v(" "),a("h3",{attrs:{id:"如何决定使用-hashmap-还是treemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何决定使用-hashmap-还是treemap"}},[t._v("#")]),t._v(" 如何决定使用 HashMap 还是TreeMap？")]),t._v(" "),a("p",[t._v("对于在Map中插入、删除和定位元素这类操作，HashMap是 好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap允许进行有序key的遍历!")]),t._v(" "),a("h3",{attrs:{id:"hashmap-和-concurrenthashmap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-concurrenthashmap-的区别"}},[t._v("#")]),t._v(" HashMap 和 ConcurrentHashMap 的区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("ConcurrentHashMap对整个桶数组进行了分割分段(Segment)，然后在每一个分段上都用lock锁进行保护，相对于HashTable的synchronized 锁的粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启了一种全新的方式实现,利用CAS算法。）")])]),t._v(" "),a("li",[a("p",[t._v("HashMap的键值对允许有null，但是ConcurrentHashMap都不允许。")])])]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap-和-hashtable-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-和-hashtable-的区别"}},[t._v("#")]),t._v(" ConcurrentHashMap 和 Hashtable 的区别？")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。")]),t._v(" "),a("p",[t._v("底层数据结构：")]),t._v(" "),a("p",[t._v("JDK1.7的 ConcurrentHashMap 底层采用 分段的数组+链表 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑树。")]),t._v(" "),a("p",[t._v("Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 数组+链表 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；")]),t._v(" "),a("p",[t._v("实现线程安全的方式（重要）：")]),t._v(" "),a("p",[t._v("① 在JDK1.7的时候，ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。（默认分配16个Segment，比Hashtable效率提高16倍。） 到了 JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 Node 数组+链表+红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。（JDK1.6以后 synchronized锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；")]),t._v(" "),a("p",[t._v("② Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率较低。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。")]),t._v(" "),a("p",[t._v("两者的对比图：")]),t._v(" "),a("p",[t._v("HashTable:")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   ----HashTable 全表锁-- \n /\t\t\t\t         \\\ne1 e2 null e4 e5 e6 null ...\n    |       |\n   e7      e8\n    |\n   e9\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("JDK1.7的ConcurrentHashMap：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("   -segment-\t   -segment-\t-segment-\t....\n /\t\t\t \\\t /           \\ /\t\t  \\\ne1 e2 null e4 e5 e6 null e7 e8 e9 e10 e11 null ....\n    |       |\t\t\t  |\t\t\t\n   e7      e8\t\t\t e20\n    |\n   e9\nHashEntry数组----HashEntry数组---HashEntry数组---...\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("JDK1.8的ConcurrentHashMap（TreeBin: 红黑二叉树节点 Node: 链表节点）：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("lock lock lock lock lock lock lock ...\ne1   e2   null e4   e5   e6   null ...\n    |       |\t\t\t  |\t\t\t\n   e7      e8\t\t\t e20\n    |\n   e9\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("答：ConcurrentHashMap 结合了 HashMap 和 HashTable 二者的优势。 HashMap 没有考虑同步，HashTable 考虑了同步的问题。但是 HashTable 在每次同步执行时都要锁住整个结构。 ConcurrentHashMap 锁的方式是稍微细粒度的。")]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap-底层具体实现知道吗-实现原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-底层具体实现知道吗-实现原理是什么"}},[t._v("#")]),t._v(" ConcurrentHashMap 底层具体实现知道吗？实现原理是什么？")]),t._v(" "),a("p",[t._v("JDK1.7")]),t._v(" "),a("p",[t._v("首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。采用Segment + HashEntry的方式进行实现，结构如下：")]),t._v(" "),a("p",[t._v("一个 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和 HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个 HashEntry数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("该类包含两个静态内部类 HashEntry 和 Segment ；前者用来封装映射表的键值对，后者用来充当锁的角色；")])]),t._v(" "),a("li",[a("p",[t._v("Segment 是一种可重入的锁 ReentrantLock，每个 Segment 守护一个HashEntry 数组里得元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment 锁。")])])]),t._v(" "),a("p",[t._v("JDK1.8")]),t._v(" "),a("p",[t._v("在JDK1.8中，放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现，synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N 倍。")]),t._v(" "),a("p",[t._v("看插入元素过程（建议去看看源码）：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tabAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果相应位置的Node还没有初始化, 则调用CAS插入相应的数据;")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("casTabAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// no lock when adding to empty bin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("如果相应位置的Node不为空，且当前该节点不处于移动状态，则对该节点加synchronized锁，如果该节点的hash不小于0，则遍历链表更新节点或插入新节点；")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tbinCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("binCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" ek"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ek "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ek "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ek"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\toldVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("onlyIfAbsent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" pred "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t\tpred"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("ol",[a("li",[t._v("如果该节点是TreeBin类型的节点，说明是红黑树结构，则通过 putTreeVal方法往红黑树中插入节点；如果binCount不为0，说明put操作对数据产生了影响，如果当前链表的个数达到8个，则通过treeifyBin方法转化为红黑树，如果oldVal不为空，说明是一次更新操作，没有对元素个数产生影响，则直接返回旧值；")]),t._v(" "),a("li",[t._v("如果插入的是一个新节点，则执行addCount()方法尝试更新元素个数 baseCount；")])]),t._v(" "),a("h2",{attrs:{id:"辅助工具类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#辅助工具类"}},[t._v("#")]),t._v(" 辅助工具类")]),t._v(" "),a("h3",{attrs:{id:"array-和-arraylist-有何区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array-和-arraylist-有何区别"}},[t._v("#")]),t._v(" Array 和 ArrayList 有何区别？")]),t._v(" "),a("ul",[a("li",[t._v("Array 可以存储基本数据类型和对象，ArrayList 只能存储对象。")]),t._v(" "),a("li",[t._v("Array 是指定固定大小的，而 ArrayList 大小是自动扩展的。")]),t._v(" "),a("li",[t._v("Array 内置方法没有 ArrayList 多，比如 addAll、removeAll、iteration 等方法只有 ArrayList 有。")])]),t._v(" "),a("p",[t._v("对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。")]),t._v(" "),a("h3",{attrs:{id:"如何实现-array-和-list-之间的转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-array-和-list-之间的转换"}},[t._v("#")]),t._v(" 如何实现 Array 和 List 之间的转换？")]),t._v(" "),a("ul",[a("li",[t._v("Array 转 List： Arrays. asList(array) ；")]),t._v(" "),a("li",[t._v("List 转 Array：List 的 toArray() 方法。")])]),t._v(" "),a("h3",{attrs:{id:"comparable-和-comparator的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator的区别"}},[t._v("#")]),t._v(" comparable 和 comparator的区别？")]),t._v(" "),a("ul",[a("li",[t._v("comparable接口实际上是出自java.lang包，它有一个 compareTo(Object obj)方法用来排序")]),t._v(" "),a("li",[t._v("comparator接口实际上是出自 java.util 包，它有一个compare(Object obj1, Object obj2)方法用来排序")])]),t._v(" "),a("p",[t._v("一般我们需要对一个集合使用自定义排序时，我们就要重写compareTo方法或 compare方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写compareTo方法和使用自制的Comparator方法或者以两个Comparator来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数版的Collections.sort().")]),t._v(" "),a("h3",{attrs:{id:"collection-和-collections-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection-和-collections-有什么区别"}},[t._v("#")]),t._v(" Collection 和 Collections 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了 大化的统一操作方式，其直接继承接口有List与Set。")]),t._v(" "),a("li",[t._v("Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。")])]),t._v(" "),a("h3",{attrs:{id:"treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap-和-treeset-在排序时如何比较元素-collections-工具类中的-sort-方法如何比较元素"}},[t._v("#")]),t._v(" TreeMap 和 TreeSet 在排序时如何比较元素？ Collections 工具类中的 sort()方法如何比较元素？")]),t._v(" "),a("p",[t._v("TreeSet 要求存放的对象所属的类必须实现 Comparable 接口，该接口提供了比较元素的 compareTo()方法，当插入元素时会回调该方法比较元素的大小。")]),t._v(" "),a("p",[t._v("TreeMap 要求存放的键值对映射的键必须实现 Comparable 接口从而根据键对元素进 行排 序。")]),t._v(" "),a("p",[t._v("Collections 工具类的 sort 方法有两种重载的形式，")]),t._v(" "),a("p",[t._v("第一种要求传入的待排序容器中存放的对象比较实现 Comparable 接口以实现元素的比较；")]),t._v(" "),a("p",[t._v("第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator 接口的子类型（需要重写 compare 方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java 中对函数式编程的支持）。")])])}),[],!1,null,null,null);s.default=n.exports}}]);