(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{482:function(s,n,a){"use strict";a.r(n);var t=a(45),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-单例模式-确保某一个类只有一个实例-而且自行实例化并向整个系统提供这-个实例。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-单例模式-确保某一个类只有一个实例-而且自行实例化并向整个系统提供这-个实例。"}},[s._v("#")]),s._v(" 1. 单例模式：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这 个实例。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("（1）懒汉式 public class Singleton {  \n    /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载  */       private static Singleton instance = null;  \n    /* 私有构造方法，防止被实例化 */      \n    private Singleton() {    \n    }  \n    /* 1:懒汉式，静态工程方法，创建实例 */       public static Singleton getInstance() {           if (instance == null) {               instance = new Singleton();          \n   \t \t}       \n   \t\treturn instance;     \n   \t \t}  \n   \t } \n    （2）饿汉式 \n    public class Singleton {  \n    \t/* 持有私有静态实例，防止被引用 */       \t\t\t\n    \tprivate static Singleton instance = new Singleton();  \n    \t/* 私有构造方法，防止被实例化 */      \n   \t \tprivate Singleton() {   \n    \t}  \n    /* 1:懒汉式，静态工程方法，创建实例 */       public static Singleton getInstance() {         \n    \treturn instance;     \n    }   \n }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ul",[a("li",[s._v("要求生成唯一序列号的环境；")]),s._v(" "),a("li",[s._v("在整个项目中需要一个共享访问点或共享数据，例如一个Web页面上的计数 器，可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并 确保是线程安全的；")]),s._v(" "),a("li",[s._v("创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源；")]),s._v(" "),a("li",[s._v("需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式 （当然，也可以直接声明为static的方式）。")])]),s._v(" "),a("h2",{attrs:{id:"_2-工厂模式-定义一个用于创建对象的接口-让子类决定实例化哪一个类。工厂-方法使一个类的实例化延迟到其子类。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-工厂模式-定义一个用于创建对象的接口-让子类决定实例化哪一个类。工厂-方法使一个类的实例化延迟到其子类。"}},[s._v("#")]),s._v(" 2. 工厂模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂 方法使一个类的实例化延迟到其子类。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('接口\n\npublic interface Fruit {       \npublic void print();   }   \n2个实现类\npublic class Apple implements Fruit{  \n    @Override       \n    public void print() {           \n \t   System.out.println("我是一个苹果");       \n \t}  \n}   \npublic class Orange implements Fruit{  \n    @Override       \n    public void print() {           \n \t   System.out.println("我是一个橘子");  \n    }  \n}   \n\n工厂类\n\npublic class FruitFactory {       \n\tpublic Fruit produce(String type){           \n\t\tif(type.equals("apple")){               \n\t\t\treturn new Apple();           \n\t\t}else if(type.equals("orange")){               \n\t\t\treturn new Orange();           \n\t\t}else{               \n\t\t\tSystem.out.println("请输入正确的类型!");                 \n\t\treturn null;            \n\t\t}       \n\t}   \n}  \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("使用场景：jdbc连接数据库，硬件访问，降低对象的产生和销毁")]),s._v(" "),a("h2",{attrs:{id:"_3-抽象工厂模式-为创建一组相关或相互依赖的对象提供一个接口-而且无须指-定它们的具体类。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-抽象工厂模式-为创建一组相关或相互依赖的对象提供一个接口-而且无须指-定它们的具体类。"}},[s._v("#")]),s._v(" 3. 抽象工厂模式：为创建一组相关或相互依赖的对象提供一个接口，而且无须指 定它们的具体类。")]),s._v(" "),a("p",[s._v("相对于工厂模式，我们可以新增产品类（只需要实现产品接口），只需要同时新 增一个工厂类，客户端就可以轻松调用新产品的代码。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface food{} \nclass A implements food{} \nclass B implements food{} \ninterface produce{ food get();} \nclass FactoryForA implements produce{     \n\t@Override     \n\tpublic food get() {         \n\t\treturn new A();    \n    } \n} \nclass FactoryForB implements produce{     \n\t@Override     \n\tpublic food get() {         \n\treturn new B();     \n\t} \n} \npublic class AbstractFactory {     \n\tpublic void ClientCode(String name){         \n\t\tfood x= new FactoryForA().get();         \n\t\tx = new FactoryForB().get();     \n\t} \n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("使用场景：一个对象族（或是一组没有任何关系的对象）都有相同的约束。 涉及不同操作系统的时候，都可以考虑使用抽象工厂模式")]),s._v(" "),a("h2",{attrs:{id:"_4-建造者模式-将一个复杂对象的构建与它的表示分离-使得同样的构建过程可-以创建不同的表示。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-建造者模式-将一个复杂对象的构建与它的表示分离-使得同样的构建过程可-以创建不同的表示。"}},[s._v("#")]),s._v(" 4.建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可 以创建不同的表示。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Build {     \n\tstatic class Student{     \n\tString name = null ;         \n\t\tint number = -1 ;         \n\t\tString sex = null ;     \n\tpublic Student(Builder builder)         {     \n\tthis.name=builder.name;     \n\tthis.number=builder.number;     \n\tthis.sex=builder.sex;     \n\t}         \n\t\tstatic class Builder{\n            \n\t\tString name = null ;             \n\t\tint number = -1 ;             \n\t\tString sex = null ;             \n\t\tpublic Builder setName(String name){                 \n\t\tthis.name=name;                 \n\t\treturn this;             \n\t\t}             \n\t\tpublic Builder setNumber(int number){                 \n\t\tthis.number=number;                 \n\t\treturn this;             \n\t\t}             \n\t\tpublic Builder setSex(String sex){                 \n\t\tthis.sex=sex;                 \n\t\treturn this;             \n\t\t}             \n\t\tpublic Student build(){                 \n\t\treturn new Student(this);            \n\t\t}\n }                 \n}     \npublic static void main(String[] args) {     \nStudent A=new Student.Builder().setName("张 三").setNumber(1).build();     Student B=new Student.Builder().setSex("男").setName("李四").build();      \n\tSystem.out.println(A.name+" "+A.number+" "+A.sex);         \t\t\t\tSystem.out.println(B.name+" "+B.number+" "+B.sex);     \n\t} \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[s._v("相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模 式。")]),s._v(" "),a("li",[s._v("多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同 时，则可以使用该模式。")]),s._v(" "),a("li",[s._v("产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候 使用建造者模式非常合适。")])]),s._v(" "),a("h2",{attrs:{id:"_5-原型模式-用原型实例指定创建对象的种类-并且通过拷贝这些原型创建新的-对象。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-原型模式-用原型实例指定创建对象的种类-并且通过拷贝这些原型创建新的-对象。"}},[s._v("#")]),s._v(" 5. 原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的 对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Prototype implements Cloneable{     \n\tprivate String name;     \n\tpublic String getName() {         \n\t\treturn name;     \n\t}     \n\tpublic void setName(String name) {         \n\tthis.name = name;     \n\t}     \n\t@Override     \n\tprotected Object clone()   {         \n\t\ttry {             \n\t\t\treturn super.clone();         \n\t\t} catch (CloneNotSupportedException e) {             \n\t\t\te.printStackTrace();         \n\t\t}finally {             \n\t\t\treturn null;         \n\t\t}     \n\t}     \n\tpublic static void main ( String[] args){         \n\t\tPrototype pro = new Prototype();         \n\t\tPrototype pro1 = (Prototype)pro.clone();     \n\t}\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("原型模式实际上就是实现Cloneable接口，重写clone（）方法。")]),s._v(" "),a("p",[s._v("使用原型模式的优点：")]),s._v(" "),a("p",[s._v("1.性能优良")]),s._v(" "),a("p",[s._v("原型模式是在内存二进制流的拷贝，要比直接new一个对象性能好很多，特别是 要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。")]),s._v(" "),a("p",[s._v("2.逃避构造函数的约束")]),s._v(" "),a("p",[s._v("这既是它的优点也是缺点，直接在内存中拷贝，构造函数是不会执行的（参见 13.4节）。")]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("p",[s._v("资源优化场景 类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。")]),s._v(" "),a("p",[s._v("性能和安全要求的场景 通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模 式。")]),s._v(" "),a("p",[s._v("一个对象多个修改者的场景 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可 以考虑使用原型模式拷贝多个对象供调用者使用。")]),s._v(" "),a("p",[s._v("浅拷贝和深拷贝：")]),s._v(" "),a("p",[s._v("浅拷贝：Object类提供的方法clone只是拷贝本对象，其对象内部的数组、引用 对象等都不拷贝，还是指向原生对象的内部元素地址，这种拷贝就叫做浅拷贝， 其他的原始类型比如int、long、char、string（当做是原始类型）等都会被拷 贝。")]),s._v(" "),a("p",[s._v("注意：　使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝：一 是类的成员变量，而不是方法内变量；二是必须是一个可变的引用对象，而不是 一个原始类型或不可变对象。")]),s._v(" "),a("p",[s._v("深拷贝：对私有的类变量进行独立的拷贝")]),s._v(" "),a("p",[s._v("如：this.arrayList = (ArrayList)this.arrayList.clone();")]),s._v(" "),a("h2",{attrs:{id:"_6-适配器模式-将一个类的接口变换成客户端所期待的另一种接口-从而使原本-因接口不匹配而无法在一起工作的两个类能够在一起工作。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-适配器模式-将一个类的接口变换成客户端所期待的另一种接口-从而使原本-因接口不匹配而无法在一起工作的两个类能够在一起工作。"}},[s._v("#")]),s._v(" 6. 适配器模式：将一个类的接口变换成客户端所期待的另一种接口，从而使原本 因接口不匹配而无法在一起工作的两个类能够在一起工作。")]),s._v(" "),a("p",[s._v("主要可分为3种：")]),s._v(" "),a("ol",[a("li",[s._v("类适配：创建新类，继承源类，并实现新接口，例如  class  adapter extends oldClass  implements newFunc{}")]),s._v(" "),a("li",[s._v("对象适配：创建新类持源类的实例，并实现新接口，例如  class adapter implements newFunc { private oldClass oldInstance ;}")]),s._v(" "),a("li",[s._v("接口适配：创建新的抽象类实现旧接口方法。例如  abstract class adapter implements oldClassFunc { void newFunc();}")])]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("p",[s._v("你有动机修改一个已经投产中的接口时，适配器模式可能是适合你的模式。比 如系统扩展了，需要使用一个已有或新建立的类，但这个类又不符合系统的接 口，怎么办？使用适配器模式，这也是我们例子中提到的。")]),s._v(" "),a("h2",{attrs:{id:"_7-装饰器模式-动态地给一个对象添加一些额外的职责。就增加功能来说-装饰-器模式相比生成子类更为灵活-。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-装饰器模式-动态地给一个对象添加一些额外的职责。就增加功能来说-装饰-器模式相比生成子类更为灵活-。"}},[s._v("#")]),s._v(" 7. 装饰器模式：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰 器模式相比生成子类更为灵活 。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface Source{ void method();} \npublic class Decorator implements Source{     \n\tprivate Source source ;     \n\tpublic void decotate1(){         \n\t\tSystem.out.println("decorate");     \n\t}     \n\t@Override     \n\tpublic void method() {         \n\t\tdecotate1();         \n\t\tsource.method();     \n\t} \n} \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[s._v("需要扩展一个类的功能，或给一个类增加附加功能。")]),s._v(" "),a("li",[s._v("需要动态地给一个对象增加功能，这些功能可以再动态地撤销。")]),s._v(" "),a("li",[s._v("需要为一批的兄弟类进行改装或加装功能，当然是首选装饰模式。")])]),s._v(" "),a("h2",{attrs:{id:"_8-代理模式-为其他对象提供一种代理以控制对这个对象的访问。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-代理模式-为其他对象提供一种代理以控制对这个对象的访问。"}},[s._v("#")]),s._v(" 8. 代理模式：为其他对象提供一种代理以控制对这个对象的访问。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Source{ void method();} \nclass OldClass implements Source{     \n\t@Override     \n\tpublic void method() {     \n\t} \n} \nclass Proxy implements Source{     \n\tprivate Source source = new OldClass();     \n\tvoid doSomething(){}     \n\t@Override    \n\tpublic void method() {         \n\t\tnew Class1().Func1();         \n\t\tsource.method();         \n\t\tnew Class2().Func2();         \n\t\tdoSomething();     \n\t} \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"_9-中介者模式-用一个中介对象封装一系列的对象交互-中介者使各对象不需要-显示地相互作用-从而使其耦合松散-而且可以独立地改变它们之间的交互。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-中介者模式-用一个中介对象封装一系列的对象交互-中介者使各对象不需要-显示地相互作用-从而使其耦合松散-而且可以独立地改变它们之间的交互。"}},[s._v("#")]),s._v(" 9. 中介者模式：用一个中介对象封装一系列的对象交互，中介者使各对象不需要 显示地相互作用，从而使其耦合松散，而且可以独立地改变它们之间的交互。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public abstract class Mediator {      \n\t//定义同事类      \n\tprotected ConcreteColleague1 c1;      \n\tprotected ConcreteColleague2 c2;      \n\t//通过getter/setter方法把同事类注入进来      \n\tpublic ConcreteColleague1 getC1() {              \n\t\treturn c1;      \n\t}\n  public void setC1(ConcreteColleague1 c1) {              \n \t this.c1 = c1;      \n  }      \n  public ConcreteColleague2 getC2() {             \n \t return c2; }     \n  public void setC2(ConcreteColleague2 c2) {       \n\t  this.c2 = c2;     \n  }    \n  //中介者模式的业务逻辑     \n  public abstract void doSomething1();     \n  public abstract void doSomething2(); \n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("使用场景： 中介者模式适用于多个对象之间紧密耦合的情况，紧密耦合的标准是：在类图中 出现了蜘蛛网状结构，即每个类都与其他的类有直接的联系。")]),s._v(" "),a("h2",{attrs:{id:"_10-命令模式-将一个请求封装成一个对象-从而让你使用不同的请求把客户端-参数化-对请求排队或者记录请求日志-可以提供命令的撤销和恢复功能。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-命令模式-将一个请求封装成一个对象-从而让你使用不同的请求把客户端-参数化-对请求排队或者记录请求日志-可以提供命令的撤销和恢复功能。"}},[s._v("#")]),s._v(" 10. 命令模式：将一个请求封装成一个对象，从而让你使用不同的请求把客户端 参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。")]),s._v(" "),a("p",[s._v("Receiver接受者角色：该角色就是干活的角色，命令传递到这里是应该被执行的")]),s._v(" "),a("p",[s._v("Command命令角色：需要执行的所有命令都在这里声明")]),s._v(" "),a("p",[s._v("Invoker调用者角色：接收到命令，并执行命令")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//通用Receiver类 \npublic abstract class Receiver {     \n\tpublic abstract void doSomething(); \n} \n//具体Receiver类 \npublic class ConcreteReciver1 extends Receiver{      \n\t//每个接收者都必须处理一定的业务逻辑      \n\tpublic void doSomething(){ }  \n} \npublic class ConcreteReciver2 extends Receiver{      \n\t//每个接收者都必须处理一定的业务逻辑      \n\tpublic void doSomething(){ }  \n} \n//抽象Command类 public abstract class Command {     \n\tpublic abstract void execute(); \n} \n//具体的Command类 \npublic class ConcreteCommand1 extends Command {      \n\t//对哪个Receiver类进行命令处理      \n\tprivate Receiver receiver;   \n\t//构造函数传递接收者   \n\tpublic ConcreteCommand1(Receiver _receiver){   \n\t\tthis.receiver = _receiver;     \n\t}  \n\t//必须实现一个命令 \n\tpublic void execute() {   \n\t//业务处理        \n\t\tthis.receiver.doSomething();    \n\t} \t\n} \npublic class ConcreteCommand2 extends Command {  \n\t//哪个Receiver类进行命令处理   \n\tprivate Receiver receiver; \n\t//构造函数传递接收者\n\tpublic ConcreteCommand2(Receiver _receiver){    \n\t\tthis.receiver = _receiver;   \n}     \n//必须实现一个命令 \n public void execute() {      \n\t //业务处理      \n\t this.receiver.doSomething(); \n\t }  \n } \n //调用者Invoker类 public class Invoker {   \n private Command command;\n \tpublic void setCommand(Command _command){    \n \tthis.command = _command;  \n }\npublic void action() {      \n\tthis.command.execute();  \n\t} \n} \n\t//场景类 \npublic class Client { \n\tpublic static void main(String[] args){      \n\t\tInvoker invoker = new Invoker();       \n\t\tReceiver receiver = new ConcreteReceiver1();\n    \tCommand command = new ConcreteCommand1(receiver);         \t\t\t\tinvoker.setCommand(command);    \n     \tinvoker.action(); \n     } \t\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br")])]),a("p",[s._v("使用场景： 认为是命令的地方就可以采用命令模式，例如，在GUI开发中，一个按钮的点击 是一个命令，可以采用命令模式；模拟DOS命令的时候，当然也要采用命令模\n式；触发－反馈机制的处理等。")]),s._v(" "),a("h2",{attrs:{id:"_11-责任链模式-使多个对象都有机会处理请求-从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链-并沿着这条链传递该请求-直到有对象处理它为止。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-责任链模式-使多个对象都有机会处理请求-从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链-并沿着这条链传递该请求-直到有对象处理它为止。"}},[s._v("#")]),s._v(" 11.责任链模式：使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public abstract class Handler {\n     private Handler nextHandler;\n     //每个处理者都必须对请求做出处理\n     public final Response handleMessage(Request request){\n             Response response = null;  \n             //判断是否是自己的处理级别\n             if(this.getHandlerLevel().equals(request.getRequestLevel())){\n                    response = this.echo(request);\n             }else{  //不属于自己的处理级别\n                    //判断是否有下一个处理者\n                    if(this.nextHandler != null){\n                            response = this.nextHandler.handleMessage(request);\n                    }else{\n                            //没有适当的处理者，业务自行处理\n                    }\n             }\n             return response;\n     }\n     //设置下一个处理者是谁\n     public void setNext(Handler _handler){\n             this.nextHandler = _handler;\n     }\n     //每个处理者都有一个处理级别\n     protected abstract Level getHandlerLevel();\n     //每个处理者都必须实现处理任务\n     protected abstract Response echo(Request request);\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h2",{attrs:{id:"_12-策略模式-定义一组算法-将每个算法都封装起来-并且使它们之间可以互换。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-策略模式-定义一组算法-将每个算法都封装起来-并且使它们之间可以互换。"}},[s._v("#")]),s._v(" 12.策略模式：定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。")]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("多个类只有在算法或行为上稍有不同的场景。")])]),s._v(" "),a("li",[a("p",[s._v("算法需要自由切换的场景。")])]),s._v(" "),a("li",[a("p",[s._v("需要屏蔽算法规则的场景。")])])]),s._v(" "),a("h2",{attrs:{id:"_13-迭代器模式-它提供一种方法访问一个容器对象中各个元素-而又不需暴露该对象的内部细节。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-迭代器模式-它提供一种方法访问一个容器对象中各个元素-而又不需暴露该对象的内部细节。"}},[s._v("#")]),s._v(" 13.迭代器模式：它提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节。")]),s._v(" "),a("p",[s._v("迭代器模式已经被淘汰，java中已经把迭代器运用到各个聚集类（collection）中了，使用java自带的迭代器就已经满足我们的需求了。")]),s._v(" "),a("h2",{attrs:{id:"_14-组合模式-将对象组合成树形结构以表示-部分-整体-的层次结构-使得用户对单个对象和组合对象的使用具有一致性。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-组合模式-将对象组合成树形结构以表示-部分-整体-的层次结构-使得用户对单个对象和组合对象的使用具有一致性。"}},[s._v("#")]),s._v(" 14.组合模式：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Composite extends Component {\n     //构件容器\n     private ArrayList componentArrayList = new ArrayList();\n     //增加一个叶子构件或树枝构件\n     public void add(Component component){\n             this.componentArrayList.add(component);\n     }\n     //删除一个叶子构件或树枝构件\n     public void remove(Component component){\nthis.componentArrayList.remove(component);\n     }\n     //获得分支下的所有叶子构件和树枝构件\n     public ArrayList getChildren(){\n             return this.componentArrayList;\n     }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("维护和展示部分-整体关系的场景，如树形菜单、文件和文件夹管理。")])]),s._v(" "),a("li",[a("p",[s._v("从一个整体中能够独立出部分模块或功能的场景。")])])]),s._v(" "),a("h2",{attrs:{id:"_15-观察者模式-定义对象间一种一对多的依赖关系-使得每当一个对象改变状态-则所有依赖于它的对象都会得到通知并被自动更新。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-观察者模式-定义对象间一种一对多的依赖关系-使得每当一个对象改变状态-则所有依赖于它的对象都会得到通知并被自动更新。"}},[s._v("#")]),s._v(" 15.观察者模式：定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public abstract class Subject {\n     //定义一个观察者数组\n     private Vector obsVector = new Vector();\n     //增加一个观察者\n     public void addObserver(Observer o){\n             this.obsVector.add(o);\n     }\n     //删除一个观察者\n     public void delObserver(Observer o){\n             this.obsVector.remove(o);\n     }\n     //通知所有观察者\n     public void notifyObservers(){\n             for(Observer o:this.obsVector){\n                     o.update();\n}\n     }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("关联行为场景。需要注意的是，关联行为是可拆分的，而不是“组合”关系。")])]),s._v(" "),a("li",[a("p",[s._v("事件多级触发场景。")])]),s._v(" "),a("li",[a("p",[s._v("跨系统的消息交换场景，如消息队列的处理机制")])])]),s._v(" "),a("h2",{attrs:{id:"_16-门面模式-要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口-使得子系统更易于使用。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-门面模式-要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口-使得子系统更易于使用。"}},[s._v("#")]),s._v(" 16.门面模式：要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。门面模式提供一个高层次的接口，使得子系统更易于使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Facade {\n    private subSystem1 subSystem1 = new subSystem1();\n    private subSystem2 subSystem2 = new subSystem2();\n    private subSystem3 subSystem3 = new subSystem3();\n    public void startSystem(){\n        subSystem1.start();\n        subSystem2.start();         \n        subSystem3.start();\n    }\n    public void stopSystem(){\n        subSystem1.stop();\n        subSystem2.stop();         \n        subSystem3.stop();\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("为一个复杂的模块或子系统提供一个供外界访问的接口")])]),s._v(" "),a("li",[a("p",[s._v("子系统相对独立——外界对子系统的访问只要黑箱操作即可")])]),s._v(" "),a("li",[a("p",[s._v("预防低水平人员带来的风险扩散")])])]),s._v(" "),a("h2",{attrs:{id:"_17-备忘录模式-在不破坏封装性的前提下-捕获一个对象的内部状态-并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-备忘录模式-在不破坏封装性的前提下-捕获一个对象的内部状态-并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。"}},[s._v("#")]),s._v(" 17.备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('public class Originator {\n    private String state;\n    /**\n*\t工厂方法，返回一个新的备忘录对象\n     */\n    public Memento createMemento(){\n        return new Memento(state);\n    }\n    /**\n*\t将发起人恢复到备忘录对象所记载的状态\n     */\n    public void restoreMemento(Memento memento){\n        this.state = memento.getState();\n    }\n    public String getState() {\n        return state;\n    }\n    public void setState(String state) {\n        this.state = state;\n        System.out.println("当前状态：" + this.state);\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("需要保存和恢复数据的相关状态场景。")])]),s._v(" "),a("li",[a("p",[s._v("提供一个可回滚（rollback）的操作。")])]),s._v(" "),a("li",[a("p",[s._v("需要监控的副本场景中。")])]),s._v(" "),a("li",[a("p",[s._v("数据库连接的事务管理就是用的备忘录模式。")])])]),s._v(" "),a("h2",{attrs:{id:"_18-访问者模式-封装一些作用于某种数据结构中的各元素的操作-它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-访问者模式-封装一些作用于某种数据结构中的各元素的操作-它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。"}},[s._v("#")]),s._v(" 18.访问者模式：封装一些作用于某种数据结构中的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。")]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作，也就说是用迭代器模式已经不能胜任的情景。")])]),s._v(" "),a("li",[a("p",[s._v("需要对一个对象结构中的对象进行很多不同并且不相关的操作，而你想避免让这些操作“污染”这些对象的类。")])])]),s._v(" "),a("h2",{attrs:{id:"_19-状态模式-当一个对象内在状态改变时允许其改变行为-这个对象看起来像改变了其类。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-状态模式-当一个对象内在状态改变时允许其改变行为-这个对象看起来像改变了其类。"}},[s._v("#")]),s._v(" 19.状态模式：当一个对象内在状态改变时允许其改变行为，这个对象看起来像改变了其类。")]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("行为随状态改变而改变的场景这也是状态模式的根本出发点，例如权限设计，人员的状态不同即使执行相同的行为结果也会不同，在这种情况下需要考虑使用状态模式。")])]),s._v(" "),a("li",[a("p",[s._v("条件、分支判断语句的替代者")])])]),s._v(" "),a("h2",{attrs:{id:"_20-解释器模式-给定一门语言-定义它的文法的一种表示-并定义一个解释器-该解释器使用该表示来解释语言中的句子。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-解释器模式-给定一门语言-定义它的文法的一种表示-并定义一个解释器-该解释器使用该表示来解释语言中的句子。"}},[s._v("#")]),s._v(" 20.解释器模式：给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。")]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("重复发生的问题可以使用解释器模式")])]),s._v(" "),a("li",[a("p",[s._v("一个简单语法需要解释的场景")])])]),s._v(" "),a("h2",{attrs:{id:"_21-享元模式-使用共享对象的方法-用来尽可能减少内存使用量以及分享资讯。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-享元模式-使用共享对象的方法-用来尽可能减少内存使用量以及分享资讯。"}},[s._v("#")]),s._v(" 21.享元模式：使用共享对象的方法，用来尽可能减少内存使用量以及分享资讯。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class flywei{ }\npublic class Flyweight extends flywei{\n    Object obj ;\n    public Flyweight(Object obj){\n        this.obj = obj;\n    }\n}\nclass  FlyweightFactory{     private HashMap data;\n    public FlyweightFactory(){ data = new HashMap<>();}\n    public Flyweight getFlyweight(Object object){\n        if ( data.containsKey(object)){\n            return data.get(object);\n        }else {\n            Flyweight flyweight = new Flyweight(object);\n            data.put(object,flyweight);\n            return flyweight;\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("系统中存在大量的相似对象。")])]),s._v(" "),a("li",[a("p",[s._v("细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份。")])]),s._v(" "),a("li",[a("p",[s._v("需要缓冲池的场景。")])])]),s._v(" "),a("h2",{attrs:{id:"_22-桥梁模式-将抽象和实现解耦-使得两者可以独立地变化。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-桥梁模式-将抽象和实现解耦-使得两者可以独立地变化。"}},[s._v("#")]),s._v(" 22.桥梁模式：将抽象和实现解耦，使得两者可以独立地变化。")]),s._v(" "),a("p",[s._v("Circle类将DrwaApi与Shape类进行了桥接，")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface DrawAPI {\n    public void drawCircle(int radius, int x, int y);\n}\nclass RedCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println("Drawing Circle[ color: red, radius: "\n                + radius +", x: " +x+", "+ y +"]");\n    }\n}\nclass GreenCircle implements DrawAPI {\n    @Override\n    public void drawCircle(int radius, int x, int y) {\n        System.out.println("Drawing Circle[ color: green, radius: "\n                + radius +", x: " +x+", "+ y +"]");\n    }\n}\nabstract class Shape {\n    protected DrawAPI drawAPI;\n    protected Shape(DrawAPI drawAPI){\n        this.drawAPI = drawAPI;\n    }\n    public abstract void draw();\n}\nclass Circle extends Shape {\n    private int x, y, radius;\n    public Circle(int x, int y, int radius, DrawAPI drawAPI) {\n        super(drawAPI);\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n    public void draw() {\n        drawAPI.drawCircle(radius,x,y);\n    }\n}\n//客户端使用代码\nShape redCircle = new Circle(100,100, 10, new RedCircle()); Shape greenCircle = new Circle(100,100, 10, new GreenCircle()); redCircle.draw(); greenCircle.draw(); \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("不希望或不适用使用继承的场景")])]),s._v(" "),a("li",[a("p",[s._v("接口或抽象类不稳定的场景")])]),s._v(" "),a("li",[a("p",[s._v("重用性要求较高的场景")])])]),s._v(" "),a("h2",{attrs:{id:"_23-模板方法模式-定义一个操作中的算法的框架-而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-模板方法模式-定义一个操作中的算法的框架-而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。"}},[s._v("#")]),s._v(" 23.模板方法模式：定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。")]),s._v(" "),a("p",[s._v("使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("多个子类有公有的方法，并且逻辑基本相同时。")])]),s._v(" "),a("li",[a("p",[s._v("重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现。")])]),s._v(" "),a("li",[a("p",[s._v("重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数（见“模板方法模式的扩展”）约束其行为。")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);