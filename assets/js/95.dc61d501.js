(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{450:function(t,e,_){"use strict";_.r(e);var v=_(45),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"spring问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring问题"}},[t._v("#")]),t._v(" spring问题")]),t._v(" "),_("p",[t._v("答题技巧:")]),t._v(" "),_("ul",[_("li",[t._v("总分 总:当前问题是哪个具体的电; 分: 以1,2,3,4的方式分细节描述相关的知识点")]),t._v(" "),_("li",[t._v("突出一些技术名词, 核心概念, 接口, 类, 关键方法")])]),t._v(" "),_("p",[t._v("答题技巧：")]),t._v(" "),_("p",[t._v("总：当前问题回答的是那些具体的点")]),t._v(" "),_("p",[t._v("分：以1，2，3，4，5的方式分细节取描述相关的知识点，如果有哪些点不清楚，直接忽略过去")]),t._v(" "),_("p",[t._v("​\t\t突出一些技术名词（核心概念，接口，类，关键方法）")]),t._v(" "),_("p",[t._v("​\t\t避重就轻：没有重点")]),t._v(" "),_("p",[t._v("一个问题能占用面试官多少时间？问的越多可能露馅越多")]),t._v(" "),_("p",[t._v("当面试官问到一个你熟悉的点的时候，一定要尽量拖时间")]),t._v(" "),_("h1",{attrs:{id:"_1-谈谈spring-ioc的理解-原理与实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-谈谈spring-ioc的理解-原理与实现"}},[t._v("#")]),t._v(" 1.谈谈Spring IOC的理解，原理与实现?")]),t._v(" "),_("p",[_("strong",[t._v("总：")])]),t._v(" "),_("p",[t._v("控制反转：理论思想，原来的对象是由使用者来进行控制，有了spring之后，可以把整个对象交给spring来帮我们进行管理")]),t._v(" "),_("p",[t._v("​\t\t\t\tDI：依赖注入，把对应的属性的值注入到具体的对象中，@Autowired，populateBean完成属性值的注入")]),t._v(" "),_("p",[t._v("容器：存储对象，使用map结构来存储，在spring中一般存在三级缓存，singletonObjects存放完整的bean对象,")]),t._v(" "),_("p",[t._v("​\t\t\t整个bean的生命周期，从创建到使用到销毁的过程全部都是由容器来管理（bean的生命周期）")]),t._v(" "),_("p",[_("strong",[t._v("分：")])]),t._v(" "),_("p",[t._v("1、一般聊ioc容器的时候要涉及到容器的创建过程（beanFactory,DefaultListableBeanFactory）,向bean工厂中设置一些参数（BeanPostProcessor,Aware接口的子类）等等属性")]),t._v(" "),_("p",[t._v("2、加载解析bean对象，准备要创建的bean对象的定义对象beanDefinition,(xml或者注解的解析过程)")]),t._v(" "),_("p",[t._v("3、beanFactoryPostProcessor的处理，此处是扩展点，PlaceHolderConfigurSupport,ConfigurationClassPostProcessor")]),t._v(" "),_("p",[t._v("4、BeanPostProcessor的注册功能，方便后续对bean对象完成具体的扩展功能")]),t._v(" "),_("p",[t._v("5、通过反射的方式讲BeanDefinition对象实例化成具体的bean对象，")]),t._v(" "),_("p",[t._v("6、bean对象的初始化过程（填充属性，调用aware子类的方法，调用BeanPostProcessor前置处理方法，调用init-mehtod方法，调用BeanPostProcessor的后置处理方法）")]),t._v(" "),_("p",[t._v("7、生成完整的bean对象，通过getBean方法可以直接获取")]),t._v(" "),_("p",[t._v("8、销毁过程")]),t._v(" "),_("p",[t._v("面试官，这是我对ioc的整体理解，包含了一些详细的处理过程，您看一下有什么问题，可以指点我一下（允许你把整个流程说完）")]),t._v(" "),_("p",[t._v("您由什么想问的？")]),t._v(" "),_("p",[t._v("​\t\t\t老师，我没看过源码怎么办？")]),t._v(" "),_("p",[t._v("​\t\t具体的细节我记不太清了，但是spring中的bean都是通过反射的方式生成的，同时其中包含了很多的扩展点，比如最常用的对BeanFactory的扩展，对bean的扩展（对占位符的处理），我们在公司对这方面的使用是比较多的，除此之外，ioc中最核心的也就是填充具体bean的属性，和生命周期（背一下）。")]),t._v(" "),_("h1",{attrs:{id:"_2-谈一下spring-ioc的底层实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-谈一下spring-ioc的底层实现"}},[t._v("#")]),t._v(" 2.谈一下spring IOC的底层实现")]),t._v(" "),_("p",[t._v("底层实现：工作原理，过程，数据结构，流程，设计模式，设计思想")]),t._v(" "),_("p",[t._v("你对他的理解和你了解过的实现过程")]),t._v(" "),_("p",[t._v("反射，工厂，设计模式（会的说，不会的不说），关键的几个方法")]),t._v(" "),_("p",[t._v("createBeanFactory，getBean,doGetBean,createBean,doCreateBean,createBeanInstance(getDeclaredConstructor,newinstance),populateBean,initializingBean")]),t._v(" "),_("p",[t._v("1、先通过createBeanFactory创建出一个Bean工厂（DefaultListableBeanFactory）")]),t._v(" "),_("p",[t._v("2、开始循环创建对象，因为容器中的bean默认都是单例的，所以优先通过getBean,doGetBean从容器中查找，找不到的话，")]),t._v(" "),_("p",[t._v("3、通过createBean,doCreateBean方法，以反射的方式创建对象，一般情况下使用的是无参的构造方法（getDeclaredConstructor，newInstance）")]),t._v(" "),_("p",[t._v("4、进行对象的属性填充populateBean")]),t._v(" "),_("p",[t._v("5、进行其他的初始化操作（initializingBean）")]),t._v(" "),_("h1",{attrs:{id:"_3-描述一下bean的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-描述一下bean的生命周期"}},[t._v("#")]),t._v(" 3.描述一下bean的生命周期 ？")]),t._v(" "),_("p",[t._v("背图：记住图中的流程")]),t._v(" "),_("p",[t._v("在表述的时候不要只说图中有的关键点，要学会扩展描述")]),t._v(" "),_("p",[t._v("1、实例化bean：反射的方式生成对象")]),t._v(" "),_("p",[t._v("2、填充bean的属性：populateBean(),循环依赖的问题（三级缓存）")]),t._v(" "),_("p",[t._v("3、调用aware接口相关的方法：invokeAwareMethod(完成BeanName,BeanFactory,BeanClassLoader对象的属性设置)")]),t._v(" "),_("p",[t._v("4、调用BeanPostProcessor中的前置处理方法：使用比较多的有（ApplicationContextPostProcessor,设置ApplicationContext,Environment,ResourceLoader,EmbeddValueResolver等对象）")]),t._v(" "),_("p",[t._v("5、调用initmethod方法：invokeInitmethod(),判断是否实现了initializingBean接口，如果有，调用afterPropertiesSet方法，没有就不调用")]),t._v(" "),_("p",[t._v("6、调用BeanPostProcessor的后置处理方法：spring的aop就是在此处实现的，AbstractAutoProxyCreator")]),t._v(" "),_("p",[t._v("​\t\t注册Destuction相关的回调接口：钩子函数")]),t._v(" "),_("p",[t._v("7、获取到完整的对象，可以通过getBean的方式来进行对象的获取")]),t._v(" "),_("p",[t._v("8、销毁流程，1；判断是否实现了DispoableBean接口，2，调用destroyMethod方法")]),t._v(" "),_("h1",{attrs:{id:"_4-spring-是如何解决循环依赖的问题的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-spring-是如何解决循环依赖的问题的"}},[t._v("#")]),t._v(" 4.Spring 是如何解决循环依赖的问题的？")]),t._v(" "),_("p",[t._v("三级缓存，提前暴露对象，aop")]),t._v(" "),_("p",[t._v("总：什么是循环依赖问题，A依赖B,B依赖A")]),t._v(" "),_("p",[t._v("分：先说明bean的创建过程：实例化，初始化（填充属性）")]),t._v(" "),_("p",[t._v("​\t\t1、先创建A对象，实例化A对象，此时A对象中的b属性为空，填充属性b")]),t._v(" "),_("p",[t._v("​\t\t2、从容器中查找B对象，如果找到了，直接赋值不存在循环依赖问题（不通），找不到直接创建B对象")]),t._v(" "),_("p",[t._v("​\t\t3、实例化B对象，此时B对象中的a属性为空，填充属性a")]),t._v(" "),_("p",[t._v("​\t\t4、从容器中查找A对象，找不到，直接创建")]),t._v(" "),_("p",[t._v("​\t\t形成闭环的原因")]),t._v(" "),_("p",[t._v("​\t\t此时，如果仔细琢磨的话，会发现A对象是存在的，只不过此时的A对象不是一个完整的状态，只完成了实例化但是未完成初始化，如果在程序调用过程中，拥有了某个对象的引用，能否在后期给他完成赋值操作，可以优先把非完整状态的对象优先赋值，等待后续操作来完成赋值，相当于提前暴露了某个不完整对象的引用，所以解决问题的核心在于实例化和初始化分开操作，这也是解决循环依赖问题的关键，")]),t._v(" "),_("p",[t._v("​\t\t当所有的对象都完成实例化和初始化操作之后，还要把完整对象放到容器中，此时在容器中存在对象的几个状态，完成实例化=但未完成初始化，完整状态，因为都在容器中，所以要使用不同的map结构来进行存储，此时就有了一级缓存和二级缓存，如果一级缓存中有了，那么二级缓存中就不会存在同名的对象，因为他们的查找顺序是1，2，3这样的方式来查找的。一级缓存中放的是完整对象，二级缓存中放的是非完整对象")]),t._v(" "),_("p",[t._v("​\t\t为什么需要三级缓存？三级缓存的value类型是ObjectFactory,是一个函数式接口，存在的意义是保证在整个容器的运行过程中同名的bean对象只能有一个。")]),t._v(" "),_("p",[t._v("​\t\t如果一个对象需要被代理，或者说需要生成代理对象，那么要不要优先生成一个普通对象？要")]),t._v(" "),_("p",[t._v("​\t\t普通对象和代理对象是不能同时出现在容器中的，因此当一个对象需要被代理的时候，就要使用代理对象覆盖掉之前的普通对象，在实际的调用过程中，是没有办法确定什么时候对象被使用，所以就要求当某个对象被调用的时候，优先判断此对象是否需要被代理，类似于一种回调机制的实现，因此传入lambda表达式的时候，可以通过lambda表达式来执行对象的覆盖过程，getEarlyBeanReference()")]),t._v(" "),_("p",[t._v("​\t\t因此，所有的bean对象在创建的时候都要优先放到三级缓存中，在后续的使用过程中，如果需要被代理则返回代理对象，如果不需要被代理，则直接返回普通对象")]),t._v(" "),_("h1",{attrs:{id:"_4-1缓存的放置时间和删除时间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1缓存的放置时间和删除时间"}},[t._v("#")]),t._v(" 4.1缓存的放置时间和删除时间")]),t._v(" "),_("p",[t._v("​\t\t三级缓存：createBeanInstance之后：addSingletonFactory")]),t._v(" "),_("p",[t._v("​\t\t二级缓存：第一次从三级缓存确定对象是代理对象还是普通对象的时候，同时删除三级缓存 getSingleton")]),t._v(" "),_("p",[t._v("​\t\t一级缓存：生成完整对象之后放到一级缓存，删除二三级缓存:addSingleton")]),t._v(" "),_("h1",{attrs:{id:"_5-bean-factory与factorybean有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-bean-factory与factorybean有什么区别"}},[t._v("#")]),t._v(" 5.Bean Factory与FactoryBean有什么区别？")]),t._v(" "),_("p",[t._v("相同点：都是用来创建bean对象的")]),t._v(" "),_("p",[t._v("不同点：使用BeanFactory创建对象的时候，必须要遵循严格的生命周期流程，太复杂了，，如果想要简单的自定义某个对象的创建，同时创建完成的对象想交给spring来管理，那么就需要实现FactroyBean接口了")]),t._v(" "),_("p",[t._v("​\t\t\tisSingleton:是否是单例对象")]),t._v(" "),_("p",[t._v("​\t\t\tgetObjectType:获取返回对象的类型")]),t._v(" "),_("p",[t._v("​\t\t\tgetObject:自定义创建对象的过程(new，反射，动态代理)")]),t._v(" "),_("h1",{attrs:{id:"_6-spring中用到的设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-spring中用到的设计模式"}},[t._v("#")]),t._v(" 6.Spring中用到的设计模式?")]),t._v(" "),_("p",[t._v("单例模式：bean默认都是单例的")]),t._v(" "),_("p",[t._v("原型模式：指定作用域为prototype")]),t._v(" "),_("p",[t._v("工厂模式：BeanFactory")]),t._v(" "),_("p",[t._v("模板方法：postProcessBeanFactory,onRefresh,initPropertyValue")]),t._v(" "),_("p",[t._v("策略模式：XmlBeanDefinitionReader,PropertiesBeanDefinitionReader")]),t._v(" "),_("p",[t._v("观察者模式：listener，event，multicast")]),t._v(" "),_("p",[t._v("适配器模式：Adapter")]),t._v(" "),_("p",[t._v("装饰者模式：BeanWrapper")]),t._v(" "),_("p",[t._v("责任链模式：使用aop的时候会先生成一个拦截器链")]),t._v(" "),_("p",[t._v("代理模式：动态代理")]),t._v(" "),_("p",[t._v("委托者模式：delegate")]),t._v(" "),_("p",[t._v("。。。。。。。。。")]),t._v(" "),_("h1",{attrs:{id:"_7-spring的aop的底层实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-spring的aop的底层实现原理"}},[t._v("#")]),t._v(" 7.Spring的AOP的底层实现原理?")]),t._v(" "),_("p",[t._v("动态代理")]),t._v(" "),_("p",[t._v("aop是ioc的一个扩展功能，先有的ioc，再有的aop，只是在ioc的整个流程中新增的一个扩展点而已：BeanPostProcessor")]),t._v(" "),_("p",[t._v("总：aop概念，应用场景，动态代理")]),t._v(" "),_("p",[t._v("分：")]),t._v(" "),_("p",[t._v("​\t\tbean的创建过程中有一个步骤可以对bean进行扩展实现，aop本身就是一个扩展功能，所以在BeanPostProcessor的后置处理方法中来进行实现")]),t._v(" "),_("p",[t._v("​\t\t1、代理对象的创建过程（advice，切面，切点）")]),t._v(" "),_("p",[t._v("​\t\t2、通过jdk或者cglib的方式来生成代理对象")]),t._v(" "),_("p",[t._v("​\t\t3、在执行方法调用的时候，会调用到生成的字节码文件中，直接回找到DynamicAdvisoredInterceptor类中的intercept方法，从此方法开始执行")]),t._v(" "),_("p",[t._v("​\t\t4、根据之前定义好的通知来生成拦截器链")]),t._v(" "),_("p",[t._v("​\t\t5、从拦截器链中依次获取每一个通知开始进行执行，在执行过程中，为了方便找到下一个通知是哪个，会有一个CglibMethodInvocation的对象，找的时候是从-1的位置一次开始查找并且执行的。")]),t._v(" "),_("h1",{attrs:{id:"_8-spring的事务是如何回滚的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-spring的事务是如何回滚的"}},[t._v("#")]),t._v(" 8.Spring的事务是如何回滚的?")]),t._v(" "),_("p",[t._v("​\t\tspring的事务管理是如何实现的？")]),t._v(" "),_("p",[t._v("​\t\t总：spring的事务是由aop来实现的，首先要生成具体的代理对象，然后按照aop的整套流程来执行具体的操作逻辑，正常情况下要通过通知来完成核心功能，但是事务不是通过通知来实现的，而是通过一个TransactionInterceptor来实现的，然后调用invoke来实现具体的逻辑")]),t._v(" "),_("p",[t._v("​\t\t分：1、先做准备工作，解析各个方法上事务相关的属性，根据具体的属性来判断是否开始新事务")]),t._v(" "),_("p",[t._v("​\t\t\t\t2、当需要开启的时候，获取数据库连接，关闭自动提交功能，开起事务")]),t._v(" "),_("p",[t._v("​\t\t\t\t3、执行具体的sql逻辑操作")]),t._v(" "),_("p",[t._v("​\t\t\t\t4、在操作过程中，如果执行失败了，那么会通过completeTransactionAfterThrowing看来完成事务的回滚操作，回滚的具体逻辑是通过doRollBack方法来实现的，实现的时候也是要先获取连接对象，通过连接对象来回滚")]),t._v(" "),_("p",[t._v("​\t\t\t\t5、如果执行过程中，没有任何意外情况的发生，那么通过commitTransactionAfterReturning来完成事务的提交操作，提交的具体逻辑是通过doCommit方法来实现的，实现的时候也是要获取连接，通过连接对象来提交")]),t._v(" "),_("p",[t._v("​\t\t\t\t6、当事务执行完毕之后需要清除相关的事务信息cleanupTransactionInfo")]),t._v(" "),_("p",[t._v("如果想要聊的更加细致的话，需要知道TransactionInfo,TransactionStatus,")]),t._v(" "),_("h1",{attrs:{id:"_9-谈一下spring事务传播"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-谈一下spring事务传播"}},[t._v("#")]),t._v(" 9.谈一下spring事务传播？")]),t._v(" "),_("p",[t._v("​\t\t\t传播特性有几种？7种")]),t._v(" "),_("p",[t._v("​\t\t\tRequired,Requires_new,nested,Support,Not_Support,Never,Mandatory")]),t._v(" "),_("p",[t._v("​\t\t\t某一个事务嵌套另一个事务的时候怎么办？")]),t._v(" "),_("p",[t._v("​\t\t\tA方法调用B方法，AB方法都有事务，并且传播特性不同，那么A如果有异常，B怎么办，B如果有异常，A怎么办？")]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("​\t\t\t总：事务的传播特性指的是不同方法的嵌套调用过程中，事务应该如何进行处理，是用同一个事务还是不同的事务，当出现异常的时候会回滚还是提交，两个方法之间的相关影响，在日常工作中，使用比较多的是required，Requires_new,nested")]),t._v(" "),_("p",[t._v("​\t\t\t分：1、先说事务的不同分类，可以分为三类：支持当前事务，不支持当前事务，嵌套事务")]),t._v(" "),_("p",[t._v("​\t\t\t\t\t2、如果外层方法是required，内层方法是，required,requires_new,nested")]),t._v(" "),_("p",[t._v("​\t\t\t\t\t3、如果外层方法是requires_new，内层方法是，required,requires_new,nested")]),t._v(" "),_("p",[t._v("​\t\t\t\t\t4、如果外层方法是nested，内层方法是，required,requires_new,nested")]),t._v(" "),_("p",[t._v("​")]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("找工作：")]),t._v(" "),_("p",[t._v("1、面试之前一定要调整好心态，不管你会多少东西，干就完了，出去面试就一个心态，老子天下第一，让自己超常发挥")]),t._v(" "),_("p",[t._v("2、得失心不要太重，全中国企业很多，好公司也有很多，没必要在一棵树上吊死，你可以有心仪的公司，留到最后，等你准备充分再去")]),t._v(" "),_("p",[t._v("3、找工作永远不可能准备好，很多同学怂，心态不好，不敢出去面试，我要准备，先按照你的技术储备取尝试一些公司（我就是来试水的）面试回来之后做总结，做好准备，不断总结，复盘，这样才能成长")]),t._v(" "),_("p",[t._v("4、希望大家保持好信息互通，乐于分享")]),t._v(" "),_("ol",[_("li",[t._v("IOC AOP")]),t._v(" "),_("li",[t._v("源码")]),t._v(" "),_("li",[t._v("SpringMVC 源码")]),t._v(" "),_("li",[t._v("SpringCloud 全家桶")]),t._v(" "),_("li",[t._v("@Transaction 事务, 事务传播特性, 隔离等级")])]),t._v(" "),_("p",[t._v("第十三：从Spring源码级别讲下BeanFactory和FactoryBean的区别")]),t._v(" "),_("p",[t._v("第十四：从Spring源码级别讲下Spring Bean的循环依赖问题")]),t._v(" "),_("p",[t._v("第十五：从Spring源码级别讲下BeanFactoryPostProcessor和BeanPostProcessor的区别")]),t._v(" "),_("p",[t._v("第十六：从Spring源码级别讲下Spring扩展第三方插件的底层原理，比如如何在Spring基础上扩展Spring Cloud这些组件")])])}),[],!1,null,null,null);e.default=a.exports}}]);