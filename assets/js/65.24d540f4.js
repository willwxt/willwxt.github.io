(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{421:function(a,t,r){"use strict";r.r(t);var s=r(45),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"分布式事务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[a._v("#")]),a._v(" 分布式事务")]),a._v(" "),r("p",[r("strong",[a._v("分布式事务")]),a._v(": 每个节点只知道自己的操作成功或失败, 无法知道其他节点的状态, 一个分布式事务跨越多个节点, 并且保证所有节点的事务ACID特性")]),a._v(" "),r("h2",{attrs:{id:"xa规范和2pc和3pc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xa规范和2pc和3pc"}},[a._v("#")]),a._v(" XA规范和2PC和3PC")]),a._v(" "),r("p",[r("strong",[a._v("XA规范")]),a._v(": X/Open组织提出的规范, 使用两阶段提交协议(2PC)来保证分布式事务的原子性")]),a._v(" "),r("h3",{attrs:{id:"二阶段提交-two-phase-commit-2pc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二阶段提交-two-phase-commit-2pc"}},[a._v("#")]),a._v(" 二阶段提交(Two-phase Commit, 2PC)")]),a._v(" "),r("p",[a._v("引入一个作为"),r("strong",[a._v("协调者")]),a._v("的组件, 来统一掌控所有节点("),r("strong",[a._v("参与者")]),a._v(")的操作结果, 并最终指示这些节点是否进行真正的提交(将数据写入磁盘);")]),a._v(" "),r("p",[a._v("思路: 参与者将操作成败通知协调者, 再由协调者根据所有参与者的反馈情报决定各参与者要提交操作还是中止操作")]),a._v(" "),r("h4",{attrs:{id:"前提-2pc成立基于以下假设"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前提-2pc成立基于以下假设"}},[a._v("#")]),a._v(" 前提: 2PC成立基于以下假设")]),a._v(" "),r("ol",[r("li",[a._v("该分布式系统中, 存在一个节点作为"),r("strong",[a._v("协调者")]),a._v(", 其他节点作为"),r("strong",[a._v("参与者")]),a._v(". 且节点之间可以进行网络通信")]),a._v(" "),r("li",[a._v("所有节点都采用WAL, 即使节点损坏不会导致日志数据的消失")]),a._v(" "),r("li",[a._v("所有节点不会永久性损坏, 即使损坏后仍然可以恢复")])]),a._v(" "),r("h4",{attrs:{id:"第一阶段-或称投票阶段-prepare"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段-或称投票阶段-prepare"}},[a._v("#")]),a._v(" 第一阶段(或称投票阶段, prepare)")]),a._v(" "),r("ol",[r("li",[a._v("协调者向所有参与者询问是否可以执行提交操作, 并等待节点响应")]),a._v(" "),r("li",[a._v("参与者执行询问发起的所有事务操作, 记录undo和redo")]),a._v(" "),r("li",[a._v("参与者响应询问: 如果事务执行成功, 响应同意; 事务失败则响应中止;")])]),a._v(" "),r("h4",{attrs:{id:"第二阶段-commit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段-commit"}},[a._v("#")]),a._v(" 第二阶段(commit)")]),a._v(" "),r("p",[a._v("a. 成功: 当所有参与者都同意")]),a._v(" "),r("p",[a._v("协调者发起提交 - 参与者提交- 参与者反馈完成 - 协调者收到所有提交完成后完成事务")]),a._v(" "),r("p",[a._v("b. 失败: 任意参与者响应中止")]),a._v(" "),r("p",[a._v("协调者发起回滚 - 参与者回滚 - 参与者反馈完成 - 协调者收到所有回滚完成后取消事务")]),a._v(" "),r("h4",{attrs:{id:"缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点")]),a._v(" "),r("ol",[r("li",[a._v("执行过程中, 节点都处于阻塞状态; 可能导致多个事务的连带阻塞")]),a._v(" "),r("li",[a._v("参与者崩溃, 需要协调者的超时机制进行回滚操作, 策略比较保守")])]),a._v(" "),r("h3",{attrs:{id:"三阶段提交-three-phase-commit-3pc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三阶段提交-three-phase-commit-3pc"}},[a._v("#")]),a._v(" 三阶段提交(Three-phase commit, 3PC)")]),a._v(" "),r("p",[a._v('概述: 与二阶段提交不同的是, 三阶段提交是"非阻塞"协议')]),a._v(" "),r("ol",[r("li",[a._v("加入超时机制: 主要为了解决2PC的阻塞问题")]),a._v(" "),r("li",[a._v("将prepare阶段拆成 CanCommit和PreCommit:\n"),r("ul",[r("li",[a._v("CanCommit就是检测各事务是否可以成功获取锁(是否可以顺利执行事务)")]),a._v(" "),r("li",[a._v("而PreCommit可以视为2PC的一阶段加上超时时间")])])])]),a._v(" "),r("h2",{attrs:{id:"seata分布式事务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#seata分布式事务"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"http://seata.io/zh-cn/docs/overview/what-is-seata.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Seata分布式事务"),r("OutboundLink")],1)]),a._v(" "),r("h3",{attrs:{id:"seata-at-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#seata-at-模式"}},[a._v("#")]),a._v(" Seata AT 模式")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://shardingsphere.apache.org/document/current/img/transaction/seata-at-transaction.png",alt:"Seata"}})]),a._v(" "),r("h3",{attrs:{id:"seata-tcc-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#seata-tcc-模式"}},[a._v("#")]),a._v(" Seata TCC 模式")]),a._v(" "),r("p",[r("img",{attrs:{src:"http://seata.io/img/seata_tcc-1.png",alt:"tcc"}})]),a._v(" "),r("p",[a._v("就是 Seata AT模式的 非数据库实现版本")]),a._v(" "),r("ol",[r("li",[a._v("每个模块都需要编写三部分代码: try(准备) confirm(确认提交) cancel(取消回滚)")]),a._v(" "),r("li",[a._v("由业务管理器管理并调用一个事务中所有模块的这些代码")]),a._v(" "),r("li",[a._v("cancel中编写补偿逻辑")])]),a._v(" "),r("h3",{attrs:{id:"seata-saga-模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#seata-saga-模式"}},[a._v("#")]),a._v(" SEATA Saga 模式")]),a._v(" "),r("h2",{attrs:{id:"可靠消息-base"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#可靠消息-base"}},[a._v("#")]),a._v(" 可靠消息 + BASE")]),a._v(" "),r("p",[a._v("处理服务先提交给消息服务, 确认发送后再通知消息服务进行真正发送")]),a._v(" "),r("h2",{attrs:{id:"最大努力通知型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最大努力通知型"}},[a._v("#")]),a._v(" 最大努力通知型")]),a._v(" "),r("p",[a._v("不保证数据调用成功, 但提供可查询的操作")]),a._v(" "),r("ul",[r("li",[a._v("比如通过MQ进行通知(多次通知),查询校对(查证),对账文件,支付宝支付成功异步回调")])])])}),[],!1,null,null,null);t.default=e.exports}}]);