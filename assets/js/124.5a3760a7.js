(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{478:function(r,a,t){"use strict";t.r(a);var s=t(45),i=Object(s.a)({},(function(){var r=this,a=r.$createElement,t=r._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[r._v("#")]),r._v(" 概述")]),r._v(" "),t("h2",{attrs:{id:"什么是-spring-boot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-boot"}},[r._v("#")]),r._v(" 什么是 Spring Boot？")]),r._v(" "),t("p",[r._v("Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-有哪些优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-有哪些优点"}},[r._v("#")]),r._v(" Spring Boot 有哪些优点？")]),r._v(" "),t("p",[r._v("Spring Boot 主要有如下优点：")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("容易上手，提升开发效率，为 Spring 开发提供一个更快、更广泛的入门体验。")])]),r._v(" "),t("li",[t("p",[r._v("开箱即用，远离繁琐的配置。")])]),r._v(" "),t("li",[t("p",[r._v("提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。")])]),r._v(" "),t("li",[t("p",[r._v("没有代码生成，也不需要XML配置。")])]),r._v(" "),t("li",[t("p",[r._v("避免大量的 Maven 导入和各种版本冲突。")])])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-的核心注解是哪个-它主要由哪几个注解组成的"}},[r._v("#")]),r._v(" Spring Boot 的核心注解是哪个？它主要由哪几个注解组成的？")]),r._v(" "),t("p",[r._v("启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：")]),r._v(" "),t("p",[r._v("@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。")]),r._v(" "),t("p",[r._v("@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： @SpringBootApplication(exclude")]),r._v(" "),t("p",[r._v("= { DataSourceAutoConfiguration.class })。")]),r._v(" "),t("p",[r._v("@ComponentScan：Spring组件扫描。")]),r._v(" "),t("h1",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[r._v("#")]),r._v(" 配置")]),r._v(" "),t("h2",{attrs:{id:"什么是-javaconfig"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-javaconfig"}},[r._v("#")]),r._v(" 什么是 JavaConfig？")]),r._v(" "),t("p",[r._v("Spring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring IoC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于：")]),r._v(" "),t("p",[r._v("（1）  面向对象的配置。由于配置被定义为 JavaConfig 中的类，因此用户可以")]),r._v(" "),t("p",[r._v("充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的")]),r._v(" "),t("p",[r._v("@Bean 方法等。")]),r._v(" "),t("p",[r._v("（2）  减少或消除 XML 配置。基于依赖注入原则的外化配置的好处已被证明。")]),r._v(" "),t("p",[r._v("但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从")]),r._v(" "),t("p",[r._v("技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。（3）类型安全和重构友好。JavaConfig 提供了一种类型安全的方法来配置")]),r._v(" "),t("p",[r._v("Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-自动配置原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-自动配置原理是什么"}},[r._v("#")]),r._v(" Spring Boot 自动配置原理是什么？")]),r._v(" "),t("p",[r._v("注解 @EnableAutoConfiguration, @Configuration, @ConditionalOnClass 就是自动配置的核心，")]),r._v(" "),t("p",[r._v("@EnableAutoConfiguration 给容器导入META-INF/spring.factories 里定义的自动配置类。")]),r._v(" "),t("p",[r._v("筛选有效的自动配置类。")]),r._v(" "),t("p",[r._v("每一个自动配置类结合对应的 xxxProperties.java 读取配置文件进行自动配置功能")]),r._v(" "),t("h2",{attrs:{id:"你如何理解-spring-boot-配置加载顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#你如何理解-spring-boot-配置加载顺序"}},[r._v("#")]),r._v(" 你如何理解 Spring Boot 配置加载顺序？")]),r._v(" "),t("p",[r._v("在 Spring Boot 里面，可以使用以下几种方式来加载配置。")]),r._v(" "),t("p",[r._v("1）     properties文件；")]),r._v(" "),t("p",[r._v("2）     YAML文件；")]),r._v(" "),t("p",[r._v("3）     系统环境变量；")]),r._v(" "),t("p",[r._v("等等……")]),r._v(" "),t("h2",{attrs:{id:"_4-命令行参数-什么是-yaml"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-命令行参数-什么是-yaml"}},[r._v("#")]),r._v(" 4）命令行参数； 什么是 YAML？")]),r._v(" "),t("p",[r._v("YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。")]),r._v(" "),t("h2",{attrs:{id:"yaml-配置的优势在哪里"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yaml-配置的优势在哪里"}},[r._v("#")]),r._v(" YAML 配置的优势在哪里 ?")]),r._v(" "),t("p",[r._v("YAML 现在可以算是非常流行的一种配置文件格式了，无论是前端还是后端，都可以见到 YAML 配置。那么 YAML 配置和传统的 properties 配置相比到底有哪些优势呢？")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("配置有序，在一些特殊的场景下，配置有序很关键")])]),r._v(" "),t("li",[t("p",[r._v("支持数组，数组中的元素可以是基本数据类型也可以是对象")])]),r._v(" "),t("li",[t("p",[r._v("简洁")])])]),r._v(" "),t("p",[r._v("相比 properties 配置文件，YAML 还有一个缺点，就是不支持 @PropertySource 注解导入自定义的 YAML 配置。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-是否可以使用-xml-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-是否可以使用-xml-配置"}},[r._v("#")]),r._v(" Spring Boot 是否可以使用 XML 配置 ?")]),r._v(" "),t("p",[r._v("Spring Boot 推荐使用 Java 配置而非 XML 配置，但是 Spring Boot 中也可以使用 XML 配置，通过 @ImportResource 注解可以引入一个 XML 配置。 spring boot 核心配置文件是什么？")]),r._v(" "),t("p",[r._v("bootstrap.properties 和 application.properties 有何区别 ?")]),r._v(" "),t("p",[r._v("单纯做 Spring Boot 开发，可能不太容易遇到 bootstrap.properties 配置文")]),r._v(" "),t("p",[r._v("件，但是在结合 Spring Cloud 时，这个配置就会经常遇到了，特别是在需要加载一些远程配置文件的时侯。")]),r._v(" "),t("p",[r._v("spring boot 核心的两个配置文件：")]),r._v(" "),t("p",[r._v("bootstrap (. yml 或者 . properties)：boostrap 由父 ApplicationContext 加载的，比 applicaton 优先加载，配置在应用程序上下文的引导阶段生效。一般来说我们在 Spring Cloud Config 或者 Nacos 中会用到它。且 boostrap 里面的属性不")]),r._v(" "),t("p",[r._v("能被覆盖；")]),r._v(" "),t("p",[r._v("application (. yml 或者 . properties)： 由ApplicatonContext 加载，用于 spring boot 项目的自动化配置。")]),r._v(" "),t("h2",{attrs:{id:"什么是-spring-profiles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-profiles"}},[r._v("#")]),r._v(" 什么是 Spring Profiles？")]),r._v(" "),t("p",[r._v("Spring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。因此，当应用程序在开发中运行时，只有某些 bean 可以加载，而在")]),r._v(" "),t("p",[r._v("PRODUCTION中，某些其他 bean 可以加载。假设我们的要求是 Swagger 文档仅适用于 QA 环境，并且禁用所有其他文档。这可以使用配置文件来完成。Spring Boot 使得使用配置文件非常简单。")]),r._v(" "),t("h2",{attrs:{id:"如何在自定义端口上运行-spring-boot-应用程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在自定义端口上运行-spring-boot-应用程序"}},[r._v("#")]),r._v(" 如何在自定义端口上运行 Spring Boot 应用程序？")]),r._v(" "),t("p",[r._v("为了在自定义端口上运行 Spring Boot 应用程序，您可以在")]),r._v(" "),t("p",[r._v("application.properties 中指定端口。server.port = 8090")]),r._v(" "),t("h1",{attrs:{id:"安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[r._v("#")]),r._v(" 安全")]),r._v(" "),t("h2",{attrs:{id:"如何实现-spring-boot-应用程序的安全性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-spring-boot-应用程序的安全性"}},[r._v("#")]),r._v(" 如何实现 Spring Boot 应用程序的安全性？")]),r._v(" "),t("p",[r._v("为了实现 Spring Boot 的安全性，我们使用 spring-boot-starter-security 依赖项，并且必须添加安全配置。它只需要很少的代码。配置类将必须扩展")]),r._v(" "),t("p",[r._v("WebSecurityConfigurerAdapter 并覆盖其方法。")]),r._v(" "),t("h2",{attrs:{id:"比较一下-spring-security-和-shiro-各自的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较一下-spring-security-和-shiro-各自的优缺点"}},[r._v("#")]),r._v(" 比较一下 Spring Security 和 Shiro 各自的优缺点 ?")]),r._v(" "),t("p",[r._v("由于 Spring Boot 官方提供了大量的非常方便的开箱即用的 Starter ，包括")]),r._v(" "),t("p",[r._v("Spring Security 的 Starter ，使得在 Spring Boot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是")]),r._v(" "),t("p",[r._v("Spring Boot 项目，一般选择 Spring Security 。当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro 和 Spring")]),r._v(" "),t("p",[r._v("Security 相比，主要有如下一些特点：")]),r._v(" "),t("ol",[t("li",[r._v("Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级")])]),r._v(" "),t("p",[r._v("的安全管理框架")]),r._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[r._v("Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单")])]),r._v(" "),t("li",[t("p",[r._v("Spring Security 功能强大；Shiro 功能简单")])])]),r._v(" "),t("h2",{attrs:{id:"spring-boot-中如何解决跨域问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中如何解决跨域问题"}},[r._v("#")]),r._v(" Spring Boot 中如何解决跨域问题 ?")]),r._v(" "),t("p",[r._v("跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('1  @Configuration\n2  public class CorsConfig implements WebMvcConfigurer { 3\n4   @Override\n5   public void addCorsMappings(CorsRegistry registry) {\n6   registry.addMapping("/**")\n7   .allowedOrigins("*")\n8   .allowCredentials(true)\n9   .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")\n10   .maxAge(3600);\n11   } \n12\n13  }\n')])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br"),t("span",{staticClass:"line-number"},[r._v("12")]),t("br")])]),t("p",[r._v("项目中前后端分离部署，所以需要解决跨域的问题。")]),r._v(" "),t("p",[r._v("我们使用cookie存放用户登录的信息，在spring拦截器进行权限控制，当权限不符合时，直接返回给用户固定的json结果。")]),r._v(" "),t("p",[r._v("当用户登录以后，正常使用；当用户退出登录状态时或者token过期时，由于拦截器和跨域的顺序有问题，出现了跨域的现象。")]),r._v(" "),t("p",[r._v("我们知道一个http请求，先走filter，到达servlet后才进行拦截器的处理，如果我们把cors放在filter里，就可以优先于权限拦截器执行。")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v('1  @Configuration\n2  public class CorsConfig { 3\n4   @Bean\n5   public CorsFilter corsFilter() {\n6   CorsConfiguration corsConfiguration = new CorsConfiguration();\n7   corsConfiguration.addAllowedOrigin("*");\n8   corsConfiguration.addAllowedHeader("*");\n9   corsConfiguration.addAllowedMethod("*");\n10   corsConfiguration.setAllowCredentials(true);\n11   UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new U rlBasedCorsConfigurationSource();\n12   urlBasedCorsConfigurationSource.registerCorsConfiguration("/**", corsCo nfiguration);\n13   return new CorsFilter(urlBasedCorsConfigurationSource);\n14   } \n15\n16  }\n')])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br"),t("span",{staticClass:"line-number"},[r._v("5")]),t("br"),t("span",{staticClass:"line-number"},[r._v("6")]),t("br"),t("span",{staticClass:"line-number"},[r._v("7")]),t("br"),t("span",{staticClass:"line-number"},[r._v("8")]),t("br"),t("span",{staticClass:"line-number"},[r._v("9")]),t("br"),t("span",{staticClass:"line-number"},[r._v("10")]),t("br"),t("span",{staticClass:"line-number"},[r._v("11")]),t("br"),t("span",{staticClass:"line-number"},[r._v("12")]),t("br"),t("span",{staticClass:"line-number"},[r._v("13")]),t("br"),t("span",{staticClass:"line-number"},[r._v("14")]),t("br"),t("span",{staticClass:"line-number"},[r._v("15")]),t("br")])]),t("h2",{attrs:{id:"什么是-csrf-攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-csrf-攻击"}},[r._v("#")]),r._v(" 什么是 CSRF 攻击？")]),r._v(" "),t("p",[r._v("CSRF 代表跨站请求伪造。这是一种攻击，迫使 终用户在当前通过身份验证的 Web 应用程序上执行不需要的操作。CSRF 攻击专门针对状态改变请求，而不是数据窃取，因为攻击者无法查看对伪造请求的响应。")]),r._v(" "),t("h1",{attrs:{id:"监视器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监视器"}},[r._v("#")]),r._v(" 监视器")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-中的监视器是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中的监视器是什么"}},[r._v("#")]),r._v(" Spring Boot 中的监视器是什么？")]),r._v(" "),t("p",[r._v("Spring boot actuator 是 spring 启动框架中的重要功能之一。Spring boot 监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为 HTTP URL 访问 的REST 端点来检查状态。")]),r._v(" "),t("p",[r._v("如何在 Spring Boot 中禁用 Actuator 端点安全性？")]),r._v(" "),t("p",[r._v("默认情况下，所有敏感的 HTTP 端点都是安全的，只有具有 ACTUATOR 角色")]),r._v(" "),t("p",[r._v("的用户才能访问它们。安全性是使用标准的 HttpServletRequest.isUserInRole 方法实施的。 我们可以使用来禁用安全性。只有在执行机构端点在防火墙后访问时，才建议禁用安全性。")]),r._v(" "),t("h2",{attrs:{id:"我们如何监视所有-spring-boot-微服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们如何监视所有-spring-boot-微服务"}},[r._v("#")]),r._v(" 我们如何监视所有 Spring Boot 微服务？")]),r._v(" "),t("p",[r._v("Spring Boot 提供监视器端点以监控各个微服务的度量。这些端点对于获取有关应用程序的信息（如它们是否已启动）以及它们的组件（如数据库等）是否正常运行很有帮助。但是，使用监视器的一个主要缺点或困难是，我们必须单独打开应用程序的知识点以了解其状态或健康状况。想象一下涉及 50 个应用程序的微服务，管理员将不得不击中所有 50 个应用程序的执行终端。为了帮助我们处理这种情况，我们将使用位于的开源项目。 它建立在 Spring Boot Actuator 之上，它提供了一个 Web UI，使我们能够可视化多个应用程序的度量。")]),r._v(" "),t("h1",{attrs:{id:"整合第三方项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整合第三方项目"}},[r._v("#")]),r._v(" 整合第三方项目")]),r._v(" "),t("h2",{attrs:{id:"什么是-websockets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-websockets"}},[r._v("#")]),r._v(" 什么是 WebSockets？")]),r._v(" "),t("p",[r._v("WebSocket 是一种计算机通信协议，通过单个 TCP 连接提供全双工通信信道。")]),r._v(" "),t("p",[r._v("1、     WebSocket 是双向的 -使用 WebSocket 客户端或服务器可以发起消息发送。")]),r._v(" "),t("p",[r._v("2、     WebSocket 是全双工的 -客户端和服务器通信是相互独立的。")]),r._v(" "),t("p",[r._v("3、     单个 TCP 连接 -初始连接使用 HTTP，然后将此连接升级到基于套接字的连接。然后这个单一连接用于所有未来的通信")]),r._v(" "),t("p",[r._v("4、     Light -与 http 相比，WebSocket 消息数据交换要轻得多。")]),r._v(" "),t("p",[r._v("什么是 Spring Data ?")]),r._v(" "),t("p",[r._v("Spring Data 是 Spring 的一个子项目。用于简化数据库访问，支持NoSQL 和 关系数据存储。其主要目标是使数据库的访问变得方便快捷。Spring Data 具有如下特点：")]),r._v(" "),t("p",[r._v("SpringData 项目支持 NoSQL 存储：")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("MongoDB （文档数据库）")])]),r._v(" "),t("li",[t("p",[r._v("Neo4j（图形数据库）")])]),r._v(" "),t("li",[t("p",[r._v("Redis（键/值存储）")])]),r._v(" "),t("li",[t("p",[r._v("Hbase（列族数据库）")])])]),r._v(" "),t("p",[r._v("SpringData 项目所支持的关系数据存储技术：")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("JDBC")])]),r._v(" "),t("li",[t("p",[r._v("JPA")])])]),r._v(" "),t("p",[r._v("Spring Data Jpa 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！Spring Data JPA 通过规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。")]),r._v(" "),t("h2",{attrs:{id:"什么是-spring-batch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-batch"}},[r._v("#")]),r._v(" 什么是 Spring Batch？")]),r._v(" "),t("p",[r._v("Spring Boot Batch 提供可重用的函数，这些函数在处理大量记录时非常重要，包括日志/跟踪，事务管理，作业处理统计信息，作业重新启动，跳过和资源管理。它还提供了更先进的技术服务和功能，通过优化和分区技术，可以实现极高批量和高性能批处理作业。简单以及复杂的大批量批处理作业可以高度可扩展的方式利用框架处理重要大量的信息。")]),r._v(" "),t("h2",{attrs:{id:"什么是-freemarker-模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-freemarker-模板"}},[r._v("#")]),r._v(" 什么是 FreeMarker 模板？")]),r._v(" "),t("p",[r._v("FreeMarker 是一个基于 Java 的模板引擎，  初专注于使用 MVC 软件架构进行动态网页生成。使用 Freemarker 的主要优点是表示层和业务层的完全分离。程序员可以处理应用程序代码，而设计人员可以处理 html 页面设计。 后使用 freemarker 可以将这些结合起来，给出  终的输出页面。")]),r._v(" "),t("h2",{attrs:{id:"如何集成-spring-boot-和-activemq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何集成-spring-boot-和-activemq"}},[r._v("#")]),r._v(" 如何集成 Spring Boot 和 ActiveMQ？")]),r._v(" "),t("p",[r._v("对于集成 Spring Boot 和 ActiveMQ，我们使用依赖关系。 它只需要很少的配置，并且不需要样板代码。")]),r._v(" "),t("h2",{attrs:{id:"什么是-apache-kafka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-apache-kafka"}},[r._v("#")]),r._v(" 什么是 Apache Kafka？")]),r._v(" "),t("p",[r._v("Apache Kafka 是一个分布式发布 - 订阅消息系统。它是一个可扩展的，容错的发布 - 订阅消息系统，它使我们能够构建分布式应用程序。这是一个 Apache 顶级项目。Kafka 适合离线和在线消息消费。")]),r._v(" "),t("h2",{attrs:{id:"什么是-swagger-你用-spring-boot-实现了它吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-swagger-你用-spring-boot-实现了它吗"}},[r._v("#")]),r._v(" 什么是 Swagger？你用 Spring Boot 实现了它吗？")]),r._v(" "),t("p",[r._v("Swagger 广泛用于可视化 API，使用 Swagger UI 为前端开发人员提供在线沙箱。Swagger 是用于生成 RESTful Web 服务的可视化表示的工具，规范和完整框架实现。它使文档能够以与服务器相同的速度更新。当通过 Swagger 正确定义时，消费者可以使用 少量的实现逻辑来理解远程服务并与其进行交互。因此，Swagger消除了调用服务时的猜测。")]),r._v(" "),t("p",[r._v("前后端分离，如何维护接口文档 ?")]),r._v(" "),t("p",[r._v("前后端分离开发日益流行，大部分情况下，我们都是通过 Spring Boot 做前后端分离开发，前后端分离一定会有接口文档，不然会前后端会深深陷入到扯皮中。一个比较笨的方法就是使用 word 或者 md 来维护接口文档，但是效率太低，接口一变，所有人手上的文档都得变。在 Spring Boot 中，这个问题常见")]),r._v(" "),t("p",[r._v("的解决方案是 Swagger ，使用 Swagger 我们可以快速生成一个接口文档网")]),r._v(" "),t("p",[r._v("站，接口一旦发生变化，文档就会自动更新，所有开发工程师访问这一个在线网站就可以获取到 新的接口文档，非常方便。")]),r._v(" "),t("h1",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[r._v("#")]),r._v(" 其他")]),r._v(" "),t("h2",{attrs:{id:"如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何重新加载-spring-boot-上的更改-而无需重新启动服务器-spring-boot项目如何热部署"}},[r._v("#")]),r._v(" 如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？Spring Boot项目如何热部署？")]),r._v(" "),t("p",[r._v("这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。")]),r._v(" "),t("p",[r._v("Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员 需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。")]),r._v(" "),t("p",[r._v("它还提供 H2 数据库控制台以更好地测试应用程序。")]),r._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[r._v("1 <dependency>\n2   <groupId>org.springframework.boot</groupId>\n3   <artifactId>spring‐boot‐devtools</artifactId>\n4  </dependency>\n")])]),r._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[r._v("1")]),t("br"),t("span",{staticClass:"line-number"},[r._v("2")]),t("br"),t("span",{staticClass:"line-number"},[r._v("3")]),t("br"),t("span",{staticClass:"line-number"},[r._v("4")]),t("br")])]),t("h2",{attrs:{id:"您使用了哪些-starter-maven-依赖项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#您使用了哪些-starter-maven-依赖项"}},[r._v("#")]),r._v(" 您使用了哪些 starter maven 依赖项？")]),r._v(" "),t("p",[r._v("使用了下面的一些依赖项")]),r._v(" "),t("p",[r._v("spring-boot-starter-activemq")]),r._v(" "),t("p",[r._v("spring-boot-starter-security")]),r._v(" "),t("p",[r._v("这有助于增加更少的依赖关系，并减少版本的冲突。")]),r._v(" "),t("p",[r._v("Spring Boot 中的 starter 到底是什么 ?")]),r._v(" "),t("p",[r._v("首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提供了一个自动化配置类，一般命名为 XXXAutoConfiguration")]),r._v(" "),t("p",[r._v("，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是")]),r._v(" "),t("p",[r._v("Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter spring-boot-starter-parent 有什么用 ?")]),r._v(" "),t("p",[r._v("我们都知道，新创建一个 Spring Boot 项目，默认都是有 parent 的，这个")]),r._v(" "),t("p",[r._v("parent 就是 spring-boot-starter-parent ，spring-boot-starter-parent 主要有如下作用：")]),r._v(" "),t("ol",[t("li",[t("p",[r._v("定义了 Java 编译版本为 1.8 。")])]),r._v(" "),t("li",[t("p",[r._v("使用 UTF-8 格式编码。")])]),r._v(" "),t("li",[t("p",[r._v("继承自 spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号。")])]),r._v(" "),t("li",[t("p",[r._v("执行打包操作的配置。")])]),r._v(" "),t("li",[t("p",[r._v("自动化的资源过滤。")])]),r._v(" "),t("li",[t("p",[r._v("自动化的插件配置。")])]),r._v(" "),t("li",[t("p",[r._v("针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 applicationdev.properties 和 application-dev.yml。")])])]),r._v(" "),t("p",[r._v("Spring Boot 打成的 jar 和普通的 jar 有什么区别 ?")]),r._v(" "),t("p",[r._v("Spring Boot 项目  终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 java jar xxx.jar 命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。")]),r._v(" "),t("p",[r._v("Spring Boot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot")]),r._v(" "),t("p",[r._v("打包成的可执行 jar 解压后，在 \\BOOT-INF\\classes 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。")]),r._v(" "),t("h2",{attrs:{id:"运行-spring-boot-有哪几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行-spring-boot-有哪几种方式"}},[r._v("#")]),r._v(" 运行 Spring Boot 有哪几种方式？")]),r._v(" "),t("p",[r._v("1）     打包用命令或者放到容器中运行")]),r._v(" "),t("p",[r._v("2）     用 Maven/ Gradle 插件运行")]),r._v(" "),t("p",[r._v("3）直接执行 main 方法运行")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-需要独立的容器运行吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-需要独立的容器运行吗"}},[r._v("#")]),r._v(" Spring Boot 需要独立的容器运行吗？")]),r._v(" "),t("h2",{attrs:{id:"开启-spring-boot-特性有哪几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启-spring-boot-特性有哪几种方式"}},[r._v("#")]),r._v(" 开启 Spring Boot 特性有哪几种方式？")]),r._v(" "),t("p",[r._v("1）     继承spring-boot-starter-parent项目")]),r._v(" "),t("p",[r._v("2）     导入spring-boot-dependencies项目依赖")]),r._v(" "),t("h2",{attrs:{id:"如何使用-spring-boot-实现异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-spring-boot-实现异常处理"}},[r._v("#")]),r._v(" 如何使用 Spring Boot 实现异常处理？")]),r._v(" "),t("p",[r._v("Spring 提供了一种使用 ControllerAdvice 处理异常的非常有用的方法。 我们通过实现一个 ControlerAdvice 类，来处理控制器类抛出的所有异常。")]),r._v(" "),t("h2",{attrs:{id:"如何使用-spring-boot-实现分页和排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-spring-boot-实现分页和排序"}},[r._v("#")]),r._v(" 如何使用 Spring Boot 实现分页和排序？")]),r._v(" "),t("p",[r._v("使用 Spring Boot 实现分页非常简单。使用 Spring Data-JPA 可以实现将可分页的传递给存储库方法。")]),r._v(" "),t("p",[r._v("微服务中如何实现 session 共享 ?")]),r._v(" "),t("p",[r._v("在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经")]),r._v(" "),t("p",[r._v("常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring")]),r._v(" "),t("p",[r._v("Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。")]),r._v(" "),t("h2",{attrs:{id:"spring-boot-中如何实现定时任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中如何实现定时任务"}},[r._v("#")]),r._v(" Spring Boot 中如何实现定时任务 ?")]),r._v(" "),t("p",[r._v("定时任务也是一个常见的需求，Spring Boot 中对于定时任务的支持主要还是来自 Spring 框架。")]),r._v(" "),t("p",[r._v("在 Spring Boot 中使用定时任务主要有两种不同的方式，一个就是使用 Spring 中的 @Scheduled 注解，另一个则是使用第三方框架 Quartz。")]),r._v(" "),t("p",[r._v("使用 Spring 中的 @Scheduled 的方式主要通过 @Scheduled 注解来实现。")]),r._v(" "),t("p",[r._v("使用 Quartz ，则按照 Quartz 的方式，定义 Job 和 Trigger 即可。")])])}),[],!1,null,null,null);a.default=i.exports}}]);